#pragma once

struct SString
{
    static int StrLen(const char* lpStr);

    //---------------------------------------------------------------------------
    // 函数:	StrEnd
    // 功能:	返回字符串结尾指针
    // 参数:	lpStr	:	字符串开头的指针
    // 返回:	lpEnd	:	字符串末尾的指针
    //---------------------------------------------------------------------------
    static char* StrEnd(const char* lpStr);

    //---------------------------------------------------------------------------
    // 函数:	StrCpy
    // 功能:	字符串拷贝
    // 参数:	lpDest	:	目标字符串
    //			lpSrc	:	源字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static void StrCpy(char* lpDest, const char* lpSrc);

    //---------------------------------------------------------------------------
    // 函数:	StrCpyLen
    // 功能:	字符串拷贝,有最大长度限制
    // 参数:	lpDest	:	目标字符串
    //			lpSrc	:	源字符串
    //			nMaxLen	:	最大长度
    // 返回:	void
    //---------------------------------------------------------------------------
    static  void StrCpyLen(char* lpDest, const char* lpSrc, int nMaxLen);

    //---------------------------------------------------------------------------
    // 函数:	StrCat
    // 功能:	字符串末尾追加另一个字符串
    // 参数:	lpDest	:	目标字符串
    //			lpSrc	:	源字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static  void StrCat(char* lpDest, const char* lpSrc);

    //---------------------------------------------------------------------------
    // 函数:	StrCatLen
    // 功能:	字符串末尾追加另一个字符串,有最大长度限制
    // 参数:	lpDest	:	目标字符串
    //			lpSrc	:	源字符串
    //			nMaxLen	:	最大长度
    // 返回:	void
    //---------------------------------------------------------------------------
    static  void StrCatLen(char* lpDest, const char* lpSrc, int nMaxLen);

    //---------------------------------------------------------------------------
    // 函数:	StrCmp
    // 功能:	字符串比较
    // 参数:	lpDest	:	字符串1	
    //			lpSrc	:	字符串2
    // 返回:	TRUE	:	相同
    //			FALSE	:	不同
    //---------------------------------------------------------------------------
    static bool StrCmp(const char* lpDest, const char* lpSrc);

    //---------------------------------------------------------------------------
    // 函数:	StrCmpLen
    // 功能:	字符串比较,限定长度
    // 参数:	lpDest	:	字符串1	
    //			lpSrc	:	字符串2
    //			nLen	:	长度
    // 返回:	TRUE	:	相同
    //			FALSE	:	不同
    //---------------------------------------------------------------------------
    static  bool StrCmpLen(const char* lpDest, const char* lpSrc, int nMaxLen);

    //---------------------------------------------------------------------------
    // 函数:	StrUpper
    // 功能:	小写字母转大写字母
    // 参数:	lpDest	:	字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static void StrUpper(char* lpDest);

    //---------------------------------------------------------------------------
    // 函数:	StrLower
    // 功能:	大写字母转小写字母
    // 参数:	lpDest	:	字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static  void StrLower(char* lpDest);

    static void StrRep(char* lpDest, char* lpSrc, char* lpRep);

    //---------------------------------------------------------------------------
    // 函数:	Replace
    // 功能:	替换字符
    // 参数:	lpSrc	:	字符串 ；lpMath ： 匹配字符（ '\\' ）; lpReplate : 替换字符（'/'）
    // 返回:	void
    //---------------------------------------------------------------------------
    static void Replace(char* lpSrc, char* lpMath, char* lpReplate);


    //---------------------------------------------------------------------------
    // 函数:	StrLower
    // 功能:	大写字母转小写字母
    // 参数:	lpDest	:	字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static char* strlwr(char* string);
   

    //---------------------------------------------------------------------------
    // 函数:	StrUpper
    // 功能:	小写字母转大写字母
    // 参数:	lpDest	:	字符串
    // 返回:	void
    //---------------------------------------------------------------------------
    static char* strupr(char* string);
    

    static void xtoa(unsigned long val, char *buf, unsigned radix, int is_neg);
   

    /* Actual functions just call conversion helper with neg flag set correctly,
    and return pointer to buffer. */

    static char* itoa(int val, char *buf, int radix);

    //---------------------------------------------------------------------------
    // 函数:	getint
    // 功能:	转换字符串为int
    // 参数:	ppcszString	:	字符串  ， nDefaultValue ：默认值
    // 返回:	int
    //---------------------------------------------------------------------------
    static int getint(const char **ppcszString, int nDefaultValue);

    //---------------------------------------------------------------------------
    // 函数:	skipsymbol
    // 功能:	跳过符号
    // 参数:	ppszString	:	字符串  ， nSymbol 符号
    // 返回:	bool
    //---------------------------------------------------------------------------
    static bool skipsymbol(const char **ppcszString, int nSymbol);
   
};

