// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace mapV2 {
class BossOwnerRequest;
class BossOwnerRequestDefaultTypeInternal;
PROTOBUF_API extern BossOwnerRequestDefaultTypeInternal _BossOwnerRequest_default_instance_;
class BossReliveTime;
class BossReliveTimeDefaultTypeInternal;
PROTOBUF_API extern BossReliveTimeDefaultTypeInternal _BossReliveTime_default_instance_;
class GatherOperatorRequest;
class GatherOperatorRequestDefaultTypeInternal;
PROTOBUF_API extern GatherOperatorRequestDefaultTypeInternal _GatherOperatorRequest_default_instance_;
class MapBoss;
class MapBossDefaultTypeInternal;
PROTOBUF_API extern MapBossDefaultTypeInternal _MapBoss_default_instance_;
class MonsterTomb;
class MonsterTombDefaultTypeInternal;
PROTOBUF_API extern MonsterTombDefaultTypeInternal _MonsterTomb_default_instance_;
class NoticeBean;
class NoticeBeanDefaultTypeInternal;
PROTOBUF_API extern NoticeBeanDefaultTypeInternal _NoticeBean_default_instance_;
class PerformerEquipBean;
class PerformerEquipBeanDefaultTypeInternal;
PROTOBUF_API extern PerformerEquipBeanDefaultTypeInternal _PerformerEquipBean_default_instance_;
class PerformerFashionBean;
class PerformerFashionBeanDefaultTypeInternal;
PROTOBUF_API extern PerformerFashionBeanDefaultTypeInternal _PerformerFashionBean_default_instance_;
class PickUpMapItemRequest;
class PickUpMapItemRequestDefaultTypeInternal;
PROTOBUF_API extern PickUpMapItemRequestDefaultTypeInternal _PickUpMapItemRequest_default_instance_;
class PlayerReliveRequest;
class PlayerReliveRequestDefaultTypeInternal;
PROTOBUF_API extern PlayerReliveRequestDefaultTypeInternal _PlayerReliveRequest_default_instance_;
class ReqClickEvent;
class ReqClickEventDefaultTypeInternal;
PROTOBUF_API extern ReqClickEventDefaultTypeInternal _ReqClickEvent_default_instance_;
class ResAllPerformerTotalHp;
class ResAllPerformerTotalHpDefaultTypeInternal;
PROTOBUF_API extern ResAllPerformerTotalHpDefaultTypeInternal _ResAllPerformerTotalHp_default_instance_;
class ResBossOwner;
class ResBossOwnerDefaultTypeInternal;
PROTOBUF_API extern ResBossOwnerDefaultTypeInternal _ResBossOwner_default_instance_;
class ResBufferEnterView;
class ResBufferEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResBufferEnterViewDefaultTypeInternal _ResBufferEnterView_default_instance_;
class ResCartMove;
class ResCartMoveDefaultTypeInternal;
PROTOBUF_API extern ResCartMoveDefaultTypeInternal _ResCartMove_default_instance_;
class ResChangePlayer;
class ResChangePlayerDefaultTypeInternal;
PROTOBUF_API extern ResChangePlayerDefaultTypeInternal _ResChangePlayer_default_instance_;
class ResChangePos;
class ResChangePosDefaultTypeInternal;
PROTOBUF_API extern ResChangePosDefaultTypeInternal _ResChangePos_default_instance_;
class ResCollectEnterView;
class ResCollectEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResCollectEnterViewDefaultTypeInternal _ResCollectEnterView_default_instance_;
class ResEventEnterView;
class ResEventEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResEventEnterViewDefaultTypeInternal _ResEventEnterView_default_instance_;
class ResGatherState;
class ResGatherStateDefaultTypeInternal;
PROTOBUF_API extern ResGatherStateDefaultTypeInternal _ResGatherState_default_instance_;
class ResHeroEnterView;
class ResHeroEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResHeroEnterViewDefaultTypeInternal _ResHeroEnterView_default_instance_;
class ResItemEnterView;
class ResItemEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResItemEnterViewDefaultTypeInternal _ResItemEnterView_default_instance_;
class ResMapObjectExitView;
class ResMapObjectExitViewDefaultTypeInternal;
PROTOBUF_API extern ResMapObjectExitViewDefaultTypeInternal _ResMapObjectExitView_default_instance_;
class ResMonsterEnterView;
class ResMonsterEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResMonsterEnterViewDefaultTypeInternal _ResMonsterEnterView_default_instance_;
class ResNoticeViewTypeInfo;
class ResNoticeViewTypeInfoDefaultTypeInternal;
PROTOBUF_API extern ResNoticeViewTypeInfoDefaultTypeInternal _ResNoticeViewTypeInfo_default_instance_;
class ResNpcEnterView;
class ResNpcEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResNpcEnterViewDefaultTypeInternal _ResNpcEnterView_default_instance_;
class ResObjectDeadTime;
class ResObjectDeadTimeDefaultTypeInternal;
PROTOBUF_API extern ResObjectDeadTimeDefaultTypeInternal _ResObjectDeadTime_default_instance_;
class ResObjectMove;
class ResObjectMoveDefaultTypeInternal;
PROTOBUF_API extern ResObjectMoveDefaultTypeInternal _ResObjectMove_default_instance_;
class ResPetEnterView;
class ResPetEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResPetEnterViewDefaultTypeInternal _ResPetEnterView_default_instance_;
class ResPlayerChangeMap;
class ResPlayerChangeMapDefaultTypeInternal;
PROTOBUF_API extern ResPlayerChangeMapDefaultTypeInternal _ResPlayerChangeMap_default_instance_;
class ResPlayerEnterMap;
class ResPlayerEnterMapDefaultTypeInternal;
PROTOBUF_API extern ResPlayerEnterMapDefaultTypeInternal _ResPlayerEnterMap_default_instance_;
class ResPlayerEnterView;
class ResPlayerEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResPlayerEnterViewDefaultTypeInternal _ResPlayerEnterView_default_instance_;
class ResPlayerFashionChange;
class ResPlayerFashionChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerFashionChangeDefaultTypeInternal _ResPlayerFashionChange_default_instance_;
class ResPlayerJunxianChange;
class ResPlayerJunxianChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerJunxianChangeDefaultTypeInternal _ResPlayerJunxianChange_default_instance_;
class ResPlayerLegendChange;
class ResPlayerLegendChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerLegendChangeDefaultTypeInternal _ResPlayerLegendChange_default_instance_;
class ResPlayerReliveInfo;
class ResPlayerReliveInfoDefaultTypeInternal;
PROTOBUF_API extern ResPlayerReliveInfoDefaultTypeInternal _ResPlayerReliveInfo_default_instance_;
class ResPlayerSzSuitChange;
class ResPlayerSzSuitChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerSzSuitChangeDefaultTypeInternal _ResPlayerSzSuitChange_default_instance_;
class ResPlayerUnionChange;
class ResPlayerUnionChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerUnionChangeDefaultTypeInternal _ResPlayerUnionChange_default_instance_;
class ResPlayerWingChange;
class ResPlayerWingChangeDefaultTypeInternal;
PROTOBUF_API extern ResPlayerWingChangeDefaultTypeInternal _ResPlayerWingChange_default_instance_;
class ResPressureValue;
class ResPressureValueDefaultTypeInternal;
PROTOBUF_API extern ResPressureValueDefaultTypeInternal _ResPressureValue_default_instance_;
class ResRelive;
class ResReliveDefaultTypeInternal;
PROTOBUF_API extern ResReliveDefaultTypeInternal _ResRelive_default_instance_;
class ResReplacePlayer;
class ResReplacePlayerDefaultTypeInternal;
PROTOBUF_API extern ResReplacePlayerDefaultTypeInternal _ResReplacePlayer_default_instance_;
class ResServantEnterView;
class ResServantEnterViewDefaultTypeInternal;
PROTOBUF_API extern ResServantEnterViewDefaultTypeInternal _ResServantEnterView_default_instance_;
class ResSwitchFightModel;
class ResSwitchFightModelDefaultTypeInternal;
PROTOBUF_API extern ResSwitchFightModelDefaultTypeInternal _ResSwitchFightModel_default_instance_;
class ResTombInfo;
class ResTombInfoDefaultTypeInternal;
PROTOBUF_API extern ResTombInfoDefaultTypeInternal _ResTombInfo_default_instance_;
class ResTryEnterMap;
class ResTryEnterMapDefaultTypeInternal;
PROTOBUF_API extern ResTryEnterMapDefaultTypeInternal _ResTryEnterMap_default_instance_;
class ResUpdateEquip;
class ResUpdateEquipDefaultTypeInternal;
PROTOBUF_API extern ResUpdateEquipDefaultTypeInternal _ResUpdateEquip_default_instance_;
class ResUpdateView;
class ResUpdateViewDefaultTypeInternal;
PROTOBUF_API extern ResUpdateViewDefaultTypeInternal _ResUpdateView_default_instance_;
class RoundBufferInfo;
class RoundBufferInfoDefaultTypeInternal;
PROTOBUF_API extern RoundBufferInfoDefaultTypeInternal _RoundBufferInfo_default_instance_;
class RoundCollectPoint;
class RoundCollectPointDefaultTypeInternal;
PROTOBUF_API extern RoundCollectPointDefaultTypeInternal _RoundCollectPoint_default_instance_;
class RoundEventInfo;
class RoundEventInfoDefaultTypeInternal;
PROTOBUF_API extern RoundEventInfoDefaultTypeInternal _RoundEventInfo_default_instance_;
class RoundHeroInfo;
class RoundHeroInfoDefaultTypeInternal;
PROTOBUF_API extern RoundHeroInfoDefaultTypeInternal _RoundHeroInfo_default_instance_;
class RoundItemInfo;
class RoundItemInfoDefaultTypeInternal;
PROTOBUF_API extern RoundItemInfoDefaultTypeInternal _RoundItemInfo_default_instance_;
class RoundMonsterInfo;
class RoundMonsterInfoDefaultTypeInternal;
PROTOBUF_API extern RoundMonsterInfoDefaultTypeInternal _RoundMonsterInfo_default_instance_;
class RoundNpcInfo;
class RoundNpcInfoDefaultTypeInternal;
PROTOBUF_API extern RoundNpcInfoDefaultTypeInternal _RoundNpcInfo_default_instance_;
class RoundPetInfo;
class RoundPetInfoDefaultTypeInternal;
PROTOBUF_API extern RoundPetInfoDefaultTypeInternal _RoundPetInfo_default_instance_;
class RoundPlayerInfo;
class RoundPlayerInfoDefaultTypeInternal;
PROTOBUF_API extern RoundPlayerInfoDefaultTypeInternal _RoundPlayerInfo_default_instance_;
class RoundServantInfo;
class RoundServantInfoDefaultTypeInternal;
PROTOBUF_API extern RoundServantInfoDefaultTypeInternal _RoundServantInfo_default_instance_;
class SwitchFightModelRequest;
class SwitchFightModelRequestDefaultTypeInternal;
PROTOBUF_API extern SwitchFightModelRequestDefaultTypeInternal _SwitchFightModelRequest_default_instance_;
class TryEnterMapRequest;
class TryEnterMapRequestDefaultTypeInternal;
PROTOBUF_API extern TryEnterMapRequestDefaultTypeInternal _TryEnterMapRequest_default_instance_;
}  // namespace mapV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_API ::mapV2::BossOwnerRequest* Arena::CreateMaybeMessage<::mapV2::BossOwnerRequest>(Arena*);
template<> PROTOBUF_API ::mapV2::BossReliveTime* Arena::CreateMaybeMessage<::mapV2::BossReliveTime>(Arena*);
template<> PROTOBUF_API ::mapV2::GatherOperatorRequest* Arena::CreateMaybeMessage<::mapV2::GatherOperatorRequest>(Arena*);
template<> PROTOBUF_API ::mapV2::MapBoss* Arena::CreateMaybeMessage<::mapV2::MapBoss>(Arena*);
template<> PROTOBUF_API ::mapV2::MonsterTomb* Arena::CreateMaybeMessage<::mapV2::MonsterTomb>(Arena*);
template<> PROTOBUF_API ::mapV2::NoticeBean* Arena::CreateMaybeMessage<::mapV2::NoticeBean>(Arena*);
template<> PROTOBUF_API ::mapV2::PerformerEquipBean* Arena::CreateMaybeMessage<::mapV2::PerformerEquipBean>(Arena*);
template<> PROTOBUF_API ::mapV2::PerformerFashionBean* Arena::CreateMaybeMessage<::mapV2::PerformerFashionBean>(Arena*);
template<> PROTOBUF_API ::mapV2::PickUpMapItemRequest* Arena::CreateMaybeMessage<::mapV2::PickUpMapItemRequest>(Arena*);
template<> PROTOBUF_API ::mapV2::PlayerReliveRequest* Arena::CreateMaybeMessage<::mapV2::PlayerReliveRequest>(Arena*);
template<> PROTOBUF_API ::mapV2::ReqClickEvent* Arena::CreateMaybeMessage<::mapV2::ReqClickEvent>(Arena*);
template<> PROTOBUF_API ::mapV2::ResAllPerformerTotalHp* Arena::CreateMaybeMessage<::mapV2::ResAllPerformerTotalHp>(Arena*);
template<> PROTOBUF_API ::mapV2::ResBossOwner* Arena::CreateMaybeMessage<::mapV2::ResBossOwner>(Arena*);
template<> PROTOBUF_API ::mapV2::ResBufferEnterView* Arena::CreateMaybeMessage<::mapV2::ResBufferEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResCartMove* Arena::CreateMaybeMessage<::mapV2::ResCartMove>(Arena*);
template<> PROTOBUF_API ::mapV2::ResChangePlayer* Arena::CreateMaybeMessage<::mapV2::ResChangePlayer>(Arena*);
template<> PROTOBUF_API ::mapV2::ResChangePos* Arena::CreateMaybeMessage<::mapV2::ResChangePos>(Arena*);
template<> PROTOBUF_API ::mapV2::ResCollectEnterView* Arena::CreateMaybeMessage<::mapV2::ResCollectEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResEventEnterView* Arena::CreateMaybeMessage<::mapV2::ResEventEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResGatherState* Arena::CreateMaybeMessage<::mapV2::ResGatherState>(Arena*);
template<> PROTOBUF_API ::mapV2::ResHeroEnterView* Arena::CreateMaybeMessage<::mapV2::ResHeroEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResItemEnterView* Arena::CreateMaybeMessage<::mapV2::ResItemEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResMapObjectExitView* Arena::CreateMaybeMessage<::mapV2::ResMapObjectExitView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResMonsterEnterView* Arena::CreateMaybeMessage<::mapV2::ResMonsterEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResNoticeViewTypeInfo* Arena::CreateMaybeMessage<::mapV2::ResNoticeViewTypeInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::ResNpcEnterView* Arena::CreateMaybeMessage<::mapV2::ResNpcEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResObjectDeadTime* Arena::CreateMaybeMessage<::mapV2::ResObjectDeadTime>(Arena*);
template<> PROTOBUF_API ::mapV2::ResObjectMove* Arena::CreateMaybeMessage<::mapV2::ResObjectMove>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPetEnterView* Arena::CreateMaybeMessage<::mapV2::ResPetEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerChangeMap* Arena::CreateMaybeMessage<::mapV2::ResPlayerChangeMap>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerEnterMap* Arena::CreateMaybeMessage<::mapV2::ResPlayerEnterMap>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerEnterView* Arena::CreateMaybeMessage<::mapV2::ResPlayerEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerFashionChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerFashionChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerJunxianChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerJunxianChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerLegendChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerLegendChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerReliveInfo* Arena::CreateMaybeMessage<::mapV2::ResPlayerReliveInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerSzSuitChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerSzSuitChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerUnionChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerUnionChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPlayerWingChange* Arena::CreateMaybeMessage<::mapV2::ResPlayerWingChange>(Arena*);
template<> PROTOBUF_API ::mapV2::ResPressureValue* Arena::CreateMaybeMessage<::mapV2::ResPressureValue>(Arena*);
template<> PROTOBUF_API ::mapV2::ResRelive* Arena::CreateMaybeMessage<::mapV2::ResRelive>(Arena*);
template<> PROTOBUF_API ::mapV2::ResReplacePlayer* Arena::CreateMaybeMessage<::mapV2::ResReplacePlayer>(Arena*);
template<> PROTOBUF_API ::mapV2::ResServantEnterView* Arena::CreateMaybeMessage<::mapV2::ResServantEnterView>(Arena*);
template<> PROTOBUF_API ::mapV2::ResSwitchFightModel* Arena::CreateMaybeMessage<::mapV2::ResSwitchFightModel>(Arena*);
template<> PROTOBUF_API ::mapV2::ResTombInfo* Arena::CreateMaybeMessage<::mapV2::ResTombInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::ResTryEnterMap* Arena::CreateMaybeMessage<::mapV2::ResTryEnterMap>(Arena*);
template<> PROTOBUF_API ::mapV2::ResUpdateEquip* Arena::CreateMaybeMessage<::mapV2::ResUpdateEquip>(Arena*);
template<> PROTOBUF_API ::mapV2::ResUpdateView* Arena::CreateMaybeMessage<::mapV2::ResUpdateView>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundBufferInfo* Arena::CreateMaybeMessage<::mapV2::RoundBufferInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundCollectPoint* Arena::CreateMaybeMessage<::mapV2::RoundCollectPoint>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundEventInfo* Arena::CreateMaybeMessage<::mapV2::RoundEventInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundHeroInfo* Arena::CreateMaybeMessage<::mapV2::RoundHeroInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundItemInfo* Arena::CreateMaybeMessage<::mapV2::RoundItemInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundMonsterInfo* Arena::CreateMaybeMessage<::mapV2::RoundMonsterInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundNpcInfo* Arena::CreateMaybeMessage<::mapV2::RoundNpcInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundPetInfo* Arena::CreateMaybeMessage<::mapV2::RoundPetInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundPlayerInfo* Arena::CreateMaybeMessage<::mapV2::RoundPlayerInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::RoundServantInfo* Arena::CreateMaybeMessage<::mapV2::RoundServantInfo>(Arena*);
template<> PROTOBUF_API ::mapV2::SwitchFightModelRequest* Arena::CreateMaybeMessage<::mapV2::SwitchFightModelRequest>(Arena*);
template<> PROTOBUF_API ::mapV2::TryEnterMapRequest* Arena::CreateMaybeMessage<::mapV2::TryEnterMapRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapV2 {

// ===================================================================

class PROTOBUF_API PerformerEquipBean :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.PerformerEquipBean) */ {
 public:
  PerformerEquipBean();
  virtual ~PerformerEquipBean();

  PerformerEquipBean(const PerformerEquipBean& from);
  PerformerEquipBean(PerformerEquipBean&& from) noexcept
    : PerformerEquipBean() {
    *this = ::std::move(from);
  }

  inline PerformerEquipBean& operator=(const PerformerEquipBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformerEquipBean& operator=(PerformerEquipBean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerformerEquipBean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformerEquipBean* internal_default_instance() {
    return reinterpret_cast<const PerformerEquipBean*>(
               &_PerformerEquipBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PerformerEquipBean* other);
  friend void swap(PerformerEquipBean& a, PerformerEquipBean& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerformerEquipBean* New() const final {
    return CreateMaybeMessage<PerformerEquipBean>(nullptr);
  }

  PerformerEquipBean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformerEquipBean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerformerEquipBean& from);
  void MergeFrom(const PerformerEquipBean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformerEquipBean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.PerformerEquipBean";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 equipIndex = 1;
  bool has_equipindex() const;
  void clear_equipindex();
  static const int kEquipIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 equipindex() const;
  void set_equipindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 itemId = 2;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.PerformerEquipBean)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 equipindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 itemid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API PerformerFashionBean :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.PerformerFashionBean) */ {
 public:
  PerformerFashionBean();
  virtual ~PerformerFashionBean();

  PerformerFashionBean(const PerformerFashionBean& from);
  PerformerFashionBean(PerformerFashionBean&& from) noexcept
    : PerformerFashionBean() {
    *this = ::std::move(from);
  }

  inline PerformerFashionBean& operator=(const PerformerFashionBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformerFashionBean& operator=(PerformerFashionBean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerformerFashionBean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformerFashionBean* internal_default_instance() {
    return reinterpret_cast<const PerformerFashionBean*>(
               &_PerformerFashionBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PerformerFashionBean* other);
  friend void swap(PerformerFashionBean& a, PerformerFashionBean& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerformerFashionBean* New() const final {
    return CreateMaybeMessage<PerformerFashionBean>(nullptr);
  }

  PerformerFashionBean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformerFashionBean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerformerFashionBean& from);
  void MergeFrom(const PerformerFashionBean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformerFashionBean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.PerformerFashionBean";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fashionType = 1;
  bool has_fashiontype() const;
  void clear_fashiontype();
  static const int kFashionTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 fashiontype() const;
  void set_fashiontype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fashionId = 2;
  bool has_fashionid() const;
  void clear_fashionid();
  static const int kFashionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 fashionid() const;
  void set_fashionid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.PerformerFashionBean)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fashiontype_;
  ::PROTOBUF_NAMESPACE_ID::int32 fashionid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundItemInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundItemInfo) */ {
 public:
  RoundItemInfo();
  virtual ~RoundItemInfo();

  RoundItemInfo(const RoundItemInfo& from);
  RoundItemInfo(RoundItemInfo&& from) noexcept
    : RoundItemInfo() {
    *this = ::std::move(from);
  }

  inline RoundItemInfo& operator=(const RoundItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundItemInfo& operator=(RoundItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundItemInfo* internal_default_instance() {
    return reinterpret_cast<const RoundItemInfo*>(
               &_RoundItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RoundItemInfo* other);
  friend void swap(RoundItemInfo& a, RoundItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundItemInfo* New() const final {
    return CreateMaybeMessage<RoundItemInfo>(nullptr);
  }

  RoundItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundItemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundItemInfo& from);
  void MergeFrom(const RoundItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundItemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundItemInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 itemId = 2;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 ownerId = 4;
  bool has_ownerid() const;
  void clear_ownerid();
  static const int kOwnerIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid() const;
  void set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 5;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  float x() const;
  void set_x(float value);

  // optional float y = 6;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 6;
  float y() const;
  void set_y(float value);

  // optional int64 dropTime = 8;
  bool has_droptime() const;
  void clear_droptime();
  static const int kDropTimeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 droptime() const;
  void set_droptime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ownerTeamId = 9;
  bool has_ownerteamid() const;
  void clear_ownerteamid();
  static const int kOwnerTeamIdFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerteamid() const;
  void set_ownerteamid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 dropFrom = 10;
  bool has_dropfrom() const;
  void clear_dropfrom();
  static const int kDropFromFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 dropfrom() const;
  void set_dropfrom(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 totalTime = 11;
  bool has_totaltime() const;
  void clear_totaltime();
  static const int kTotalTimeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 totaltime() const;
  void set_totaltime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float z = 7;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 7;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundItemInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 itemid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int64 droptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerteamid_;
  ::PROTOBUF_NAMESPACE_ID::int64 dropfrom_;
  ::PROTOBUF_NAMESPACE_ID::int64 totaltime_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API NoticeBean :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.NoticeBean) */ {
 public:
  NoticeBean();
  virtual ~NoticeBean();

  NoticeBean(const NoticeBean& from);
  NoticeBean(NoticeBean&& from) noexcept
    : NoticeBean() {
    *this = ::std::move(from);
  }

  inline NoticeBean& operator=(const NoticeBean& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeBean& operator=(NoticeBean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoticeBean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoticeBean* internal_default_instance() {
    return reinterpret_cast<const NoticeBean*>(
               &_NoticeBean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NoticeBean* other);
  friend void swap(NoticeBean& a, NoticeBean& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoticeBean* New() const final {
    return CreateMaybeMessage<NoticeBean>(nullptr);
  }

  NoticeBean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoticeBean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoticeBean& from);
  void MergeFrom(const NoticeBean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoticeBean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.NoticeBean";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 updateValue = 2;
  bool has_updatevalue() const;
  void clear_updatevalue();
  static const int kUpdateValueFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 updatevalue() const;
  void set_updatevalue(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 updateType = 1;
  bool has_updatetype() const;
  void clear_updatetype();
  static const int kUpdateTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 updatetype() const;
  void set_updatetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.NoticeBean)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatetype_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundEventInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundEventInfo) */ {
 public:
  RoundEventInfo();
  virtual ~RoundEventInfo();

  RoundEventInfo(const RoundEventInfo& from);
  RoundEventInfo(RoundEventInfo&& from) noexcept
    : RoundEventInfo() {
    *this = ::std::move(from);
  }

  inline RoundEventInfo& operator=(const RoundEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundEventInfo& operator=(RoundEventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundEventInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundEventInfo* internal_default_instance() {
    return reinterpret_cast<const RoundEventInfo*>(
               &_RoundEventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RoundEventInfo* other);
  friend void swap(RoundEventInfo& a, RoundEventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundEventInfo* New() const final {
    return CreateMaybeMessage<RoundEventInfo>(nullptr);
  }

  RoundEventInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundEventInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundEventInfo& from);
  void MergeFrom(const RoundEventInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundEventInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundEventInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 eventId = 2;
  bool has_eventid() const;
  void clear_eventid();
  static const int kEventIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundEventInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 eventid_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundBufferInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundBufferInfo) */ {
 public:
  RoundBufferInfo();
  virtual ~RoundBufferInfo();

  RoundBufferInfo(const RoundBufferInfo& from);
  RoundBufferInfo(RoundBufferInfo&& from) noexcept
    : RoundBufferInfo() {
    *this = ::std::move(from);
  }

  inline RoundBufferInfo& operator=(const RoundBufferInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundBufferInfo& operator=(RoundBufferInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundBufferInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundBufferInfo* internal_default_instance() {
    return reinterpret_cast<const RoundBufferInfo*>(
               &_RoundBufferInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RoundBufferInfo* other);
  friend void swap(RoundBufferInfo& a, RoundBufferInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundBufferInfo* New() const final {
    return CreateMaybeMessage<RoundBufferInfo>(nullptr);
  }

  RoundBufferInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundBufferInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundBufferInfo& from);
  void MergeFrom(const RoundBufferInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundBufferInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundBufferInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 bufferId = 2;
  bool has_bufferid() const;
  void clear_bufferid();
  static const int kBufferIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferid() const;
  void set_bufferid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // optional bool isCenterPoint = 6;
  bool has_iscenterpoint() const;
  void clear_iscenterpoint();
  static const int kIsCenterPointFieldNumber = 6;
  bool iscenterpoint() const;
  void set_iscenterpoint(bool value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundBufferInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferid_;
  float x_;
  float y_;
  float z_;
  bool iscenterpoint_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundPlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundPlayerInfo) */ {
 public:
  RoundPlayerInfo();
  virtual ~RoundPlayerInfo();

  RoundPlayerInfo(const RoundPlayerInfo& from);
  RoundPlayerInfo(RoundPlayerInfo&& from) noexcept
    : RoundPlayerInfo() {
    *this = ::std::move(from);
  }

  inline RoundPlayerInfo& operator=(const RoundPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundPlayerInfo& operator=(RoundPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const RoundPlayerInfo*>(
               &_RoundPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RoundPlayerInfo* other);
  friend void swap(RoundPlayerInfo& a, RoundPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundPlayerInfo* New() const final {
    return CreateMaybeMessage<RoundPlayerInfo>(nullptr);
  }

  RoundPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundPlayerInfo& from);
  void MergeFrom(const RoundPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundPlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapV2.PerformerEquipBean equipBean = 16;
  int equipbean_size() const;
  void clear_equipbean();
  static const int kEquipBeanFieldNumber = 16;
  ::mapV2::PerformerEquipBean* mutable_equipbean(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::PerformerEquipBean >*
      mutable_equipbean();
  const ::mapV2::PerformerEquipBean& equipbean(int index) const;
  ::mapV2::PerformerEquipBean* add_equipbean();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::PerformerEquipBean >&
      equipbean() const;

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string unionName = 21;
  bool has_unionname() const;
  void clear_unionname();
  static const int kUnionNameFieldNumber = 21;
  const std::string& unionname() const;
  void set_unionname(const std::string& value);
  void set_unionname(std::string&& value);
  void set_unionname(const char* value);
  void set_unionname(const char* value, size_t size);
  std::string* mutable_unionname();
  std::string* release_unionname();
  void set_allocated_unionname(std::string* unionname);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // optional float dir = 5;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 5;
  float dir() const;
  void set_dir(float value);

  // optional int32 level = 7;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 career = 8;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 hp = 10;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sex = 9;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 inner = 12;
  bool has_inner() const;
  void clear_inner();
  static const int kInnerFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 inner() const;
  void set_inner(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 maxHp = 11;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 teamId = 14;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 innerMax = 13;
  bool has_innermax() const;
  void clear_innermax();
  static const int kInnerMaxFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 innermax() const;
  void set_innermax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 master = 15;
  bool has_master() const;
  void clear_master();
  static const int kMasterFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 master() const;
  void set_master(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 rid = 19;
  bool has_rid() const;
  void clear_rid();
  static const int kRidFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int64 rid() const;
  void set_rid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 unionId = 20;
  bool has_unionid() const;
  void clear_unionid();
  static const int kUnionIdFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid() const;
  void set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 wing = 18;
  bool has_wing() const;
  void clear_wing();
  static const int kWingFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 wing() const;
  void set_wing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 titleId = 22;
  bool has_titleid() const;
  void clear_titleid();
  static const int kTitleIdFieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::int32 titleid() const;
  void set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 nbValue = 23;
  bool has_nbvalue() const;
  void clear_nbvalue();
  static const int kNbValueFieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::int32 nbvalue() const;
  void set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 power = 24;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 mp = 25;
  bool has_mp() const;
  void clear_mp();
  static const int kMpFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int64 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 maxMp = 26;
  bool has_maxmp() const;
  void clear_maxmp();
  static const int kMaxMpFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int64 maxmp() const;
  void set_maxmp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 nbValueMax = 27;
  bool has_nbvaluemax() const;
  void clear_nbvaluemax();
  static const int kNbValueMaxFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int32 nbvaluemax() const;
  void set_nbvaluemax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 boxTime = 28;
  bool has_boxtime() const;
  void clear_boxtime();
  static const int kBoxTimeFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 boxtime() const;
  void set_boxtime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tokenCount = 29;
  bool has_tokencount() const;
  void clear_tokencount();
  static const int kTokenCountFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 tokencount() const;
  void set_tokencount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tokenCountId = 30;
  bool has_tokencountid() const;
  void clear_tokencountid();
  static const int kTokenCountIdFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::int32 tokencountid() const;
  void set_tokencountid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 thisJunXianId = 32;
  bool has_thisjunxianid() const;
  void clear_thisjunxianid();
  static const int kThisJunXianIdFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::int32 thisjunxianid() const;
  void set_thisjunxianid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundPlayerInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::PerformerEquipBean > equipbean_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionname_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float x_;
  float y_;
  float z_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 inner_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int64 teamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 innermax_;
  ::PROTOBUF_NAMESPACE_ID::int32 master_;
  ::PROTOBUF_NAMESPACE_ID::int64 rid_;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wing_;
  ::PROTOBUF_NAMESPACE_ID::int32 titleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  ::PROTOBUF_NAMESPACE_ID::int64 mp_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxmp_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbvaluemax_;
  ::PROTOBUF_NAMESPACE_ID::int32 boxtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 tokencount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tokencountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 thisjunxianid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundMonsterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundMonsterInfo) */ {
 public:
  RoundMonsterInfo();
  virtual ~RoundMonsterInfo();

  RoundMonsterInfo(const RoundMonsterInfo& from);
  RoundMonsterInfo(RoundMonsterInfo&& from) noexcept
    : RoundMonsterInfo() {
    *this = ::std::move(from);
  }

  inline RoundMonsterInfo& operator=(const RoundMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundMonsterInfo& operator=(RoundMonsterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundMonsterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const RoundMonsterInfo*>(
               &_RoundMonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RoundMonsterInfo* other);
  friend void swap(RoundMonsterInfo& a, RoundMonsterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundMonsterInfo* New() const final {
    return CreateMaybeMessage<RoundMonsterInfo>(nullptr);
  }

  RoundMonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundMonsterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundMonsterInfo& from);
  void MergeFrom(const RoundMonsterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundMonsterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundMonsterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 9;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 9;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mid = 2;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // optional int64 hp = 7;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 maxHp = 8;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float dir = 6;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 6;
  float dir() const;
  void set_dir(float value);

  // optional int32 level = 10;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 endAnimation = 12;
  bool has_endanimation() const;
  void clear_endanimation();
  static const int kEndAnimationFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 endanimation() const;
  void set_endanimation(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 deathTime = 13;
  bool has_deathtime() const;
  void clear_deathtime();
  static const int kDeathTimeFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 deathtime() const;
  void set_deathtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 killId = 14;
  bool has_killid() const;
  void clear_killid();
  static const int kKillIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 killid() const;
  void set_killid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundMonsterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int64 endanimation_;
  ::PROTOBUF_NAMESPACE_ID::int64 deathtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 killid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundNpcInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundNpcInfo) */ {
 public:
  RoundNpcInfo();
  virtual ~RoundNpcInfo();

  RoundNpcInfo(const RoundNpcInfo& from);
  RoundNpcInfo(RoundNpcInfo&& from) noexcept
    : RoundNpcInfo() {
    *this = ::std::move(from);
  }

  inline RoundNpcInfo& operator=(const RoundNpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundNpcInfo& operator=(RoundNpcInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundNpcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundNpcInfo* internal_default_instance() {
    return reinterpret_cast<const RoundNpcInfo*>(
               &_RoundNpcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoundNpcInfo* other);
  friend void swap(RoundNpcInfo& a, RoundNpcInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundNpcInfo* New() const final {
    return CreateMaybeMessage<RoundNpcInfo>(nullptr);
  }

  RoundNpcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundNpcInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundNpcInfo& from);
  void MergeFrom(const RoundNpcInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundNpcInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundNpcInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 nid = 2;
  bool has_nid() const;
  void clear_nid();
  static const int kNidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mapNpcId = 3;
  bool has_mapnpcid() const;
  void clear_mapnpcid();
  static const int kMapNpcIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mapnpcid() const;
  void set_mapnpcid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // optional float dir = 7;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 7;
  float dir() const;
  void set_dir(float value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundNpcInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapnpcid_;
  float x_;
  float y_;
  float z_;
  float dir_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundPetInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundPetInfo) */ {
 public:
  RoundPetInfo();
  virtual ~RoundPetInfo();

  RoundPetInfo(const RoundPetInfo& from);
  RoundPetInfo(RoundPetInfo&& from) noexcept
    : RoundPetInfo() {
    *this = ::std::move(from);
  }

  inline RoundPetInfo& operator=(const RoundPetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundPetInfo& operator=(RoundPetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundPetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundPetInfo* internal_default_instance() {
    return reinterpret_cast<const RoundPetInfo*>(
               &_RoundPetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RoundPetInfo* other);
  friend void swap(RoundPetInfo& a, RoundPetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundPetInfo* New() const final {
    return CreateMaybeMessage<RoundPetInfo>(nullptr);
  }

  RoundPetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundPetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundPetInfo& from);
  void MergeFrom(const RoundPetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundPetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundPetInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 masterId = 2;
  bool has_masterid() const;
  void clear_masterid();
  static const int kMasterIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid() const;
  void set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mid = 4;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 5;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  float x() const;
  void set_x(float value);

  // optional float y = 6;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 6;
  float y() const;
  void set_y(float value);

  // optional float z = 7;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 7;
  float z() const;
  void set_z(float value);

  // optional int64 hp = 9;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 maxHp = 10;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float dir = 8;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 8;
  float dir() const;
  void set_dir(float value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundPetInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  float dir_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundHeroInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundHeroInfo) */ {
 public:
  RoundHeroInfo();
  virtual ~RoundHeroInfo();

  RoundHeroInfo(const RoundHeroInfo& from);
  RoundHeroInfo(RoundHeroInfo&& from) noexcept
    : RoundHeroInfo() {
    *this = ::std::move(from);
  }

  inline RoundHeroInfo& operator=(const RoundHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundHeroInfo& operator=(RoundHeroInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundHeroInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundHeroInfo* internal_default_instance() {
    return reinterpret_cast<const RoundHeroInfo*>(
               &_RoundHeroInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RoundHeroInfo* other);
  friend void swap(RoundHeroInfo& a, RoundHeroInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundHeroInfo* New() const final {
    return CreateMaybeMessage<RoundHeroInfo>(nullptr);
  }

  RoundHeroInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundHeroInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundHeroInfo& from);
  void MergeFrom(const RoundHeroInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundHeroInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundHeroInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 masterId = 2;
  bool has_masterid() const;
  void clear_masterid();
  static const int kMasterIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid() const;
  void set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 career = 4;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mid = 6;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 7;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 7;
  float x() const;
  void set_x(float value);

  // optional float y = 8;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 8;
  float y() const;
  void set_y(float value);

  // optional float z = 9;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 9;
  float z() const;
  void set_z(float value);

  // optional int64 hp = 11;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float dir = 10;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 10;
  float dir() const;
  void set_dir(float value);

  // optional int32 inner = 13;
  bool has_inner() const;
  void clear_inner();
  static const int kInnerFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 inner() const;
  void set_inner(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 maxHp = 12;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 innerMax = 14;
  bool has_innermax() const;
  void clear_innermax();
  static const int kInnerMaxFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 innermax() const;
  void set_innermax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 maBiRate = 15;
  bool has_mabirate() const;
  void clear_mabirate();
  static const int kMaBiRateFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 mabirate() const;
  void set_mabirate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundHeroInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 inner_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 innermax_;
  ::PROTOBUF_NAMESPACE_ID::int32 mabirate_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundServantInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundServantInfo) */ {
 public:
  RoundServantInfo();
  virtual ~RoundServantInfo();

  RoundServantInfo(const RoundServantInfo& from);
  RoundServantInfo(RoundServantInfo&& from) noexcept
    : RoundServantInfo() {
    *this = ::std::move(from);
  }

  inline RoundServantInfo& operator=(const RoundServantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundServantInfo& operator=(RoundServantInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundServantInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundServantInfo* internal_default_instance() {
    return reinterpret_cast<const RoundServantInfo*>(
               &_RoundServantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RoundServantInfo* other);
  friend void swap(RoundServantInfo& a, RoundServantInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundServantInfo* New() const final {
    return CreateMaybeMessage<RoundServantInfo>(nullptr);
  }

  RoundServantInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundServantInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundServantInfo& from);
  void MergeFrom(const RoundServantInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundServantInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundServantInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 masterId = 2;
  bool has_masterid() const;
  void clear_masterid();
  static const int kMasterIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid() const;
  void set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 career = 4;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mid = 6;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 7;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 7;
  float x() const;
  void set_x(float value);

  // optional float y = 8;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 8;
  float y() const;
  void set_y(float value);

  // optional float z = 9;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 9;
  float z() const;
  void set_z(float value);

  // optional int64 hp = 11;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float dir = 10;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 10;
  float dir() const;
  void set_dir(float value);

  // optional int32 level = 13;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 maxHp = 12;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundServantInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 masterid_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API RoundCollectPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.RoundCollectPoint) */ {
 public:
  RoundCollectPoint();
  virtual ~RoundCollectPoint();

  RoundCollectPoint(const RoundCollectPoint& from);
  RoundCollectPoint(RoundCollectPoint&& from) noexcept
    : RoundCollectPoint() {
    *this = ::std::move(from);
  }

  inline RoundCollectPoint& operator=(const RoundCollectPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundCollectPoint& operator=(RoundCollectPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoundCollectPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoundCollectPoint* internal_default_instance() {
    return reinterpret_cast<const RoundCollectPoint*>(
               &_RoundCollectPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RoundCollectPoint* other);
  friend void swap(RoundCollectPoint& a, RoundCollectPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoundCollectPoint* New() const final {
    return CreateMaybeMessage<RoundCollectPoint>(nullptr);
  }

  RoundCollectPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoundCollectPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoundCollectPoint& from);
  void MergeFrom(const RoundCollectPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundCollectPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.RoundCollectPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // optional int32 configId = 6;
  bool has_configid() const;
  void clear_configid();
  static const int kConfigIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 configid() const;
  void set_configid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.RoundCollectPoint)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 configid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API MapBoss :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.MapBoss) */ {
 public:
  MapBoss();
  virtual ~MapBoss();

  MapBoss(const MapBoss& from);
  MapBoss(MapBoss&& from) noexcept
    : MapBoss() {
    *this = ::std::move(from);
  }

  inline MapBoss& operator=(const MapBoss& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBoss& operator=(MapBoss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBoss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBoss* internal_default_instance() {
    return reinterpret_cast<const MapBoss*>(
               &_MapBoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(MapBoss* other);
  friend void swap(MapBoss& a, MapBoss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapBoss* New() const final {
    return CreateMaybeMessage<MapBoss>(nullptr);
  }

  MapBoss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBoss>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBoss& from);
  void MergeFrom(const MapBoss& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBoss* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.MapBoss";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 bossId = 1;
  bool has_bossid() const;
  void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid() const;
  void set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bossHp = 3;
  bool has_bosshp() const;
  void clear_bosshp();
  static const int kBossHpFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 bosshp() const;
  void set_bosshp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mid = 2;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.MapBoss)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid_;
  ::PROTOBUF_NAMESPACE_ID::int64 bosshp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API MonsterTomb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.MonsterTomb) */ {
 public:
  MonsterTomb();
  virtual ~MonsterTomb();

  MonsterTomb(const MonsterTomb& from);
  MonsterTomb(MonsterTomb&& from) noexcept
    : MonsterTomb() {
    *this = ::std::move(from);
  }

  inline MonsterTomb& operator=(const MonsterTomb& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterTomb& operator=(MonsterTomb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonsterTomb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonsterTomb* internal_default_instance() {
    return reinterpret_cast<const MonsterTomb*>(
               &_MonsterTomb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MonsterTomb* other);
  friend void swap(MonsterTomb& a, MonsterTomb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonsterTomb* New() const final {
    return CreateMaybeMessage<MonsterTomb>(nullptr);
  }

  MonsterTomb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterTomb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterTomb& from);
  void MergeFrom(const MonsterTomb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterTomb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.MonsterTomb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mid = 2;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // optional int32 nextReliveTime = 6;
  bool has_nextrelivetime() const;
  void clear_nextrelivetime();
  static const int kNextReliveTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 nextrelivetime() const;
  void set_nextrelivetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.MonsterTomb)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextrelivetime_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResUpdateView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResUpdateView) */ {
 public:
  ResUpdateView();
  virtual ~ResUpdateView();

  ResUpdateView(const ResUpdateView& from);
  ResUpdateView(ResUpdateView&& from) noexcept
    : ResUpdateView() {
    *this = ::std::move(from);
  }

  inline ResUpdateView& operator=(const ResUpdateView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResUpdateView& operator=(ResUpdateView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResUpdateView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResUpdateView* internal_default_instance() {
    return reinterpret_cast<const ResUpdateView*>(
               &_ResUpdateView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ResUpdateView* other);
  friend void swap(ResUpdateView& a, ResUpdateView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResUpdateView* New() const final {
    return CreateMaybeMessage<ResUpdateView>(nullptr);
  }

  ResUpdateView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResUpdateView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResUpdateView& from);
  void MergeFrom(const ResUpdateView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResUpdateView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResUpdateView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
  int addplayers_size() const;
  void clear_addplayers();
  static const int kAddPlayersFieldNumber = 1;
  ::mapV2::RoundPlayerInfo* mutable_addplayers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPlayerInfo >*
      mutable_addplayers();
  const ::mapV2::RoundPlayerInfo& addplayers(int index) const;
  ::mapV2::RoundPlayerInfo* add_addplayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPlayerInfo >&
      addplayers() const;

  // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
  int addmonsters_size() const;
  void clear_addmonsters();
  static const int kAddMonstersFieldNumber = 2;
  ::mapV2::RoundMonsterInfo* mutable_addmonsters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundMonsterInfo >*
      mutable_addmonsters();
  const ::mapV2::RoundMonsterInfo& addmonsters(int index) const;
  ::mapV2::RoundMonsterInfo* add_addmonsters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundMonsterInfo >&
      addmonsters() const;

  // repeated .mapV2.RoundNpcInfo addNpcs = 3;
  int addnpcs_size() const;
  void clear_addnpcs();
  static const int kAddNpcsFieldNumber = 3;
  ::mapV2::RoundNpcInfo* mutable_addnpcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundNpcInfo >*
      mutable_addnpcs();
  const ::mapV2::RoundNpcInfo& addnpcs(int index) const;
  ::mapV2::RoundNpcInfo* add_addnpcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundNpcInfo >&
      addnpcs() const;

  // repeated .mapV2.RoundBufferInfo addBuffers = 4;
  int addbuffers_size() const;
  void clear_addbuffers();
  static const int kAddBuffersFieldNumber = 4;
  ::mapV2::RoundBufferInfo* mutable_addbuffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundBufferInfo >*
      mutable_addbuffers();
  const ::mapV2::RoundBufferInfo& addbuffers(int index) const;
  ::mapV2::RoundBufferInfo* add_addbuffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundBufferInfo >&
      addbuffers() const;

  // repeated .mapV2.RoundPetInfo addPets = 5;
  int addpets_size() const;
  void clear_addpets();
  static const int kAddPetsFieldNumber = 5;
  ::mapV2::RoundPetInfo* mutable_addpets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPetInfo >*
      mutable_addpets();
  const ::mapV2::RoundPetInfo& addpets(int index) const;
  ::mapV2::RoundPetInfo* add_addpets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPetInfo >&
      addpets() const;

  // repeated .mapV2.RoundHeroInfo addHeros = 6;
  int addheros_size() const;
  void clear_addheros();
  static const int kAddHerosFieldNumber = 6;
  ::mapV2::RoundHeroInfo* mutable_addheros(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundHeroInfo >*
      mutable_addheros();
  const ::mapV2::RoundHeroInfo& addheros(int index) const;
  ::mapV2::RoundHeroInfo* add_addheros();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundHeroInfo >&
      addheros() const;

  // repeated .mapV2.RoundEventInfo addEvents = 7;
  int addevents_size() const;
  void clear_addevents();
  static const int kAddEventsFieldNumber = 7;
  ::mapV2::RoundEventInfo* mutable_addevents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundEventInfo >*
      mutable_addevents();
  const ::mapV2::RoundEventInfo& addevents(int index) const;
  ::mapV2::RoundEventInfo* add_addevents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundEventInfo >&
      addevents() const;

  // repeated .mapV2.RoundItemInfo addItems = 8;
  int additems_size() const;
  void clear_additems();
  static const int kAddItemsFieldNumber = 8;
  ::mapV2::RoundItemInfo* mutable_additems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundItemInfo >*
      mutable_additems();
  const ::mapV2::RoundItemInfo& additems(int index) const;
  ::mapV2::RoundItemInfo* add_additems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundItemInfo >&
      additems() const;

  // repeated int64 exitIdList = 9;
  int exitidlist_size() const;
  void clear_exitidlist();
  static const int kExitIdListFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 exitidlist(int index) const;
  void set_exitidlist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_exitidlist(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      exitidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_exitidlist();

  // repeated .mapV2.RoundServantInfo addServants = 10;
  int addservants_size() const;
  void clear_addservants();
  static const int kAddServantsFieldNumber = 10;
  ::mapV2::RoundServantInfo* mutable_addservants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundServantInfo >*
      mutable_addservants();
  const ::mapV2::RoundServantInfo& addservants(int index) const;
  ::mapV2::RoundServantInfo* add_addservants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundServantInfo >&
      addservants() const;

  // repeated .mapV2.RoundCollectPoint collectPoint = 11;
  int collectpoint_size() const;
  void clear_collectpoint();
  static const int kCollectPointFieldNumber = 11;
  ::mapV2::RoundCollectPoint* mutable_collectpoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundCollectPoint >*
      mutable_collectpoint();
  const ::mapV2::RoundCollectPoint& collectpoint(int index) const;
  ::mapV2::RoundCollectPoint* add_collectpoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundCollectPoint >&
      collectpoint() const;

  // @@protoc_insertion_point(class_scope:mapV2.ResUpdateView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPlayerInfo > addplayers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundMonsterInfo > addmonsters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundNpcInfo > addnpcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundBufferInfo > addbuffers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPetInfo > addpets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundHeroInfo > addheros_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundEventInfo > addevents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundItemInfo > additems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > exitidlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundServantInfo > addservants_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundCollectPoint > collectpoint_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerEnterView) */ {
 public:
  ResPlayerEnterView();
  virtual ~ResPlayerEnterView();

  ResPlayerEnterView(const ResPlayerEnterView& from);
  ResPlayerEnterView(ResPlayerEnterView&& from) noexcept
    : ResPlayerEnterView() {
    *this = ::std::move(from);
  }

  inline ResPlayerEnterView& operator=(const ResPlayerEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerEnterView& operator=(ResPlayerEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerEnterView* internal_default_instance() {
    return reinterpret_cast<const ResPlayerEnterView*>(
               &_ResPlayerEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ResPlayerEnterView* other);
  friend void swap(ResPlayerEnterView& a, ResPlayerEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerEnterView* New() const final {
    return CreateMaybeMessage<ResPlayerEnterView>(nullptr);
  }

  ResPlayerEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerEnterView& from);
  void MergeFrom(const ResPlayerEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundPlayerInfo player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  const ::mapV2::RoundPlayerInfo& player() const;
  ::mapV2::RoundPlayerInfo* release_player();
  ::mapV2::RoundPlayerInfo* mutable_player();
  void set_allocated_player(::mapV2::RoundPlayerInfo* player);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundPlayerInfo* player_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResCollectEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResCollectEnterView) */ {
 public:
  ResCollectEnterView();
  virtual ~ResCollectEnterView();

  ResCollectEnterView(const ResCollectEnterView& from);
  ResCollectEnterView(ResCollectEnterView&& from) noexcept
    : ResCollectEnterView() {
    *this = ::std::move(from);
  }

  inline ResCollectEnterView& operator=(const ResCollectEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCollectEnterView& operator=(ResCollectEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCollectEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCollectEnterView* internal_default_instance() {
    return reinterpret_cast<const ResCollectEnterView*>(
               &_ResCollectEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ResCollectEnterView* other);
  friend void swap(ResCollectEnterView& a, ResCollectEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResCollectEnterView* New() const final {
    return CreateMaybeMessage<ResCollectEnterView>(nullptr);
  }

  ResCollectEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCollectEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCollectEnterView& from);
  void MergeFrom(const ResCollectEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCollectEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResCollectEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundCollectPoint collect = 1;
  bool has_collect() const;
  void clear_collect();
  static const int kCollectFieldNumber = 1;
  const ::mapV2::RoundCollectPoint& collect() const;
  ::mapV2::RoundCollectPoint* release_collect();
  ::mapV2::RoundCollectPoint* mutable_collect();
  void set_allocated_collect(::mapV2::RoundCollectPoint* collect);

  // @@protoc_insertion_point(class_scope:mapV2.ResCollectEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundCollectPoint* collect_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResBufferEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResBufferEnterView) */ {
 public:
  ResBufferEnterView();
  virtual ~ResBufferEnterView();

  ResBufferEnterView(const ResBufferEnterView& from);
  ResBufferEnterView(ResBufferEnterView&& from) noexcept
    : ResBufferEnterView() {
    *this = ::std::move(from);
  }

  inline ResBufferEnterView& operator=(const ResBufferEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResBufferEnterView& operator=(ResBufferEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResBufferEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResBufferEnterView* internal_default_instance() {
    return reinterpret_cast<const ResBufferEnterView*>(
               &_ResBufferEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ResBufferEnterView* other);
  friend void swap(ResBufferEnterView& a, ResBufferEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResBufferEnterView* New() const final {
    return CreateMaybeMessage<ResBufferEnterView>(nullptr);
  }

  ResBufferEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResBufferEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResBufferEnterView& from);
  void MergeFrom(const ResBufferEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResBufferEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResBufferEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundBufferInfo buffer = 1;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 1;
  const ::mapV2::RoundBufferInfo& buffer() const;
  ::mapV2::RoundBufferInfo* release_buffer();
  ::mapV2::RoundBufferInfo* mutable_buffer();
  void set_allocated_buffer(::mapV2::RoundBufferInfo* buffer);

  // @@protoc_insertion_point(class_scope:mapV2.ResBufferEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundBufferInfo* buffer_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResMonsterEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResMonsterEnterView) */ {
 public:
  ResMonsterEnterView();
  virtual ~ResMonsterEnterView();

  ResMonsterEnterView(const ResMonsterEnterView& from);
  ResMonsterEnterView(ResMonsterEnterView&& from) noexcept
    : ResMonsterEnterView() {
    *this = ::std::move(from);
  }

  inline ResMonsterEnterView& operator=(const ResMonsterEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResMonsterEnterView& operator=(ResMonsterEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResMonsterEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResMonsterEnterView* internal_default_instance() {
    return reinterpret_cast<const ResMonsterEnterView*>(
               &_ResMonsterEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ResMonsterEnterView* other);
  friend void swap(ResMonsterEnterView& a, ResMonsterEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResMonsterEnterView* New() const final {
    return CreateMaybeMessage<ResMonsterEnterView>(nullptr);
  }

  ResMonsterEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResMonsterEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResMonsterEnterView& from);
  void MergeFrom(const ResMonsterEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResMonsterEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResMonsterEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundMonsterInfo monster = 1;
  bool has_monster() const;
  void clear_monster();
  static const int kMonsterFieldNumber = 1;
  const ::mapV2::RoundMonsterInfo& monster() const;
  ::mapV2::RoundMonsterInfo* release_monster();
  ::mapV2::RoundMonsterInfo* mutable_monster();
  void set_allocated_monster(::mapV2::RoundMonsterInfo* monster);

  // @@protoc_insertion_point(class_scope:mapV2.ResMonsterEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundMonsterInfo* monster_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResNpcEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResNpcEnterView) */ {
 public:
  ResNpcEnterView();
  virtual ~ResNpcEnterView();

  ResNpcEnterView(const ResNpcEnterView& from);
  ResNpcEnterView(ResNpcEnterView&& from) noexcept
    : ResNpcEnterView() {
    *this = ::std::move(from);
  }

  inline ResNpcEnterView& operator=(const ResNpcEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResNpcEnterView& operator=(ResNpcEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResNpcEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResNpcEnterView* internal_default_instance() {
    return reinterpret_cast<const ResNpcEnterView*>(
               &_ResNpcEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ResNpcEnterView* other);
  friend void swap(ResNpcEnterView& a, ResNpcEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResNpcEnterView* New() const final {
    return CreateMaybeMessage<ResNpcEnterView>(nullptr);
  }

  ResNpcEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResNpcEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResNpcEnterView& from);
  void MergeFrom(const ResNpcEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResNpcEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResNpcEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundNpcInfo npc = 1;
  bool has_npc() const;
  void clear_npc();
  static const int kNpcFieldNumber = 1;
  const ::mapV2::RoundNpcInfo& npc() const;
  ::mapV2::RoundNpcInfo* release_npc();
  ::mapV2::RoundNpcInfo* mutable_npc();
  void set_allocated_npc(::mapV2::RoundNpcInfo* npc);

  // @@protoc_insertion_point(class_scope:mapV2.ResNpcEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundNpcInfo* npc_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPetEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPetEnterView) */ {
 public:
  ResPetEnterView();
  virtual ~ResPetEnterView();

  ResPetEnterView(const ResPetEnterView& from);
  ResPetEnterView(ResPetEnterView&& from) noexcept
    : ResPetEnterView() {
    *this = ::std::move(from);
  }

  inline ResPetEnterView& operator=(const ResPetEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPetEnterView& operator=(ResPetEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPetEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPetEnterView* internal_default_instance() {
    return reinterpret_cast<const ResPetEnterView*>(
               &_ResPetEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ResPetEnterView* other);
  friend void swap(ResPetEnterView& a, ResPetEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPetEnterView* New() const final {
    return CreateMaybeMessage<ResPetEnterView>(nullptr);
  }

  ResPetEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPetEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPetEnterView& from);
  void MergeFrom(const ResPetEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPetEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPetEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundPetInfo pet = 1;
  bool has_pet() const;
  void clear_pet();
  static const int kPetFieldNumber = 1;
  const ::mapV2::RoundPetInfo& pet() const;
  ::mapV2::RoundPetInfo* release_pet();
  ::mapV2::RoundPetInfo* mutable_pet();
  void set_allocated_pet(::mapV2::RoundPetInfo* pet);

  // @@protoc_insertion_point(class_scope:mapV2.ResPetEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundPetInfo* pet_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResHeroEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResHeroEnterView) */ {
 public:
  ResHeroEnterView();
  virtual ~ResHeroEnterView();

  ResHeroEnterView(const ResHeroEnterView& from);
  ResHeroEnterView(ResHeroEnterView&& from) noexcept
    : ResHeroEnterView() {
    *this = ::std::move(from);
  }

  inline ResHeroEnterView& operator=(const ResHeroEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHeroEnterView& operator=(ResHeroEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResHeroEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResHeroEnterView* internal_default_instance() {
    return reinterpret_cast<const ResHeroEnterView*>(
               &_ResHeroEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ResHeroEnterView* other);
  friend void swap(ResHeroEnterView& a, ResHeroEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResHeroEnterView* New() const final {
    return CreateMaybeMessage<ResHeroEnterView>(nullptr);
  }

  ResHeroEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResHeroEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResHeroEnterView& from);
  void MergeFrom(const ResHeroEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHeroEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResHeroEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundHeroInfo hero = 1;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 1;
  const ::mapV2::RoundHeroInfo& hero() const;
  ::mapV2::RoundHeroInfo* release_hero();
  ::mapV2::RoundHeroInfo* mutable_hero();
  void set_allocated_hero(::mapV2::RoundHeroInfo* hero);

  // @@protoc_insertion_point(class_scope:mapV2.ResHeroEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundHeroInfo* hero_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResServantEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResServantEnterView) */ {
 public:
  ResServantEnterView();
  virtual ~ResServantEnterView();

  ResServantEnterView(const ResServantEnterView& from);
  ResServantEnterView(ResServantEnterView&& from) noexcept
    : ResServantEnterView() {
    *this = ::std::move(from);
  }

  inline ResServantEnterView& operator=(const ResServantEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResServantEnterView& operator=(ResServantEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResServantEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResServantEnterView* internal_default_instance() {
    return reinterpret_cast<const ResServantEnterView*>(
               &_ResServantEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ResServantEnterView* other);
  friend void swap(ResServantEnterView& a, ResServantEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResServantEnterView* New() const final {
    return CreateMaybeMessage<ResServantEnterView>(nullptr);
  }

  ResServantEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResServantEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResServantEnterView& from);
  void MergeFrom(const ResServantEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResServantEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResServantEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mapV2.RoundServantInfo servant = 1;
  bool has_servant() const;
  void clear_servant();
  static const int kServantFieldNumber = 1;
  const ::mapV2::RoundServantInfo& servant() const;
  ::mapV2::RoundServantInfo* release_servant();
  ::mapV2::RoundServantInfo* mutable_servant();
  void set_allocated_servant(::mapV2::RoundServantInfo* servant);

  // @@protoc_insertion_point(class_scope:mapV2.ResServantEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundServantInfo* servant_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResMapObjectExitView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResMapObjectExitView) */ {
 public:
  ResMapObjectExitView();
  virtual ~ResMapObjectExitView();

  ResMapObjectExitView(const ResMapObjectExitView& from);
  ResMapObjectExitView(ResMapObjectExitView&& from) noexcept
    : ResMapObjectExitView() {
    *this = ::std::move(from);
  }

  inline ResMapObjectExitView& operator=(const ResMapObjectExitView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResMapObjectExitView& operator=(ResMapObjectExitView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResMapObjectExitView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResMapObjectExitView* internal_default_instance() {
    return reinterpret_cast<const ResMapObjectExitView*>(
               &_ResMapObjectExitView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ResMapObjectExitView* other);
  friend void swap(ResMapObjectExitView& a, ResMapObjectExitView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResMapObjectExitView* New() const final {
    return CreateMaybeMessage<ResMapObjectExitView>(nullptr);
  }

  ResMapObjectExitView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResMapObjectExitView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResMapObjectExitView& from);
  void MergeFrom(const ResMapObjectExitView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResMapObjectExitView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResMapObjectExitView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResMapObjectExitView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerEnterMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerEnterMap) */ {
 public:
  ResPlayerEnterMap();
  virtual ~ResPlayerEnterMap();

  ResPlayerEnterMap(const ResPlayerEnterMap& from);
  ResPlayerEnterMap(ResPlayerEnterMap&& from) noexcept
    : ResPlayerEnterMap() {
    *this = ::std::move(from);
  }

  inline ResPlayerEnterMap& operator=(const ResPlayerEnterMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerEnterMap& operator=(ResPlayerEnterMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerEnterMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerEnterMap* internal_default_instance() {
    return reinterpret_cast<const ResPlayerEnterMap*>(
               &_ResPlayerEnterMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ResPlayerEnterMap* other);
  friend void swap(ResPlayerEnterMap& a, ResPlayerEnterMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerEnterMap* New() const final {
    return CreateMaybeMessage<ResPlayerEnterMap>(nullptr);
  }

  ResPlayerEnterMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerEnterMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerEnterMap& from);
  void MergeFrom(const ResPlayerEnterMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerEnterMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerEnterMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // optional float dir = 5;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 5;
  float dir() const;
  void set_dir(float value);

  // optional int32 hp = 6;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mp = 7;
  bool has_mp() const;
  void clear_mp();
  static const int kMpFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerEnterMap)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float x_;
  float y_;
  float z_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerChangeMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerChangeMap) */ {
 public:
  ResPlayerChangeMap();
  virtual ~ResPlayerChangeMap();

  ResPlayerChangeMap(const ResPlayerChangeMap& from);
  ResPlayerChangeMap(ResPlayerChangeMap&& from) noexcept
    : ResPlayerChangeMap() {
    *this = ::std::move(from);
  }

  inline ResPlayerChangeMap& operator=(const ResPlayerChangeMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerChangeMap& operator=(ResPlayerChangeMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerChangeMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerChangeMap* internal_default_instance() {
    return reinterpret_cast<const ResPlayerChangeMap*>(
               &_ResPlayerChangeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ResPlayerChangeMap* other);
  friend void swap(ResPlayerChangeMap& a, ResPlayerChangeMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerChangeMap* New() const final {
    return CreateMaybeMessage<ResPlayerChangeMap>(nullptr);
  }

  ResPlayerChangeMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerChangeMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerChangeMap& from);
  void MergeFrom(const ResPlayerChangeMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerChangeMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerChangeMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mid = 1;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerChangeMap)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResChangePos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResChangePos) */ {
 public:
  ResChangePos();
  virtual ~ResChangePos();

  ResChangePos(const ResChangePos& from);
  ResChangePos(ResChangePos&& from) noexcept
    : ResChangePos() {
    *this = ::std::move(from);
  }

  inline ResChangePos& operator=(const ResChangePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResChangePos& operator=(ResChangePos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResChangePos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResChangePos* internal_default_instance() {
    return reinterpret_cast<const ResChangePos*>(
               &_ResChangePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ResChangePos* other);
  friend void swap(ResChangePos& a, ResChangePos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResChangePos* New() const final {
    return CreateMaybeMessage<ResChangePos>(nullptr);
  }

  ResChangePos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResChangePos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResChangePos& from);
  void MergeFrom(const ResChangePos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResChangePos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResChangePos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // optional int32 reason = 5;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 waiGuaCanMoveTime = 6;
  bool has_waiguacanmovetime() const;
  void clear_waiguacanmovetime();
  static const int kWaiGuaCanMoveTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 waiguacanmovetime() const;
  void set_waiguacanmovetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResChangePos)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 waiguacanmovetime_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResObjectMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResObjectMove) */ {
 public:
  ResObjectMove();
  virtual ~ResObjectMove();

  ResObjectMove(const ResObjectMove& from);
  ResObjectMove(ResObjectMove&& from) noexcept
    : ResObjectMove() {
    *this = ::std::move(from);
  }

  inline ResObjectMove& operator=(const ResObjectMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResObjectMove& operator=(ResObjectMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResObjectMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResObjectMove* internal_default_instance() {
    return reinterpret_cast<const ResObjectMove*>(
               &_ResObjectMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ResObjectMove* other);
  friend void swap(ResObjectMove& a, ResObjectMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResObjectMove* New() const final {
    return CreateMaybeMessage<ResObjectMove>(nullptr);
  }

  ResObjectMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResObjectMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResObjectMove& from);
  void MergeFrom(const ResObjectMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResObjectMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResObjectMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.ResObjectMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResEventEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResEventEnterView) */ {
 public:
  ResEventEnterView();
  virtual ~ResEventEnterView();

  ResEventEnterView(const ResEventEnterView& from);
  ResEventEnterView(ResEventEnterView&& from) noexcept
    : ResEventEnterView() {
    *this = ::std::move(from);
  }

  inline ResEventEnterView& operator=(const ResEventEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResEventEnterView& operator=(ResEventEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResEventEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResEventEnterView* internal_default_instance() {
    return reinterpret_cast<const ResEventEnterView*>(
               &_ResEventEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ResEventEnterView* other);
  friend void swap(ResEventEnterView& a, ResEventEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResEventEnterView* New() const final {
    return CreateMaybeMessage<ResEventEnterView>(nullptr);
  }

  ResEventEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResEventEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResEventEnterView& from);
  void MergeFrom(const ResEventEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResEventEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResEventEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mapV2.RoundEventInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::mapV2::RoundEventInfo& info() const;
  ::mapV2::RoundEventInfo* release_info();
  ::mapV2::RoundEventInfo* mutable_info();
  void set_allocated_info(::mapV2::RoundEventInfo* info);

  // @@protoc_insertion_point(class_scope:mapV2.ResEventEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundEventInfo* info_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResRelive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResRelive) */ {
 public:
  ResRelive();
  virtual ~ResRelive();

  ResRelive(const ResRelive& from);
  ResRelive(ResRelive&& from) noexcept
    : ResRelive() {
    *this = ::std::move(from);
  }

  inline ResRelive& operator=(const ResRelive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResRelive& operator=(ResRelive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResRelive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResRelive* internal_default_instance() {
    return reinterpret_cast<const ResRelive*>(
               &_ResRelive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ResRelive* other);
  friend void swap(ResRelive& a, ResRelive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResRelive* New() const final {
    return CreateMaybeMessage<ResRelive>(nullptr);
  }

  ResRelive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResRelive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResRelive& from);
  void MergeFrom(const ResRelive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResRelive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResRelive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 hp = 2;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mp = 3;
  bool has_mp() const;
  void clear_mp();
  static const int kMpFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 inner = 4;
  bool has_inner() const;
  void clear_inner();
  static const int kInnerFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 inner() const;
  void set_inner(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResRelive)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 inner_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResItemEnterView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResItemEnterView) */ {
 public:
  ResItemEnterView();
  virtual ~ResItemEnterView();

  ResItemEnterView(const ResItemEnterView& from);
  ResItemEnterView(ResItemEnterView&& from) noexcept
    : ResItemEnterView() {
    *this = ::std::move(from);
  }

  inline ResItemEnterView& operator=(const ResItemEnterView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResItemEnterView& operator=(ResItemEnterView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResItemEnterView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResItemEnterView* internal_default_instance() {
    return reinterpret_cast<const ResItemEnterView*>(
               &_ResItemEnterView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ResItemEnterView* other);
  friend void swap(ResItemEnterView& a, ResItemEnterView& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResItemEnterView* New() const final {
    return CreateMaybeMessage<ResItemEnterView>(nullptr);
  }

  ResItemEnterView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResItemEnterView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResItemEnterView& from);
  void MergeFrom(const ResItemEnterView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResItemEnterView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResItemEnterView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mapV2.RoundItemInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::mapV2::RoundItemInfo& info() const;
  ::mapV2::RoundItemInfo* release_info();
  ::mapV2::RoundItemInfo* mutable_info();
  void set_allocated_info(::mapV2::RoundItemInfo* info);

  // @@protoc_insertion_point(class_scope:mapV2.ResItemEnterView)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::RoundItemInfo* info_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResUpdateEquip :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResUpdateEquip) */ {
 public:
  ResUpdateEquip();
  virtual ~ResUpdateEquip();

  ResUpdateEquip(const ResUpdateEquip& from);
  ResUpdateEquip(ResUpdateEquip&& from) noexcept
    : ResUpdateEquip() {
    *this = ::std::move(from);
  }

  inline ResUpdateEquip& operator=(const ResUpdateEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResUpdateEquip& operator=(ResUpdateEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResUpdateEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResUpdateEquip* internal_default_instance() {
    return reinterpret_cast<const ResUpdateEquip*>(
               &_ResUpdateEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(ResUpdateEquip* other);
  friend void swap(ResUpdateEquip& a, ResUpdateEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResUpdateEquip* New() const final {
    return CreateMaybeMessage<ResUpdateEquip>(nullptr);
  }

  ResUpdateEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResUpdateEquip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResUpdateEquip& from);
  void MergeFrom(const ResUpdateEquip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResUpdateEquip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResUpdateEquip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mapV2.PerformerEquipBean equip = 2;
  bool has_equip() const;
  void clear_equip();
  static const int kEquipFieldNumber = 2;
  const ::mapV2::PerformerEquipBean& equip() const;
  ::mapV2::PerformerEquipBean* release_equip();
  ::mapV2::PerformerEquipBean* mutable_equip();
  void set_allocated_equip(::mapV2::PerformerEquipBean* equip);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResUpdateEquip)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mapV2::PerformerEquipBean* equip_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API TryEnterMapRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.TryEnterMapRequest) */ {
 public:
  TryEnterMapRequest();
  virtual ~TryEnterMapRequest();

  TryEnterMapRequest(const TryEnterMapRequest& from);
  TryEnterMapRequest(TryEnterMapRequest&& from) noexcept
    : TryEnterMapRequest() {
    *this = ::std::move(from);
  }

  inline TryEnterMapRequest& operator=(const TryEnterMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryEnterMapRequest& operator=(TryEnterMapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryEnterMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TryEnterMapRequest* internal_default_instance() {
    return reinterpret_cast<const TryEnterMapRequest*>(
               &_TryEnterMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(TryEnterMapRequest* other);
  friend void swap(TryEnterMapRequest& a, TryEnterMapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TryEnterMapRequest* New() const final {
    return CreateMaybeMessage<TryEnterMapRequest>(nullptr);
  }

  TryEnterMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryEnterMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryEnterMapRequest& from);
  void MergeFrom(const TryEnterMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryEnterMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.TryEnterMapRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mid = 1;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.TryEnterMapRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResTryEnterMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResTryEnterMap) */ {
 public:
  ResTryEnterMap();
  virtual ~ResTryEnterMap();

  ResTryEnterMap(const ResTryEnterMap& from);
  ResTryEnterMap(ResTryEnterMap&& from) noexcept
    : ResTryEnterMap() {
    *this = ::std::move(from);
  }

  inline ResTryEnterMap& operator=(const ResTryEnterMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResTryEnterMap& operator=(ResTryEnterMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResTryEnterMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResTryEnterMap* internal_default_instance() {
    return reinterpret_cast<const ResTryEnterMap*>(
               &_ResTryEnterMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ResTryEnterMap* other);
  friend void swap(ResTryEnterMap& a, ResTryEnterMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResTryEnterMap* New() const final {
    return CreateMaybeMessage<ResTryEnterMap>(nullptr);
  }

  ResTryEnterMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResTryEnterMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResTryEnterMap& from);
  void MergeFrom(const ResTryEnterMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResTryEnterMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResTryEnterMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mid = 1;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool reconnect = 3;
  bool has_reconnect() const;
  void clear_reconnect();
  static const int kReconnectFieldNumber = 3;
  bool reconnect() const;
  void set_reconnect(bool value);

  // @@protoc_insertion_point(class_scope:mapV2.ResTryEnterMap)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  bool reconnect_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResChangePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResChangePlayer) */ {
 public:
  ResChangePlayer();
  virtual ~ResChangePlayer();

  ResChangePlayer(const ResChangePlayer& from);
  ResChangePlayer(ResChangePlayer&& from) noexcept
    : ResChangePlayer() {
    *this = ::std::move(from);
  }

  inline ResChangePlayer& operator=(const ResChangePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResChangePlayer& operator=(ResChangePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResChangePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResChangePlayer* internal_default_instance() {
    return reinterpret_cast<const ResChangePlayer*>(
               &_ResChangePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ResChangePlayer* other);
  friend void swap(ResChangePlayer& a, ResChangePlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResChangePlayer* New() const final {
    return CreateMaybeMessage<ResChangePlayer>(nullptr);
  }

  ResChangePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResChangePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResChangePlayer& from);
  void MergeFrom(const ResChangePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResChangePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResChangePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 playerId = 1;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResChangePlayer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResReplacePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResReplacePlayer) */ {
 public:
  ResReplacePlayer();
  virtual ~ResReplacePlayer();

  ResReplacePlayer(const ResReplacePlayer& from);
  ResReplacePlayer(ResReplacePlayer&& from) noexcept
    : ResReplacePlayer() {
    *this = ::std::move(from);
  }

  inline ResReplacePlayer& operator=(const ResReplacePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResReplacePlayer& operator=(ResReplacePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResReplacePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResReplacePlayer* internal_default_instance() {
    return reinterpret_cast<const ResReplacePlayer*>(
               &_ResReplacePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ResReplacePlayer* other);
  friend void swap(ResReplacePlayer& a, ResReplacePlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResReplacePlayer* New() const final {
    return CreateMaybeMessage<ResReplacePlayer>(nullptr);
  }

  ResReplacePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResReplacePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResReplacePlayer& from);
  void MergeFrom(const ResReplacePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResReplacePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResReplacePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 oldId = 1;
  bool has_oldid() const;
  void clear_oldid();
  static const int kOldIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 oldid() const;
  void set_oldid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 newId = 2;
  bool has_newid() const;
  void clear_newid();
  static const int kNewIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 newid() const;
  void set_newid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResReplacePlayer)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 oldid_;
  ::PROTOBUF_NAMESPACE_ID::int64 newid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResBossOwner :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResBossOwner) */ {
 public:
  ResBossOwner();
  virtual ~ResBossOwner();

  ResBossOwner(const ResBossOwner& from);
  ResBossOwner(ResBossOwner&& from) noexcept
    : ResBossOwner() {
    *this = ::std::move(from);
  }

  inline ResBossOwner& operator=(const ResBossOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResBossOwner& operator=(ResBossOwner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResBossOwner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResBossOwner* internal_default_instance() {
    return reinterpret_cast<const ResBossOwner*>(
               &_ResBossOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ResBossOwner* other);
  friend void swap(ResBossOwner& a, ResBossOwner& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResBossOwner* New() const final {
    return CreateMaybeMessage<ResBossOwner>(nullptr);
  }

  ResBossOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResBossOwner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResBossOwner& from);
  void MergeFrom(const ResBossOwner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResBossOwner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResBossOwner";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string unionName = 5;
  bool has_unionname() const;
  void clear_unionname();
  static const int kUnionNameFieldNumber = 5;
  const std::string& unionname() const;
  void set_unionname(const std::string& value);
  void set_unionname(std::string&& value);
  void set_unionname(const char* value);
  void set_unionname(const char* value, size_t size);
  std::string* mutable_unionname();
  std::string* release_unionname();
  void set_allocated_unionname(std::string* unionname);

  // optional int64 bossId = 1;
  bool has_bossid() const;
  void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid() const;
  void set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 lid = 2;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 unionId = 4;
  bool has_unionid() const;
  void clear_unionid();
  static const int kUnionIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid() const;
  void set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sex = 6;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 career = 7;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 8;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 8;
  float x() const;
  void set_x(float value);

  // optional float y = 9;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 9;
  float y() const;
  void set_y(float value);

  // optional float z = 10;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 10;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.ResBossOwner)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionname_;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerWingChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerWingChange) */ {
 public:
  ResPlayerWingChange();
  virtual ~ResPlayerWingChange();

  ResPlayerWingChange(const ResPlayerWingChange& from);
  ResPlayerWingChange(ResPlayerWingChange&& from) noexcept
    : ResPlayerWingChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerWingChange& operator=(const ResPlayerWingChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerWingChange& operator=(ResPlayerWingChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerWingChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerWingChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerWingChange*>(
               &_ResPlayerWingChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ResPlayerWingChange* other);
  friend void swap(ResPlayerWingChange& a, ResPlayerWingChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerWingChange* New() const final {
    return CreateMaybeMessage<ResPlayerWingChange>(nullptr);
  }

  ResPlayerWingChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerWingChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerWingChange& from);
  void MergeFrom(const ResPlayerWingChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerWingChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerWingChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 wing = 2;
  bool has_wing() const;
  void clear_wing();
  static const int kWingFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 wing() const;
  void set_wing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerWingChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wing_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerUnionChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerUnionChange) */ {
 public:
  ResPlayerUnionChange();
  virtual ~ResPlayerUnionChange();

  ResPlayerUnionChange(const ResPlayerUnionChange& from);
  ResPlayerUnionChange(ResPlayerUnionChange&& from) noexcept
    : ResPlayerUnionChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerUnionChange& operator=(const ResPlayerUnionChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerUnionChange& operator=(ResPlayerUnionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerUnionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerUnionChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerUnionChange*>(
               &_ResPlayerUnionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ResPlayerUnionChange* other);
  friend void swap(ResPlayerUnionChange& a, ResPlayerUnionChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerUnionChange* New() const final {
    return CreateMaybeMessage<ResPlayerUnionChange>(nullptr);
  }

  ResPlayerUnionChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerUnionChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerUnionChange& from);
  void MergeFrom(const ResPlayerUnionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerUnionChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerUnionChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string unionName = 3;
  bool has_unionname() const;
  void clear_unionname();
  static const int kUnionNameFieldNumber = 3;
  const std::string& unionname() const;
  void set_unionname(const std::string& value);
  void set_unionname(std::string&& value);
  void set_unionname(const char* value);
  void set_unionname(const char* value, size_t size);
  std::string* mutable_unionname();
  std::string* release_unionname();
  void set_allocated_unionname(std::string* unionname);

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 unionId = 2;
  bool has_unionid() const;
  void clear_unionid();
  static const int kUnionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid() const;
  void set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerUnionChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unionname_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 unionid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API PlayerReliveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.PlayerReliveRequest) */ {
 public:
  PlayerReliveRequest();
  virtual ~PlayerReliveRequest();

  PlayerReliveRequest(const PlayerReliveRequest& from);
  PlayerReliveRequest(PlayerReliveRequest&& from) noexcept
    : PlayerReliveRequest() {
    *this = ::std::move(from);
  }

  inline PlayerReliveRequest& operator=(const PlayerReliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerReliveRequest& operator=(PlayerReliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerReliveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerReliveRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerReliveRequest*>(
               &_PlayerReliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(PlayerReliveRequest* other);
  friend void swap(PlayerReliveRequest& a, PlayerReliveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerReliveRequest* New() const final {
    return CreateMaybeMessage<PlayerReliveRequest>(nullptr);
  }

  PlayerReliveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerReliveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerReliveRequest& from);
  void MergeFrom(const PlayerReliveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerReliveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.PlayerReliveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reliveType = 1;
  bool has_relivetype() const;
  void clear_relivetype();
  static const int kReliveTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 relivetype() const;
  void set_relivetype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.PlayerReliveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 relivetype_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerReliveInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerReliveInfo) */ {
 public:
  ResPlayerReliveInfo();
  virtual ~ResPlayerReliveInfo();

  ResPlayerReliveInfo(const ResPlayerReliveInfo& from);
  ResPlayerReliveInfo(ResPlayerReliveInfo&& from) noexcept
    : ResPlayerReliveInfo() {
    *this = ::std::move(from);
  }

  inline ResPlayerReliveInfo& operator=(const ResPlayerReliveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerReliveInfo& operator=(ResPlayerReliveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerReliveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerReliveInfo* internal_default_instance() {
    return reinterpret_cast<const ResPlayerReliveInfo*>(
               &_ResPlayerReliveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ResPlayerReliveInfo* other);
  friend void swap(ResPlayerReliveInfo& a, ResPlayerReliveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerReliveInfo* New() const final {
    return CreateMaybeMessage<ResPlayerReliveInfo>(nullptr);
  }

  ResPlayerReliveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerReliveInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerReliveInfo& from);
  void MergeFrom(const ResPlayerReliveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerReliveInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerReliveInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dieCount = 1;
  bool has_diecount() const;
  void clear_diecount();
  static const int kDieCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 diecount() const;
  void set_diecount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 autoReliveTime = 2;
  bool has_autorelivetime() const;
  void clear_autorelivetime();
  static const int kAutoReliveTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 autorelivetime() const;
  void set_autorelivetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerReliveInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 diecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 autorelivetime_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerFashionChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerFashionChange) */ {
 public:
  ResPlayerFashionChange();
  virtual ~ResPlayerFashionChange();

  ResPlayerFashionChange(const ResPlayerFashionChange& from);
  ResPlayerFashionChange(ResPlayerFashionChange&& from) noexcept
    : ResPlayerFashionChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerFashionChange& operator=(const ResPlayerFashionChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerFashionChange& operator=(ResPlayerFashionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerFashionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerFashionChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerFashionChange*>(
               &_ResPlayerFashionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ResPlayerFashionChange* other);
  friend void swap(ResPlayerFashionChange& a, ResPlayerFashionChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerFashionChange* New() const final {
    return CreateMaybeMessage<ResPlayerFashionChange>(nullptr);
  }

  ResPlayerFashionChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerFashionChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerFashionChange& from);
  void MergeFrom(const ResPlayerFashionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerFashionChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerFashionChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 fashionType = 2;
  bool has_fashiontype() const;
  void clear_fashiontype();
  static const int kFashionTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 fashiontype() const;
  void set_fashiontype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 int32 = 3;
  bool has_int32() const;
  void clear_int32();
  static const int kInt32FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 int32() const;
  void set_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerFashionChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fashiontype_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerJunxianChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerJunxianChange) */ {
 public:
  ResPlayerJunxianChange();
  virtual ~ResPlayerJunxianChange();

  ResPlayerJunxianChange(const ResPlayerJunxianChange& from);
  ResPlayerJunxianChange(ResPlayerJunxianChange&& from) noexcept
    : ResPlayerJunxianChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerJunxianChange& operator=(const ResPlayerJunxianChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerJunxianChange& operator=(ResPlayerJunxianChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerJunxianChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerJunxianChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerJunxianChange*>(
               &_ResPlayerJunxianChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ResPlayerJunxianChange* other);
  friend void swap(ResPlayerJunxianChange& a, ResPlayerJunxianChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerJunxianChange* New() const final {
    return CreateMaybeMessage<ResPlayerJunxianChange>(nullptr);
  }

  ResPlayerJunxianChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerJunxianChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerJunxianChange& from);
  void MergeFrom(const ResPlayerJunxianChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerJunxianChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerJunxianChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 junxianLevel = 2;
  bool has_junxianlevel() const;
  void clear_junxianlevel();
  static const int kJunxianLevelFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 junxianlevel() const;
  void set_junxianlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerJunxianChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 junxianlevel_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API SwitchFightModelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.SwitchFightModelRequest) */ {
 public:
  SwitchFightModelRequest();
  virtual ~SwitchFightModelRequest();

  SwitchFightModelRequest(const SwitchFightModelRequest& from);
  SwitchFightModelRequest(SwitchFightModelRequest&& from) noexcept
    : SwitchFightModelRequest() {
    *this = ::std::move(from);
  }

  inline SwitchFightModelRequest& operator=(const SwitchFightModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchFightModelRequest& operator=(SwitchFightModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchFightModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchFightModelRequest* internal_default_instance() {
    return reinterpret_cast<const SwitchFightModelRequest*>(
               &_SwitchFightModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(SwitchFightModelRequest* other);
  friend void swap(SwitchFightModelRequest& a, SwitchFightModelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchFightModelRequest* New() const final {
    return CreateMaybeMessage<SwitchFightModelRequest>(nullptr);
  }

  SwitchFightModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchFightModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchFightModelRequest& from);
  void MergeFrom(const SwitchFightModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchFightModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.SwitchFightModelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fightModel = 1;
  bool has_fightmodel() const;
  void clear_fightmodel();
  static const int kFightModelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 fightmodel() const;
  void set_fightmodel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.SwitchFightModelRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fightmodel_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResSwitchFightModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResSwitchFightModel) */ {
 public:
  ResSwitchFightModel();
  virtual ~ResSwitchFightModel();

  ResSwitchFightModel(const ResSwitchFightModel& from);
  ResSwitchFightModel(ResSwitchFightModel&& from) noexcept
    : ResSwitchFightModel() {
    *this = ::std::move(from);
  }

  inline ResSwitchFightModel& operator=(const ResSwitchFightModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResSwitchFightModel& operator=(ResSwitchFightModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResSwitchFightModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResSwitchFightModel* internal_default_instance() {
    return reinterpret_cast<const ResSwitchFightModel*>(
               &_ResSwitchFightModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(ResSwitchFightModel* other);
  friend void swap(ResSwitchFightModel& a, ResSwitchFightModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResSwitchFightModel* New() const final {
    return CreateMaybeMessage<ResSwitchFightModel>(nullptr);
  }

  ResSwitchFightModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResSwitchFightModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResSwitchFightModel& from);
  void MergeFrom(const ResSwitchFightModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResSwitchFightModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResSwitchFightModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fightModel = 1;
  bool has_fightmodel() const;
  void clear_fightmodel();
  static const int kFightModelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 fightmodel() const;
  void set_fightmodel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResSwitchFightModel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fightmodel_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API PickUpMapItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.PickUpMapItemRequest) */ {
 public:
  PickUpMapItemRequest();
  virtual ~PickUpMapItemRequest();

  PickUpMapItemRequest(const PickUpMapItemRequest& from);
  PickUpMapItemRequest(PickUpMapItemRequest&& from) noexcept
    : PickUpMapItemRequest() {
    *this = ::std::move(from);
  }

  inline PickUpMapItemRequest& operator=(const PickUpMapItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PickUpMapItemRequest& operator=(PickUpMapItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PickUpMapItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PickUpMapItemRequest* internal_default_instance() {
    return reinterpret_cast<const PickUpMapItemRequest*>(
               &_PickUpMapItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(PickUpMapItemRequest* other);
  friend void swap(PickUpMapItemRequest& a, PickUpMapItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PickUpMapItemRequest* New() const final {
    return CreateMaybeMessage<PickUpMapItemRequest>(nullptr);
  }

  PickUpMapItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PickUpMapItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PickUpMapItemRequest& from);
  void MergeFrom(const PickUpMapItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PickUpMapItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.PickUpMapItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 objId = 1;
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 objid() const;
  void set_objid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.PickUpMapItemRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 objid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResNoticeViewTypeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResNoticeViewTypeInfo) */ {
 public:
  ResNoticeViewTypeInfo();
  virtual ~ResNoticeViewTypeInfo();

  ResNoticeViewTypeInfo(const ResNoticeViewTypeInfo& from);
  ResNoticeViewTypeInfo(ResNoticeViewTypeInfo&& from) noexcept
    : ResNoticeViewTypeInfo() {
    *this = ::std::move(from);
  }

  inline ResNoticeViewTypeInfo& operator=(const ResNoticeViewTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResNoticeViewTypeInfo& operator=(ResNoticeViewTypeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResNoticeViewTypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResNoticeViewTypeInfo* internal_default_instance() {
    return reinterpret_cast<const ResNoticeViewTypeInfo*>(
               &_ResNoticeViewTypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(ResNoticeViewTypeInfo* other);
  friend void swap(ResNoticeViewTypeInfo& a, ResNoticeViewTypeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResNoticeViewTypeInfo* New() const final {
    return CreateMaybeMessage<ResNoticeViewTypeInfo>(nullptr);
  }

  ResNoticeViewTypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResNoticeViewTypeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResNoticeViewTypeInfo& from);
  void MergeFrom(const ResNoticeViewTypeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResNoticeViewTypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResNoticeViewTypeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapV2.NoticeBean updateList = 2;
  int updatelist_size() const;
  void clear_updatelist();
  static const int kUpdateListFieldNumber = 2;
  ::mapV2::NoticeBean* mutable_updatelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::NoticeBean >*
      mutable_updatelist();
  const ::mapV2::NoticeBean& updatelist(int index) const;
  ::mapV2::NoticeBean* add_updatelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::NoticeBean >&
      updatelist() const;

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResNoticeViewTypeInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::NoticeBean > updatelist_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResAllPerformerTotalHp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResAllPerformerTotalHp) */ {
 public:
  ResAllPerformerTotalHp();
  virtual ~ResAllPerformerTotalHp();

  ResAllPerformerTotalHp(const ResAllPerformerTotalHp& from);
  ResAllPerformerTotalHp(ResAllPerformerTotalHp&& from) noexcept
    : ResAllPerformerTotalHp() {
    *this = ::std::move(from);
  }

  inline ResAllPerformerTotalHp& operator=(const ResAllPerformerTotalHp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResAllPerformerTotalHp& operator=(ResAllPerformerTotalHp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResAllPerformerTotalHp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResAllPerformerTotalHp* internal_default_instance() {
    return reinterpret_cast<const ResAllPerformerTotalHp*>(
               &_ResAllPerformerTotalHp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(ResAllPerformerTotalHp* other);
  friend void swap(ResAllPerformerTotalHp& a, ResAllPerformerTotalHp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResAllPerformerTotalHp* New() const final {
    return CreateMaybeMessage<ResAllPerformerTotalHp>(nullptr);
  }

  ResAllPerformerTotalHp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResAllPerformerTotalHp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResAllPerformerTotalHp& from);
  void MergeFrom(const ResAllPerformerTotalHp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResAllPerformerTotalHp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResAllPerformerTotalHp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapV2.MapBoss mapBossList = 1;
  int mapbosslist_size() const;
  void clear_mapbosslist();
  static const int kMapBossListFieldNumber = 1;
  ::mapV2::MapBoss* mutable_mapbosslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MapBoss >*
      mutable_mapbosslist();
  const ::mapV2::MapBoss& mapbosslist(int index) const;
  ::mapV2::MapBoss* add_mapbosslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MapBoss >&
      mapbosslist() const;

  // repeated int64 playerId = 2;
  int playerid_size() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid(int index) const;
  void set_playerid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      playerid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_playerid();

  // repeated bytes percent = 3;
  int percent_size() const;
  void clear_percent();
  static const int kPercentFieldNumber = 3;
  const std::string& percent(int index) const;
  std::string* mutable_percent(int index);
  void set_percent(int index, const std::string& value);
  void set_percent(int index, std::string&& value);
  void set_percent(int index, const char* value);
  void set_percent(int index, const void* value, size_t size);
  std::string* add_percent();
  void add_percent(const std::string& value);
  void add_percent(std::string&& value);
  void add_percent(const char* value);
  void add_percent(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& percent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_percent();

  // repeated bytes percentIp = 4;
  int percentip_size() const;
  void clear_percentip();
  static const int kPercentIpFieldNumber = 4;
  const std::string& percentip(int index) const;
  std::string* mutable_percentip(int index);
  void set_percentip(int index, const std::string& value);
  void set_percentip(int index, std::string&& value);
  void set_percentip(int index, const char* value);
  void set_percentip(int index, const void* value, size_t size);
  std::string* add_percentip();
  void add_percentip(const std::string& value);
  void add_percentip(std::string&& value);
  void add_percentip(const char* value);
  void add_percentip(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& percentip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_percentip();

  // @@protoc_insertion_point(class_scope:mapV2.ResAllPerformerTotalHp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MapBoss > mapbosslist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > playerid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> percent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> percentip_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPressureValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPressureValue) */ {
 public:
  ResPressureValue();
  virtual ~ResPressureValue();

  ResPressureValue(const ResPressureValue& from);
  ResPressureValue(ResPressureValue&& from) noexcept
    : ResPressureValue() {
    *this = ::std::move(from);
  }

  inline ResPressureValue& operator=(const ResPressureValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPressureValue& operator=(ResPressureValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPressureValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPressureValue* internal_default_instance() {
    return reinterpret_cast<const ResPressureValue*>(
               &_ResPressureValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(ResPressureValue* other);
  friend void swap(ResPressureValue& a, ResPressureValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPressureValue* New() const final {
    return CreateMaybeMessage<ResPressureValue>(nullptr);
  }

  ResPressureValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPressureValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPressureValue& from);
  void MergeFrom(const ResPressureValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPressureValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPressureValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pressure = 1;
  bool has_pressure() const;
  void clear_pressure();
  static const int kPressureFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 pressure() const;
  void set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPressureValue)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pressure_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API BossOwnerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.BossOwnerRequest) */ {
 public:
  BossOwnerRequest();
  virtual ~BossOwnerRequest();

  BossOwnerRequest(const BossOwnerRequest& from);
  BossOwnerRequest(BossOwnerRequest&& from) noexcept
    : BossOwnerRequest() {
    *this = ::std::move(from);
  }

  inline BossOwnerRequest& operator=(const BossOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BossOwnerRequest& operator=(BossOwnerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BossOwnerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BossOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const BossOwnerRequest*>(
               &_BossOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(BossOwnerRequest* other);
  friend void swap(BossOwnerRequest& a, BossOwnerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BossOwnerRequest* New() const final {
    return CreateMaybeMessage<BossOwnerRequest>(nullptr);
  }

  BossOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BossOwnerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BossOwnerRequest& from);
  void MergeFrom(const BossOwnerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BossOwnerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.BossOwnerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bossId = 1;
  bool has_bossid() const;
  void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid() const;
  void set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.BossOwnerRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API BossReliveTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.BossReliveTime) */ {
 public:
  BossReliveTime();
  virtual ~BossReliveTime();

  BossReliveTime(const BossReliveTime& from);
  BossReliveTime(BossReliveTime&& from) noexcept
    : BossReliveTime() {
    *this = ::std::move(from);
  }

  inline BossReliveTime& operator=(const BossReliveTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline BossReliveTime& operator=(BossReliveTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BossReliveTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BossReliveTime* internal_default_instance() {
    return reinterpret_cast<const BossReliveTime*>(
               &_BossReliveTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(BossReliveTime* other);
  friend void swap(BossReliveTime& a, BossReliveTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BossReliveTime* New() const final {
    return CreateMaybeMessage<BossReliveTime>(nullptr);
  }

  BossReliveTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BossReliveTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BossReliveTime& from);
  void MergeFrom(const BossReliveTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BossReliveTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.BossReliveTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bossId = 1;
  bool has_bossid() const;
  void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid() const;
  void set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 reliveTime = 2;
  bool has_relivetime() const;
  void clear_relivetime();
  static const int kReliveTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 relivetime() const;
  void set_relivetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.BossReliveTime)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 bossid_;
  ::PROTOBUF_NAMESPACE_ID::int32 relivetime_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerSzSuitChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerSzSuitChange) */ {
 public:
  ResPlayerSzSuitChange();
  virtual ~ResPlayerSzSuitChange();

  ResPlayerSzSuitChange(const ResPlayerSzSuitChange& from);
  ResPlayerSzSuitChange(ResPlayerSzSuitChange&& from) noexcept
    : ResPlayerSzSuitChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerSzSuitChange& operator=(const ResPlayerSzSuitChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerSzSuitChange& operator=(ResPlayerSzSuitChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerSzSuitChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerSzSuitChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerSzSuitChange*>(
               &_ResPlayerSzSuitChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(ResPlayerSzSuitChange* other);
  friend void swap(ResPlayerSzSuitChange& a, ResPlayerSzSuitChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerSzSuitChange* New() const final {
    return CreateMaybeMessage<ResPlayerSzSuitChange>(nullptr);
  }

  ResPlayerSzSuitChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerSzSuitChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerSzSuitChange& from);
  void MergeFrom(const ResPlayerSzSuitChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerSzSuitChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerSzSuitChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 suit = 2;
  bool has_suit() const;
  void clear_suit();
  static const int kSuitFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 suit() const;
  void set_suit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerSzSuitChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 suit_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerLegendChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResPlayerLegendChange) */ {
 public:
  ResPlayerLegendChange();
  virtual ~ResPlayerLegendChange();

  ResPlayerLegendChange(const ResPlayerLegendChange& from);
  ResPlayerLegendChange(ResPlayerLegendChange&& from) noexcept
    : ResPlayerLegendChange() {
    *this = ::std::move(from);
  }

  inline ResPlayerLegendChange& operator=(const ResPlayerLegendChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerLegendChange& operator=(ResPlayerLegendChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerLegendChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerLegendChange* internal_default_instance() {
    return reinterpret_cast<const ResPlayerLegendChange*>(
               &_ResPlayerLegendChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(ResPlayerLegendChange* other);
  friend void swap(ResPlayerLegendChange& a, ResPlayerLegendChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerLegendChange* New() const final {
    return CreateMaybeMessage<ResPlayerLegendChange>(nullptr);
  }

  ResPlayerLegendChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerLegendChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerLegendChange& from);
  void MergeFrom(const ResPlayerLegendChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerLegendChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResPlayerLegendChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 legendLevel = 3;
  bool has_legendlevel() const;
  void clear_legendlevel();
  static const int kLegendLevelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 legendlevel() const;
  void set_legendlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResPlayerLegendChange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 legendlevel_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResCartMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResCartMove) */ {
 public:
  ResCartMove();
  virtual ~ResCartMove();

  ResCartMove(const ResCartMove& from);
  ResCartMove(ResCartMove&& from) noexcept
    : ResCartMove() {
    *this = ::std::move(from);
  }

  inline ResCartMove& operator=(const ResCartMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCartMove& operator=(ResCartMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCartMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCartMove* internal_default_instance() {
    return reinterpret_cast<const ResCartMove*>(
               &_ResCartMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ResCartMove* other);
  friend void swap(ResCartMove& a, ResCartMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResCartMove* New() const final {
    return CreateMaybeMessage<ResCartMove>(nullptr);
  }

  ResCartMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCartMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCartMove& from);
  void MergeFrom(const ResCartMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCartMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResCartMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResCartMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResTombInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResTombInfo) */ {
 public:
  ResTombInfo();
  virtual ~ResTombInfo();

  ResTombInfo(const ResTombInfo& from);
  ResTombInfo(ResTombInfo&& from) noexcept
    : ResTombInfo() {
    *this = ::std::move(from);
  }

  inline ResTombInfo& operator=(const ResTombInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResTombInfo& operator=(ResTombInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResTombInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResTombInfo* internal_default_instance() {
    return reinterpret_cast<const ResTombInfo*>(
               &_ResTombInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(ResTombInfo* other);
  friend void swap(ResTombInfo& a, ResTombInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResTombInfo* New() const final {
    return CreateMaybeMessage<ResTombInfo>(nullptr);
  }

  ResTombInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResTombInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResTombInfo& from);
  void MergeFrom(const ResTombInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResTombInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResTombInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapV2.MonsterTomb tombInfos = 1;
  int tombinfos_size() const;
  void clear_tombinfos();
  static const int kTombInfosFieldNumber = 1;
  ::mapV2::MonsterTomb* mutable_tombinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MonsterTomb >*
      mutable_tombinfos();
  const ::mapV2::MonsterTomb& tombinfos(int index) const;
  ::mapV2::MonsterTomb* add_tombinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MonsterTomb >&
      tombinfos() const;

  // @@protoc_insertion_point(class_scope:mapV2.ResTombInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MonsterTomb > tombinfos_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API GatherOperatorRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.GatherOperatorRequest) */ {
 public:
  GatherOperatorRequest();
  virtual ~GatherOperatorRequest();

  GatherOperatorRequest(const GatherOperatorRequest& from);
  GatherOperatorRequest(GatherOperatorRequest&& from) noexcept
    : GatherOperatorRequest() {
    *this = ::std::move(from);
  }

  inline GatherOperatorRequest& operator=(const GatherOperatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatherOperatorRequest& operator=(GatherOperatorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GatherOperatorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatherOperatorRequest* internal_default_instance() {
    return reinterpret_cast<const GatherOperatorRequest*>(
               &_GatherOperatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(GatherOperatorRequest* other);
  friend void swap(GatherOperatorRequest& a, GatherOperatorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatherOperatorRequest* New() const final {
    return CreateMaybeMessage<GatherOperatorRequest>(nullptr);
  }

  GatherOperatorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GatherOperatorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GatherOperatorRequest& from);
  void MergeFrom(const GatherOperatorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatherOperatorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.GatherOperatorRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 2;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mapV2.GatherOperatorRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResGatherState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResGatherState) */ {
 public:
  ResGatherState();
  virtual ~ResGatherState();

  ResGatherState(const ResGatherState& from);
  ResGatherState(ResGatherState&& from) noexcept
    : ResGatherState() {
    *this = ::std::move(from);
  }

  inline ResGatherState& operator=(const ResGatherState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResGatherState& operator=(ResGatherState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResGatherState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResGatherState* internal_default_instance() {
    return reinterpret_cast<const ResGatherState*>(
               &_ResGatherState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(ResGatherState* other);
  friend void swap(ResGatherState& a, ResGatherState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResGatherState* New() const final {
    return CreateMaybeMessage<ResGatherState>(nullptr);
  }

  ResGatherState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResGatherState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResGatherState& from);
  void MergeFrom(const ResGatherState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResGatherState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResGatherState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool isMonster = 5;
  bool has_ismonster() const;
  void clear_ismonster();
  static const int kIsMonsterFieldNumber = 5;
  bool ismonster() const;
  void set_ismonster(bool value);

  // optional float x = 6;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 6;
  float x() const;
  void set_x(float value);

  // optional float y = 7;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 7;
  float y() const;
  void set_y(float value);

  // optional int64 deadTime = 9;
  bool has_deadtime() const;
  void clear_deadtime();
  static const int kDeadTimeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 deadtime() const;
  void set_deadtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ownerId = 10;
  bool has_ownerid() const;
  void clear_ownerid();
  static const int kOwnerIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid() const;
  void set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 lid = 11;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float z = 8;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 8;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mapV2.ResGatherState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  bool ismonster_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int64 deadtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float z_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqClickEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ReqClickEvent) */ {
 public:
  ReqClickEvent();
  virtual ~ReqClickEvent();

  ReqClickEvent(const ReqClickEvent& from);
  ReqClickEvent(ReqClickEvent&& from) noexcept
    : ReqClickEvent() {
    *this = ::std::move(from);
  }

  inline ReqClickEvent& operator=(const ReqClickEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqClickEvent& operator=(ReqClickEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqClickEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqClickEvent* internal_default_instance() {
    return reinterpret_cast<const ReqClickEvent*>(
               &_ReqClickEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(ReqClickEvent* other);
  friend void swap(ReqClickEvent& a, ReqClickEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqClickEvent* New() const final {
    return CreateMaybeMessage<ReqClickEvent>(nullptr);
  }

  ReqClickEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqClickEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqClickEvent& from);
  void MergeFrom(const ReqClickEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqClickEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ReqClickEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 groundEventId = 1;
  bool has_groundeventid() const;
  void clear_groundeventid();
  static const int kGroundEventIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 groundeventid() const;
  void set_groundeventid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ReqClickEvent)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 groundeventid_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResObjectDeadTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapV2.ResObjectDeadTime) */ {
 public:
  ResObjectDeadTime();
  virtual ~ResObjectDeadTime();

  ResObjectDeadTime(const ResObjectDeadTime& from);
  ResObjectDeadTime(ResObjectDeadTime&& from) noexcept
    : ResObjectDeadTime() {
    *this = ::std::move(from);
  }

  inline ResObjectDeadTime& operator=(const ResObjectDeadTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResObjectDeadTime& operator=(ResObjectDeadTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResObjectDeadTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResObjectDeadTime* internal_default_instance() {
    return reinterpret_cast<const ResObjectDeadTime*>(
               &_ResObjectDeadTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(ResObjectDeadTime* other);
  friend void swap(ResObjectDeadTime& a, ResObjectDeadTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResObjectDeadTime* New() const final {
    return CreateMaybeMessage<ResObjectDeadTime>(nullptr);
  }

  ResObjectDeadTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResObjectDeadTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResObjectDeadTime& from);
  void MergeFrom(const ResObjectDeadTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResObjectDeadTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapV2.ResObjectDeadTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string killName = 3;
  bool has_killname() const;
  void clear_killname();
  static const int kKillNameFieldNumber = 3;
  const std::string& killname() const;
  void set_killname(const std::string& value);
  void set_killname(std::string&& value);
  void set_killname(const char* value);
  void set_killname(const char* value, size_t size);
  std::string* mutable_killname();
  std::string* release_killname();
  void set_allocated_killname(std::string* killname);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 killid = 2;
  bool has_killid() const;
  void clear_killid();
  static const int kKillidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 killid() const;
  void set_killid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 deadTime = 4;
  bool has_deadtime() const;
  void clear_deadtime();
  static const int kDeadTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 deadtime() const;
  void set_deadtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:mapV2.ResObjectDeadTime)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 killid_;
  ::PROTOBUF_NAMESPACE_ID::int64 deadtime_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformerEquipBean

// optional int32 equipIndex = 1;
inline bool PerformerEquipBean::has_equipindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformerEquipBean::clear_equipindex() {
  equipindex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformerEquipBean::equipindex() const {
  // @@protoc_insertion_point(field_get:mapV2.PerformerEquipBean.equipIndex)
  return equipindex_;
}
inline void PerformerEquipBean::set_equipindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  equipindex_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PerformerEquipBean.equipIndex)
}

// optional int32 itemId = 2;
inline bool PerformerEquipBean::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformerEquipBean::clear_itemid() {
  itemid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformerEquipBean::itemid() const {
  // @@protoc_insertion_point(field_get:mapV2.PerformerEquipBean.itemId)
  return itemid_;
}
inline void PerformerEquipBean::set_itemid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  itemid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PerformerEquipBean.itemId)
}

// -------------------------------------------------------------------

// PerformerFashionBean

// optional int32 fashionType = 1;
inline bool PerformerFashionBean::has_fashiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformerFashionBean::clear_fashiontype() {
  fashiontype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformerFashionBean::fashiontype() const {
  // @@protoc_insertion_point(field_get:mapV2.PerformerFashionBean.fashionType)
  return fashiontype_;
}
inline void PerformerFashionBean::set_fashiontype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fashiontype_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PerformerFashionBean.fashionType)
}

// optional int32 fashionId = 2;
inline bool PerformerFashionBean::has_fashionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformerFashionBean::clear_fashionid() {
  fashionid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformerFashionBean::fashionid() const {
  // @@protoc_insertion_point(field_get:mapV2.PerformerFashionBean.fashionId)
  return fashionid_;
}
inline void PerformerFashionBean::set_fashionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  fashionid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PerformerFashionBean.fashionId)
}

// -------------------------------------------------------------------

// RoundItemInfo

// optional int64 lid = 1;
inline bool RoundItemInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundItemInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.lid)
  return lid_;
}
inline void RoundItemInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.lid)
}

// optional int32 itemId = 2;
inline bool RoundItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundItemInfo::clear_itemid() {
  itemid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.itemId)
  return itemid_;
}
inline void RoundItemInfo::set_itemid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  itemid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.itemId)
}

// optional int32 count = 3;
inline bool RoundItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundItemInfo::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundItemInfo::count() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.count)
  return count_;
}
inline void RoundItemInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.count)
}

// optional int64 ownerId = 4;
inline bool RoundItemInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundItemInfo::clear_ownerid() {
  ownerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.ownerId)
  return ownerid_;
}
inline void RoundItemInfo::set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.ownerId)
}

// optional float x = 5;
inline bool RoundItemInfo::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundItemInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundItemInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.x)
  return x_;
}
inline void RoundItemInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.x)
}

// optional float y = 6;
inline bool RoundItemInfo::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundItemInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RoundItemInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.y)
  return y_;
}
inline void RoundItemInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.y)
}

// optional float z = 7;
inline bool RoundItemInfo::has_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoundItemInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RoundItemInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.z)
  return z_;
}
inline void RoundItemInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000400u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.z)
}

// optional int64 dropTime = 8;
inline bool RoundItemInfo::has_droptime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundItemInfo::clear_droptime() {
  droptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::droptime() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.dropTime)
  return droptime_;
}
inline void RoundItemInfo::set_droptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  droptime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.dropTime)
}

// optional int64 ownerTeamId = 9;
inline bool RoundItemInfo::has_ownerteamid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundItemInfo::clear_ownerteamid() {
  ownerteamid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::ownerteamid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.ownerTeamId)
  return ownerteamid_;
}
inline void RoundItemInfo::set_ownerteamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  ownerteamid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.ownerTeamId)
}

// optional int64 dropFrom = 10;
inline bool RoundItemInfo::has_dropfrom() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundItemInfo::clear_dropfrom() {
  dropfrom_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::dropfrom() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.dropFrom)
  return dropfrom_;
}
inline void RoundItemInfo::set_dropfrom(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  dropfrom_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.dropFrom)
}

// optional int64 totalTime = 11;
inline bool RoundItemInfo::has_totaltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundItemInfo::clear_totaltime() {
  totaltime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundItemInfo::totaltime() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundItemInfo.totalTime)
  return totaltime_;
}
inline void RoundItemInfo::set_totaltime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundItemInfo.totalTime)
}

// -------------------------------------------------------------------

// NoticeBean

// optional int32 updateType = 1;
inline bool NoticeBean::has_updatetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeBean::clear_updatetype() {
  updatetype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NoticeBean::updatetype() const {
  // @@protoc_insertion_point(field_get:mapV2.NoticeBean.updateType)
  return updatetype_;
}
inline void NoticeBean::set_updatetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:mapV2.NoticeBean.updateType)
}

// optional int64 updateValue = 2;
inline bool NoticeBean::has_updatevalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeBean::clear_updatevalue() {
  updatevalue_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NoticeBean::updatevalue() const {
  // @@protoc_insertion_point(field_get:mapV2.NoticeBean.updateValue)
  return updatevalue_;
}
inline void NoticeBean::set_updatevalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  updatevalue_ = value;
  // @@protoc_insertion_point(field_set:mapV2.NoticeBean.updateValue)
}

// -------------------------------------------------------------------

// RoundEventInfo

// optional int64 lid = 1;
inline bool RoundEventInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundEventInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundEventInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundEventInfo.lid)
  return lid_;
}
inline void RoundEventInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundEventInfo.lid)
}

// optional int64 eventId = 2;
inline bool RoundEventInfo::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundEventInfo::clear_eventid() {
  eventid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundEventInfo::eventid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundEventInfo.eventId)
  return eventid_;
}
inline void RoundEventInfo::set_eventid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundEventInfo.eventId)
}

// optional float x = 3;
inline bool RoundEventInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundEventInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RoundEventInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundEventInfo.x)
  return x_;
}
inline void RoundEventInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundEventInfo.x)
}

// optional float y = 4;
inline bool RoundEventInfo::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundEventInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundEventInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundEventInfo.y)
  return y_;
}
inline void RoundEventInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundEventInfo.y)
}

// optional float z = 5;
inline bool RoundEventInfo::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundEventInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundEventInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundEventInfo.z)
  return z_;
}
inline void RoundEventInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundEventInfo.z)
}

// -------------------------------------------------------------------

// RoundBufferInfo

// optional int64 lid = 1;
inline bool RoundBufferInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundBufferInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundBufferInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.lid)
  return lid_;
}
inline void RoundBufferInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.lid)
}

// optional int32 bufferId = 2;
inline bool RoundBufferInfo::has_bufferid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundBufferInfo::clear_bufferid() {
  bufferid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundBufferInfo::bufferid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.bufferId)
  return bufferid_;
}
inline void RoundBufferInfo::set_bufferid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bufferid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.bufferId)
}

// optional float x = 3;
inline bool RoundBufferInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundBufferInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RoundBufferInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.x)
  return x_;
}
inline void RoundBufferInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.x)
}

// optional float y = 4;
inline bool RoundBufferInfo::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundBufferInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundBufferInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.y)
  return y_;
}
inline void RoundBufferInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.y)
}

// optional float z = 5;
inline bool RoundBufferInfo::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundBufferInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundBufferInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.z)
  return z_;
}
inline void RoundBufferInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.z)
}

// optional bool isCenterPoint = 6;
inline bool RoundBufferInfo::has_iscenterpoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundBufferInfo::clear_iscenterpoint() {
  iscenterpoint_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RoundBufferInfo::iscenterpoint() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundBufferInfo.isCenterPoint)
  return iscenterpoint_;
}
inline void RoundBufferInfo::set_iscenterpoint(bool value) {
  _has_bits_[0] |= 0x00000020u;
  iscenterpoint_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundBufferInfo.isCenterPoint)
}

// -------------------------------------------------------------------

// RoundPlayerInfo

// optional int64 lid = 1;
inline bool RoundPlayerInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundPlayerInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.lid)
  return lid_;
}
inline void RoundPlayerInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.lid)
}

// optional float x = 2;
inline bool RoundPlayerInfo::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundPlayerInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundPlayerInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.x)
  return x_;
}
inline void RoundPlayerInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.x)
}

// optional float y = 3;
inline bool RoundPlayerInfo::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundPlayerInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundPlayerInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.y)
  return y_;
}
inline void RoundPlayerInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.y)
}

// optional float z = 4;
inline bool RoundPlayerInfo::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundPlayerInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RoundPlayerInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.z)
  return z_;
}
inline void RoundPlayerInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.z)
}

// optional float dir = 5;
inline bool RoundPlayerInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundPlayerInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RoundPlayerInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.dir)
  return dir_;
}
inline void RoundPlayerInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000040u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.dir)
}

// optional string name = 6;
inline bool RoundPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoundPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.name)
  return name_.GetNoArena();
}
inline void RoundPlayerInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.name)
}
inline void RoundPlayerInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundPlayerInfo.name)
}
inline void RoundPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundPlayerInfo.name)
}
inline void RoundPlayerInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundPlayerInfo.name)
}
inline std::string* RoundPlayerInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundPlayerInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.RoundPlayerInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundPlayerInfo.name)
}

// optional int32 level = 7;
inline bool RoundPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundPlayerInfo::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.level)
  return level_;
}
inline void RoundPlayerInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  level_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.level)
}

// optional int32 career = 8;
inline bool RoundPlayerInfo::has_career() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundPlayerInfo::clear_career() {
  career_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::career() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.career)
  return career_;
}
inline void RoundPlayerInfo::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  career_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.career)
}

// optional int32 sex = 9;
inline bool RoundPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoundPlayerInfo::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::sex() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.sex)
  return sex_;
}
inline void RoundPlayerInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.sex)
}

// optional int64 hp = 10;
inline bool RoundPlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundPlayerInfo::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.hp)
  return hp_;
}
inline void RoundPlayerInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.hp)
}

// optional int64 maxHp = 11;
inline bool RoundPlayerInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoundPlayerInfo::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.maxHp)
  return maxhp_;
}
inline void RoundPlayerInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.maxHp)
}

// optional int32 inner = 12;
inline bool RoundPlayerInfo::has_inner() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoundPlayerInfo::clear_inner() {
  inner_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::inner() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.inner)
  return inner_;
}
inline void RoundPlayerInfo::set_inner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  inner_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.inner)
}

// optional int32 innerMax = 13;
inline bool RoundPlayerInfo::has_innermax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoundPlayerInfo::clear_innermax() {
  innermax_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::innermax() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.innerMax)
  return innermax_;
}
inline void RoundPlayerInfo::set_innermax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  innermax_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.innerMax)
}

// optional int64 teamId = 14;
inline bool RoundPlayerInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoundPlayerInfo::clear_teamid() {
  teamid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::teamid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.teamId)
  return teamid_;
}
inline void RoundPlayerInfo::set_teamid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  teamid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.teamId)
}

// optional int32 master = 15;
inline bool RoundPlayerInfo::has_master() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoundPlayerInfo::clear_master() {
  master_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::master() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.master)
  return master_;
}
inline void RoundPlayerInfo::set_master(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  master_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.master)
}

// repeated .mapV2.PerformerEquipBean equipBean = 16;
inline int RoundPlayerInfo::equipbean_size() const {
  return equipbean_.size();
}
inline void RoundPlayerInfo::clear_equipbean() {
  equipbean_.Clear();
}
inline ::mapV2::PerformerEquipBean* RoundPlayerInfo::mutable_equipbean(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.RoundPlayerInfo.equipBean)
  return equipbean_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::PerformerEquipBean >*
RoundPlayerInfo::mutable_equipbean() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.RoundPlayerInfo.equipBean)
  return &equipbean_;
}
inline const ::mapV2::PerformerEquipBean& RoundPlayerInfo::equipbean(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.equipBean)
  return equipbean_.Get(index);
}
inline ::mapV2::PerformerEquipBean* RoundPlayerInfo::add_equipbean() {
  // @@protoc_insertion_point(field_add:mapV2.RoundPlayerInfo.equipBean)
  return equipbean_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::PerformerEquipBean >&
RoundPlayerInfo::equipbean() const {
  // @@protoc_insertion_point(field_list:mapV2.RoundPlayerInfo.equipBean)
  return equipbean_;
}

// optional int32 wing = 18;
inline bool RoundPlayerInfo::has_wing() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoundPlayerInfo::clear_wing() {
  wing_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::wing() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.wing)
  return wing_;
}
inline void RoundPlayerInfo::set_wing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  wing_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.wing)
}

// optional int64 rid = 19;
inline bool RoundPlayerInfo::has_rid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoundPlayerInfo::clear_rid() {
  rid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::rid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.rid)
  return rid_;
}
inline void RoundPlayerInfo::set_rid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  rid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.rid)
}

// optional int64 unionId = 20;
inline bool RoundPlayerInfo::has_unionid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoundPlayerInfo::clear_unionid() {
  unionid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::unionid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.unionId)
  return unionid_;
}
inline void RoundPlayerInfo::set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  unionid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.unionId)
}

// optional string unionName = 21;
inline bool RoundPlayerInfo::has_unionname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundPlayerInfo::clear_unionname() {
  unionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoundPlayerInfo::unionname() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.unionName)
  return unionname_.GetNoArena();
}
inline void RoundPlayerInfo::set_unionname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.unionName)
}
inline void RoundPlayerInfo::set_unionname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundPlayerInfo.unionName)
}
inline void RoundPlayerInfo::set_unionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundPlayerInfo.unionName)
}
inline void RoundPlayerInfo::set_unionname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundPlayerInfo.unionName)
}
inline std::string* RoundPlayerInfo::mutable_unionname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundPlayerInfo.unionName)
  return unionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundPlayerInfo::release_unionname() {
  // @@protoc_insertion_point(field_release:mapV2.RoundPlayerInfo.unionName)
  if (!has_unionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unionname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundPlayerInfo::set_allocated_unionname(std::string* unionname) {
  if (unionname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unionname);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundPlayerInfo.unionName)
}

// optional int32 titleId = 22;
inline bool RoundPlayerInfo::has_titleid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoundPlayerInfo::clear_titleid() {
  titleid_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::titleid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.titleId)
  return titleid_;
}
inline void RoundPlayerInfo::set_titleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  titleid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.titleId)
}

// optional int32 nbValue = 23;
inline bool RoundPlayerInfo::has_nbvalue() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoundPlayerInfo::clear_nbvalue() {
  nbvalue_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::nbvalue() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.nbValue)
  return nbvalue_;
}
inline void RoundPlayerInfo::set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  nbvalue_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.nbValue)
}

// optional int32 power = 24;
inline bool RoundPlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoundPlayerInfo::clear_power() {
  power_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::power() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.power)
  return power_;
}
inline void RoundPlayerInfo::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  power_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.power)
}

// optional int64 mp = 25;
inline bool RoundPlayerInfo::has_mp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoundPlayerInfo::clear_mp() {
  mp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::mp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.mp)
  return mp_;
}
inline void RoundPlayerInfo::set_mp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  mp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.mp)
}

// optional int64 maxMp = 26;
inline bool RoundPlayerInfo::has_maxmp() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoundPlayerInfo::clear_maxmp() {
  maxmp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPlayerInfo::maxmp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.maxMp)
  return maxmp_;
}
inline void RoundPlayerInfo::set_maxmp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00800000u;
  maxmp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.maxMp)
}

// optional int32 nbValueMax = 27;
inline bool RoundPlayerInfo::has_nbvaluemax() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoundPlayerInfo::clear_nbvaluemax() {
  nbvaluemax_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::nbvaluemax() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.nbValueMax)
  return nbvaluemax_;
}
inline void RoundPlayerInfo::set_nbvaluemax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  nbvaluemax_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.nbValueMax)
}

// optional int32 boxTime = 28;
inline bool RoundPlayerInfo::has_boxtime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoundPlayerInfo::clear_boxtime() {
  boxtime_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::boxtime() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.boxTime)
  return boxtime_;
}
inline void RoundPlayerInfo::set_boxtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  boxtime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.boxTime)
}

// optional int32 tokenCount = 29;
inline bool RoundPlayerInfo::has_tokencount() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoundPlayerInfo::clear_tokencount() {
  tokencount_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::tokencount() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.tokenCount)
  return tokencount_;
}
inline void RoundPlayerInfo::set_tokencount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  tokencount_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.tokenCount)
}

// optional int32 tokenCountId = 30;
inline bool RoundPlayerInfo::has_tokencountid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RoundPlayerInfo::clear_tokencountid() {
  tokencountid_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::tokencountid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.tokenCountId)
  return tokencountid_;
}
inline void RoundPlayerInfo::set_tokencountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  tokencountid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.tokenCountId)
}

// optional int32 thisJunXianId = 32;
inline bool RoundPlayerInfo::has_thisjunxianid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RoundPlayerInfo::clear_thisjunxianid() {
  thisjunxianid_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPlayerInfo::thisjunxianid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPlayerInfo.thisJunXianId)
  return thisjunxianid_;
}
inline void RoundPlayerInfo::set_thisjunxianid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  thisjunxianid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPlayerInfo.thisJunXianId)
}

// -------------------------------------------------------------------

// RoundMonsterInfo

// optional int64 lid = 1;
inline bool RoundMonsterInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundMonsterInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.lid)
  return lid_;
}
inline void RoundMonsterInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.lid)
}

// optional int32 mid = 2;
inline bool RoundMonsterInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundMonsterInfo::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundMonsterInfo::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.mid)
  return mid_;
}
inline void RoundMonsterInfo::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.mid)
}

// optional float x = 3;
inline bool RoundMonsterInfo::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundMonsterInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundMonsterInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.x)
  return x_;
}
inline void RoundMonsterInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.x)
}

// optional float y = 4;
inline bool RoundMonsterInfo::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundMonsterInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundMonsterInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.y)
  return y_;
}
inline void RoundMonsterInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.y)
}

// optional float z = 5;
inline bool RoundMonsterInfo::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundMonsterInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RoundMonsterInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.z)
  return z_;
}
inline void RoundMonsterInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.z)
}

// optional float dir = 6;
inline bool RoundMonsterInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundMonsterInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RoundMonsterInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.dir)
  return dir_;
}
inline void RoundMonsterInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000100u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.dir)
}

// optional int64 hp = 7;
inline bool RoundMonsterInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundMonsterInfo::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.hp)
  return hp_;
}
inline void RoundMonsterInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.hp)
}

// optional int64 maxHp = 8;
inline bool RoundMonsterInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundMonsterInfo::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.maxHp)
  return maxhp_;
}
inline void RoundMonsterInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.maxHp)
}

// optional string name = 9;
inline bool RoundMonsterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundMonsterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoundMonsterInfo::name() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.name)
  return name_.GetNoArena();
}
inline void RoundMonsterInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.name)
}
inline void RoundMonsterInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundMonsterInfo.name)
}
inline void RoundMonsterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundMonsterInfo.name)
}
inline void RoundMonsterInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundMonsterInfo.name)
}
inline std::string* RoundMonsterInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundMonsterInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundMonsterInfo::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.RoundMonsterInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundMonsterInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundMonsterInfo.name)
}

// optional int32 level = 10;
inline bool RoundMonsterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundMonsterInfo::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.level)
  return level_;
}
inline void RoundMonsterInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  level_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.level)
}

// optional int64 endAnimation = 12;
inline bool RoundMonsterInfo::has_endanimation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoundMonsterInfo::clear_endanimation() {
  endanimation_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::endanimation() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.endAnimation)
  return endanimation_;
}
inline void RoundMonsterInfo::set_endanimation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  endanimation_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.endAnimation)
}

// optional int64 deathTime = 13;
inline bool RoundMonsterInfo::has_deathtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoundMonsterInfo::clear_deathtime() {
  deathtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::deathtime() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.deathTime)
  return deathtime_;
}
inline void RoundMonsterInfo::set_deathtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  deathtime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.deathTime)
}

// optional int64 killId = 14;
inline bool RoundMonsterInfo::has_killid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoundMonsterInfo::clear_killid() {
  killid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundMonsterInfo::killid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundMonsterInfo.killId)
  return killid_;
}
inline void RoundMonsterInfo::set_killid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  killid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundMonsterInfo.killId)
}

// -------------------------------------------------------------------

// RoundNpcInfo

// optional int64 lid = 1;
inline bool RoundNpcInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundNpcInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundNpcInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.lid)
  return lid_;
}
inline void RoundNpcInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.lid)
}

// optional int32 nid = 2;
inline bool RoundNpcInfo::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundNpcInfo::clear_nid() {
  nid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundNpcInfo::nid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.nid)
  return nid_;
}
inline void RoundNpcInfo::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.nid)
}

// optional int32 mapNpcId = 3;
inline bool RoundNpcInfo::has_mapnpcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundNpcInfo::clear_mapnpcid() {
  mapnpcid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundNpcInfo::mapnpcid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.mapNpcId)
  return mapnpcid_;
}
inline void RoundNpcInfo::set_mapnpcid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mapnpcid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.mapNpcId)
}

// optional float x = 4;
inline bool RoundNpcInfo::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundNpcInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundNpcInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.x)
  return x_;
}
inline void RoundNpcInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.x)
}

// optional float y = 5;
inline bool RoundNpcInfo::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundNpcInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundNpcInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.y)
  return y_;
}
inline void RoundNpcInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.y)
}

// optional float z = 6;
inline bool RoundNpcInfo::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundNpcInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RoundNpcInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.z)
  return z_;
}
inline void RoundNpcInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.z)
}

// optional float dir = 7;
inline bool RoundNpcInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundNpcInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RoundNpcInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundNpcInfo.dir)
  return dir_;
}
inline void RoundNpcInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000040u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundNpcInfo.dir)
}

// -------------------------------------------------------------------

// RoundPetInfo

// optional int64 lid = 1;
inline bool RoundPetInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundPetInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPetInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.lid)
  return lid_;
}
inline void RoundPetInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.lid)
}

// optional int64 masterId = 2;
inline bool RoundPetInfo::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundPetInfo::clear_masterid() {
  masterid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPetInfo::masterid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.masterId)
  return masterid_;
}
inline void RoundPetInfo::set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  masterid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.masterId)
}

// optional string name = 3;
inline bool RoundPetInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundPetInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoundPetInfo::name() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.name)
  return name_.GetNoArena();
}
inline void RoundPetInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.name)
}
inline void RoundPetInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundPetInfo.name)
}
inline void RoundPetInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundPetInfo.name)
}
inline void RoundPetInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundPetInfo.name)
}
inline std::string* RoundPetInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundPetInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundPetInfo::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.RoundPetInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundPetInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundPetInfo.name)
}

// optional int32 mid = 4;
inline bool RoundPetInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundPetInfo::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundPetInfo::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.mid)
  return mid_;
}
inline void RoundPetInfo::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.mid)
}

// optional float x = 5;
inline bool RoundPetInfo::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundPetInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundPetInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.x)
  return x_;
}
inline void RoundPetInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.x)
}

// optional float y = 6;
inline bool RoundPetInfo::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundPetInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RoundPetInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.y)
  return y_;
}
inline void RoundPetInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.y)
}

// optional float z = 7;
inline bool RoundPetInfo::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundPetInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RoundPetInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.z)
  return z_;
}
inline void RoundPetInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000040u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.z)
}

// optional float dir = 8;
inline bool RoundPetInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundPetInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float RoundPetInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.dir)
  return dir_;
}
inline void RoundPetInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000200u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.dir)
}

// optional int64 hp = 9;
inline bool RoundPetInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundPetInfo::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPetInfo::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.hp)
  return hp_;
}
inline void RoundPetInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.hp)
}

// optional int64 maxHp = 10;
inline bool RoundPetInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundPetInfo::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundPetInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundPetInfo.maxHp)
  return maxhp_;
}
inline void RoundPetInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundPetInfo.maxHp)
}

// -------------------------------------------------------------------

// RoundHeroInfo

// optional int64 lid = 1;
inline bool RoundHeroInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundHeroInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundHeroInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.lid)
  return lid_;
}
inline void RoundHeroInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.lid)
}

// optional int64 masterId = 2;
inline bool RoundHeroInfo::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundHeroInfo::clear_masterid() {
  masterid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundHeroInfo::masterid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.masterId)
  return masterid_;
}
inline void RoundHeroInfo::set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  masterid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.masterId)
}

// optional string name = 3;
inline bool RoundHeroInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundHeroInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoundHeroInfo::name() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.name)
  return name_.GetNoArena();
}
inline void RoundHeroInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.name)
}
inline void RoundHeroInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundHeroInfo.name)
}
inline void RoundHeroInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundHeroInfo.name)
}
inline void RoundHeroInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundHeroInfo.name)
}
inline std::string* RoundHeroInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundHeroInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundHeroInfo::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.RoundHeroInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundHeroInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundHeroInfo.name)
}

// optional int32 career = 4;
inline bool RoundHeroInfo::has_career() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundHeroInfo::clear_career() {
  career_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::career() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.career)
  return career_;
}
inline void RoundHeroInfo::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  career_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.career)
}

// optional int32 sex = 5;
inline bool RoundHeroInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundHeroInfo::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::sex() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.sex)
  return sex_;
}
inline void RoundHeroInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.sex)
}

// optional int32 mid = 6;
inline bool RoundHeroInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundHeroInfo::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.mid)
  return mid_;
}
inline void RoundHeroInfo::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.mid)
}

// optional float x = 7;
inline bool RoundHeroInfo::has_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundHeroInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RoundHeroInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.x)
  return x_;
}
inline void RoundHeroInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000040u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.x)
}

// optional float y = 8;
inline bool RoundHeroInfo::has_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundHeroInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float RoundHeroInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.y)
  return y_;
}
inline void RoundHeroInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000080u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.y)
}

// optional float z = 9;
inline bool RoundHeroInfo::has_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundHeroInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RoundHeroInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.z)
  return z_;
}
inline void RoundHeroInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000100u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.z)
}

// optional float dir = 10;
inline bool RoundHeroInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoundHeroInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RoundHeroInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.dir)
  return dir_;
}
inline void RoundHeroInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000400u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.dir)
}

// optional int64 hp = 11;
inline bool RoundHeroInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundHeroInfo::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundHeroInfo::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.hp)
  return hp_;
}
inline void RoundHeroInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.hp)
}

// optional int64 maxHp = 12;
inline bool RoundHeroInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoundHeroInfo::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundHeroInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.maxHp)
  return maxhp_;
}
inline void RoundHeroInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.maxHp)
}

// optional int32 inner = 13;
inline bool RoundHeroInfo::has_inner() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoundHeroInfo::clear_inner() {
  inner_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::inner() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.inner)
  return inner_;
}
inline void RoundHeroInfo::set_inner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  inner_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.inner)
}

// optional int32 innerMax = 14;
inline bool RoundHeroInfo::has_innermax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoundHeroInfo::clear_innermax() {
  innermax_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::innermax() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.innerMax)
  return innermax_;
}
inline void RoundHeroInfo::set_innermax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  innermax_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.innerMax)
}

// optional int32 maBiRate = 15;
inline bool RoundHeroInfo::has_mabirate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoundHeroInfo::clear_mabirate() {
  mabirate_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundHeroInfo::mabirate() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundHeroInfo.maBiRate)
  return mabirate_;
}
inline void RoundHeroInfo::set_mabirate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  mabirate_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundHeroInfo.maBiRate)
}

// -------------------------------------------------------------------

// RoundServantInfo

// optional int64 id = 1;
inline bool RoundServantInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundServantInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundServantInfo::id() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.id)
  return id_;
}
inline void RoundServantInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.id)
}

// optional int64 masterId = 2;
inline bool RoundServantInfo::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundServantInfo::clear_masterid() {
  masterid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundServantInfo::masterid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.masterId)
  return masterid_;
}
inline void RoundServantInfo::set_masterid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  masterid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.masterId)
}

// optional string name = 3;
inline bool RoundServantInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundServantInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoundServantInfo::name() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.name)
  return name_.GetNoArena();
}
inline void RoundServantInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.name)
}
inline void RoundServantInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.RoundServantInfo.name)
}
inline void RoundServantInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.RoundServantInfo.name)
}
inline void RoundServantInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.RoundServantInfo.name)
}
inline std::string* RoundServantInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.RoundServantInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoundServantInfo::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.RoundServantInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoundServantInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.RoundServantInfo.name)
}

// optional int32 career = 4;
inline bool RoundServantInfo::has_career() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundServantInfo::clear_career() {
  career_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundServantInfo::career() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.career)
  return career_;
}
inline void RoundServantInfo::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  career_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.career)
}

// optional int32 sex = 5;
inline bool RoundServantInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundServantInfo::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundServantInfo::sex() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.sex)
  return sex_;
}
inline void RoundServantInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.sex)
}

// optional int32 mid = 6;
inline bool RoundServantInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundServantInfo::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundServantInfo::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.mid)
  return mid_;
}
inline void RoundServantInfo::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.mid)
}

// optional float x = 7;
inline bool RoundServantInfo::has_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoundServantInfo::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float RoundServantInfo::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.x)
  return x_;
}
inline void RoundServantInfo::set_x(float value) {
  _has_bits_[0] |= 0x00000040u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.x)
}

// optional float y = 8;
inline bool RoundServantInfo::has_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoundServantInfo::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float RoundServantInfo::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.y)
  return y_;
}
inline void RoundServantInfo::set_y(float value) {
  _has_bits_[0] |= 0x00000080u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.y)
}

// optional float z = 9;
inline bool RoundServantInfo::has_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoundServantInfo::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float RoundServantInfo::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.z)
  return z_;
}
inline void RoundServantInfo::set_z(float value) {
  _has_bits_[0] |= 0x00000100u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.z)
}

// optional float dir = 10;
inline bool RoundServantInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoundServantInfo::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float RoundServantInfo::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.dir)
  return dir_;
}
inline void RoundServantInfo::set_dir(float value) {
  _has_bits_[0] |= 0x00000400u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.dir)
}

// optional int64 hp = 11;
inline bool RoundServantInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoundServantInfo::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundServantInfo::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.hp)
  return hp_;
}
inline void RoundServantInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.hp)
}

// optional int64 maxHp = 12;
inline bool RoundServantInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoundServantInfo::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundServantInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.maxHp)
  return maxhp_;
}
inline void RoundServantInfo::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.maxHp)
}

// optional int32 level = 13;
inline bool RoundServantInfo::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoundServantInfo::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundServantInfo::level() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundServantInfo.level)
  return level_;
}
inline void RoundServantInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  level_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundServantInfo.level)
}

// -------------------------------------------------------------------

// RoundCollectPoint

// optional int64 id = 1;
inline bool RoundCollectPoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundCollectPoint::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoundCollectPoint::id() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.id)
  return id_;
}
inline void RoundCollectPoint::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.id)
}

// optional int32 type = 2;
inline bool RoundCollectPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundCollectPoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundCollectPoint::type() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.type)
  return type_;
}
inline void RoundCollectPoint::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.type)
}

// optional float x = 3;
inline bool RoundCollectPoint::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoundCollectPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RoundCollectPoint::x() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.x)
  return x_;
}
inline void RoundCollectPoint::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.x)
}

// optional float y = 4;
inline bool RoundCollectPoint::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoundCollectPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RoundCollectPoint::y() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.y)
  return y_;
}
inline void RoundCollectPoint::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.y)
}

// optional float z = 5;
inline bool RoundCollectPoint::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoundCollectPoint::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RoundCollectPoint::z() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.z)
  return z_;
}
inline void RoundCollectPoint::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.z)
}

// optional int32 configId = 6;
inline bool RoundCollectPoint::has_configid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoundCollectPoint::clear_configid() {
  configid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoundCollectPoint::configid() const {
  // @@protoc_insertion_point(field_get:mapV2.RoundCollectPoint.configId)
  return configid_;
}
inline void RoundCollectPoint::set_configid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  configid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.RoundCollectPoint.configId)
}

// -------------------------------------------------------------------

// MapBoss

// optional int64 bossId = 1;
inline bool MapBoss::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapBoss::clear_bossid() {
  bossid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapBoss::bossid() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.bossId)
  return bossid_;
}
inline void MapBoss::set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bossid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.bossId)
}

// optional int32 mid = 2;
inline bool MapBoss::has_mid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapBoss::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapBoss::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.mid)
  return mid_;
}
inline void MapBoss::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.mid)
}

// optional int64 bossHp = 3;
inline bool MapBoss::has_bosshp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapBoss::clear_bosshp() {
  bosshp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapBoss::bosshp() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.bossHp)
  return bosshp_;
}
inline void MapBoss::set_bosshp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  bosshp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.bossHp)
}

// optional float x = 4;
inline bool MapBoss::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapBoss::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MapBoss::x() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.x)
  return x_;
}
inline void MapBoss::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.x)
}

// optional float y = 5;
inline bool MapBoss::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapBoss::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MapBoss::y() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.y)
  return y_;
}
inline void MapBoss::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.y)
}

// optional float z = 6;
inline bool MapBoss::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapBoss::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MapBoss::z() const {
  // @@protoc_insertion_point(field_get:mapV2.MapBoss.z)
  return z_;
}
inline void MapBoss::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MapBoss.z)
}

// -------------------------------------------------------------------

// MonsterTomb

// optional int64 lid = 1;
inline bool MonsterTomb::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterTomb::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MonsterTomb::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.lid)
  return lid_;
}
inline void MonsterTomb::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.lid)
}

// optional int32 mid = 2;
inline bool MonsterTomb::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterTomb::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterTomb::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.mid)
  return mid_;
}
inline void MonsterTomb::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.mid)
}

// optional float x = 3;
inline bool MonsterTomb::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterTomb::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MonsterTomb::x() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.x)
  return x_;
}
inline void MonsterTomb::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.x)
}

// optional float y = 4;
inline bool MonsterTomb::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterTomb::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MonsterTomb::y() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.y)
  return y_;
}
inline void MonsterTomb::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.y)
}

// optional float z = 5;
inline bool MonsterTomb::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterTomb::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MonsterTomb::z() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.z)
  return z_;
}
inline void MonsterTomb::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.z)
}

// optional int32 nextReliveTime = 6;
inline bool MonsterTomb::has_nextrelivetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterTomb::clear_nextrelivetime() {
  nextrelivetime_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MonsterTomb::nextrelivetime() const {
  // @@protoc_insertion_point(field_get:mapV2.MonsterTomb.nextReliveTime)
  return nextrelivetime_;
}
inline void MonsterTomb::set_nextrelivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  nextrelivetime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.MonsterTomb.nextReliveTime)
}

// -------------------------------------------------------------------

// ResUpdateView

// repeated .mapV2.RoundPlayerInfo addPlayers = 1;
inline int ResUpdateView::addplayers_size() const {
  return addplayers_.size();
}
inline void ResUpdateView::clear_addplayers() {
  addplayers_.Clear();
}
inline ::mapV2::RoundPlayerInfo* ResUpdateView::mutable_addplayers(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addPlayers)
  return addplayers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPlayerInfo >*
ResUpdateView::mutable_addplayers() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addPlayers)
  return &addplayers_;
}
inline const ::mapV2::RoundPlayerInfo& ResUpdateView::addplayers(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addPlayers)
  return addplayers_.Get(index);
}
inline ::mapV2::RoundPlayerInfo* ResUpdateView::add_addplayers() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addPlayers)
  return addplayers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPlayerInfo >&
ResUpdateView::addplayers() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addPlayers)
  return addplayers_;
}

// repeated .mapV2.RoundMonsterInfo addMonsters = 2;
inline int ResUpdateView::addmonsters_size() const {
  return addmonsters_.size();
}
inline void ResUpdateView::clear_addmonsters() {
  addmonsters_.Clear();
}
inline ::mapV2::RoundMonsterInfo* ResUpdateView::mutable_addmonsters(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addMonsters)
  return addmonsters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundMonsterInfo >*
ResUpdateView::mutable_addmonsters() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addMonsters)
  return &addmonsters_;
}
inline const ::mapV2::RoundMonsterInfo& ResUpdateView::addmonsters(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addMonsters)
  return addmonsters_.Get(index);
}
inline ::mapV2::RoundMonsterInfo* ResUpdateView::add_addmonsters() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addMonsters)
  return addmonsters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundMonsterInfo >&
ResUpdateView::addmonsters() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addMonsters)
  return addmonsters_;
}

// repeated .mapV2.RoundNpcInfo addNpcs = 3;
inline int ResUpdateView::addnpcs_size() const {
  return addnpcs_.size();
}
inline void ResUpdateView::clear_addnpcs() {
  addnpcs_.Clear();
}
inline ::mapV2::RoundNpcInfo* ResUpdateView::mutable_addnpcs(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addNpcs)
  return addnpcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundNpcInfo >*
ResUpdateView::mutable_addnpcs() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addNpcs)
  return &addnpcs_;
}
inline const ::mapV2::RoundNpcInfo& ResUpdateView::addnpcs(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addNpcs)
  return addnpcs_.Get(index);
}
inline ::mapV2::RoundNpcInfo* ResUpdateView::add_addnpcs() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addNpcs)
  return addnpcs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundNpcInfo >&
ResUpdateView::addnpcs() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addNpcs)
  return addnpcs_;
}

// repeated .mapV2.RoundBufferInfo addBuffers = 4;
inline int ResUpdateView::addbuffers_size() const {
  return addbuffers_.size();
}
inline void ResUpdateView::clear_addbuffers() {
  addbuffers_.Clear();
}
inline ::mapV2::RoundBufferInfo* ResUpdateView::mutable_addbuffers(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addBuffers)
  return addbuffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundBufferInfo >*
ResUpdateView::mutable_addbuffers() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addBuffers)
  return &addbuffers_;
}
inline const ::mapV2::RoundBufferInfo& ResUpdateView::addbuffers(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addBuffers)
  return addbuffers_.Get(index);
}
inline ::mapV2::RoundBufferInfo* ResUpdateView::add_addbuffers() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addBuffers)
  return addbuffers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundBufferInfo >&
ResUpdateView::addbuffers() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addBuffers)
  return addbuffers_;
}

// repeated .mapV2.RoundPetInfo addPets = 5;
inline int ResUpdateView::addpets_size() const {
  return addpets_.size();
}
inline void ResUpdateView::clear_addpets() {
  addpets_.Clear();
}
inline ::mapV2::RoundPetInfo* ResUpdateView::mutable_addpets(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addPets)
  return addpets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPetInfo >*
ResUpdateView::mutable_addpets() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addPets)
  return &addpets_;
}
inline const ::mapV2::RoundPetInfo& ResUpdateView::addpets(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addPets)
  return addpets_.Get(index);
}
inline ::mapV2::RoundPetInfo* ResUpdateView::add_addpets() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addPets)
  return addpets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundPetInfo >&
ResUpdateView::addpets() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addPets)
  return addpets_;
}

// repeated .mapV2.RoundHeroInfo addHeros = 6;
inline int ResUpdateView::addheros_size() const {
  return addheros_.size();
}
inline void ResUpdateView::clear_addheros() {
  addheros_.Clear();
}
inline ::mapV2::RoundHeroInfo* ResUpdateView::mutable_addheros(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addHeros)
  return addheros_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundHeroInfo >*
ResUpdateView::mutable_addheros() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addHeros)
  return &addheros_;
}
inline const ::mapV2::RoundHeroInfo& ResUpdateView::addheros(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addHeros)
  return addheros_.Get(index);
}
inline ::mapV2::RoundHeroInfo* ResUpdateView::add_addheros() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addHeros)
  return addheros_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundHeroInfo >&
ResUpdateView::addheros() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addHeros)
  return addheros_;
}

// repeated .mapV2.RoundEventInfo addEvents = 7;
inline int ResUpdateView::addevents_size() const {
  return addevents_.size();
}
inline void ResUpdateView::clear_addevents() {
  addevents_.Clear();
}
inline ::mapV2::RoundEventInfo* ResUpdateView::mutable_addevents(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addEvents)
  return addevents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundEventInfo >*
ResUpdateView::mutable_addevents() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addEvents)
  return &addevents_;
}
inline const ::mapV2::RoundEventInfo& ResUpdateView::addevents(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addEvents)
  return addevents_.Get(index);
}
inline ::mapV2::RoundEventInfo* ResUpdateView::add_addevents() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addEvents)
  return addevents_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundEventInfo >&
ResUpdateView::addevents() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addEvents)
  return addevents_;
}

// repeated .mapV2.RoundItemInfo addItems = 8;
inline int ResUpdateView::additems_size() const {
  return additems_.size();
}
inline void ResUpdateView::clear_additems() {
  additems_.Clear();
}
inline ::mapV2::RoundItemInfo* ResUpdateView::mutable_additems(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addItems)
  return additems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundItemInfo >*
ResUpdateView::mutable_additems() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addItems)
  return &additems_;
}
inline const ::mapV2::RoundItemInfo& ResUpdateView::additems(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addItems)
  return additems_.Get(index);
}
inline ::mapV2::RoundItemInfo* ResUpdateView::add_additems() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addItems)
  return additems_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundItemInfo >&
ResUpdateView::additems() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addItems)
  return additems_;
}

// repeated int64 exitIdList = 9;
inline int ResUpdateView::exitidlist_size() const {
  return exitidlist_.size();
}
inline void ResUpdateView::clear_exitidlist() {
  exitidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResUpdateView::exitidlist(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.exitIdList)
  return exitidlist_.Get(index);
}
inline void ResUpdateView::set_exitidlist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  exitidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapV2.ResUpdateView.exitIdList)
}
inline void ResUpdateView::add_exitidlist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  exitidlist_.Add(value);
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.exitIdList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ResUpdateView::exitidlist() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.exitIdList)
  return exitidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ResUpdateView::mutable_exitidlist() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.exitIdList)
  return &exitidlist_;
}

// repeated .mapV2.RoundServantInfo addServants = 10;
inline int ResUpdateView::addservants_size() const {
  return addservants_.size();
}
inline void ResUpdateView::clear_addservants() {
  addservants_.Clear();
}
inline ::mapV2::RoundServantInfo* ResUpdateView::mutable_addservants(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.addServants)
  return addservants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundServantInfo >*
ResUpdateView::mutable_addservants() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.addServants)
  return &addservants_;
}
inline const ::mapV2::RoundServantInfo& ResUpdateView::addservants(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.addServants)
  return addservants_.Get(index);
}
inline ::mapV2::RoundServantInfo* ResUpdateView::add_addservants() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.addServants)
  return addservants_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundServantInfo >&
ResUpdateView::addservants() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.addServants)
  return addservants_;
}

// repeated .mapV2.RoundCollectPoint collectPoint = 11;
inline int ResUpdateView::collectpoint_size() const {
  return collectpoint_.size();
}
inline void ResUpdateView::clear_collectpoint() {
  collectpoint_.Clear();
}
inline ::mapV2::RoundCollectPoint* ResUpdateView::mutable_collectpoint(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateView.collectPoint)
  return collectpoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundCollectPoint >*
ResUpdateView::mutable_collectpoint() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResUpdateView.collectPoint)
  return &collectpoint_;
}
inline const ::mapV2::RoundCollectPoint& ResUpdateView::collectpoint(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateView.collectPoint)
  return collectpoint_.Get(index);
}
inline ::mapV2::RoundCollectPoint* ResUpdateView::add_collectpoint() {
  // @@protoc_insertion_point(field_add:mapV2.ResUpdateView.collectPoint)
  return collectpoint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::RoundCollectPoint >&
ResUpdateView::collectpoint() const {
  // @@protoc_insertion_point(field_list:mapV2.ResUpdateView.collectPoint)
  return collectpoint_;
}

// -------------------------------------------------------------------

// ResPlayerEnterView

// required .mapV2.RoundPlayerInfo player = 1;
inline bool ResPlayerEnterView::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerEnterView::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundPlayerInfo& ResPlayerEnterView::player() const {
  const ::mapV2::RoundPlayerInfo* p = player_;
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterView.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundPlayerInfo*>(
      &::mapV2::_RoundPlayerInfo_default_instance_);
}
inline ::mapV2::RoundPlayerInfo* ResPlayerEnterView::release_player() {
  // @@protoc_insertion_point(field_release:mapV2.ResPlayerEnterView.player)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundPlayerInfo* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::mapV2::RoundPlayerInfo* ResPlayerEnterView::mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundPlayerInfo>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResPlayerEnterView.player)
  return player_;
}
inline void ResPlayerEnterView::set_allocated_player(::mapV2::RoundPlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResPlayerEnterView.player)
}

// -------------------------------------------------------------------

// ResCollectEnterView

// required .mapV2.RoundCollectPoint collect = 1;
inline bool ResCollectEnterView::has_collect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCollectEnterView::clear_collect() {
  if (collect_ != nullptr) collect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundCollectPoint& ResCollectEnterView::collect() const {
  const ::mapV2::RoundCollectPoint* p = collect_;
  // @@protoc_insertion_point(field_get:mapV2.ResCollectEnterView.collect)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundCollectPoint*>(
      &::mapV2::_RoundCollectPoint_default_instance_);
}
inline ::mapV2::RoundCollectPoint* ResCollectEnterView::release_collect() {
  // @@protoc_insertion_point(field_release:mapV2.ResCollectEnterView.collect)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundCollectPoint* temp = collect_;
  collect_ = nullptr;
  return temp;
}
inline ::mapV2::RoundCollectPoint* ResCollectEnterView::mutable_collect() {
  _has_bits_[0] |= 0x00000001u;
  if (collect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundCollectPoint>(GetArenaNoVirtual());
    collect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResCollectEnterView.collect)
  return collect_;
}
inline void ResCollectEnterView::set_allocated_collect(::mapV2::RoundCollectPoint* collect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collect_;
  }
  if (collect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collect_ = collect;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResCollectEnterView.collect)
}

// -------------------------------------------------------------------

// ResBufferEnterView

// required .mapV2.RoundBufferInfo buffer = 1;
inline bool ResBufferEnterView::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResBufferEnterView::clear_buffer() {
  if (buffer_ != nullptr) buffer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundBufferInfo& ResBufferEnterView::buffer() const {
  const ::mapV2::RoundBufferInfo* p = buffer_;
  // @@protoc_insertion_point(field_get:mapV2.ResBufferEnterView.buffer)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundBufferInfo*>(
      &::mapV2::_RoundBufferInfo_default_instance_);
}
inline ::mapV2::RoundBufferInfo* ResBufferEnterView::release_buffer() {
  // @@protoc_insertion_point(field_release:mapV2.ResBufferEnterView.buffer)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundBufferInfo* temp = buffer_;
  buffer_ = nullptr;
  return temp;
}
inline ::mapV2::RoundBufferInfo* ResBufferEnterView::mutable_buffer() {
  _has_bits_[0] |= 0x00000001u;
  if (buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundBufferInfo>(GetArenaNoVirtual());
    buffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResBufferEnterView.buffer)
  return buffer_;
}
inline void ResBufferEnterView::set_allocated_buffer(::mapV2::RoundBufferInfo* buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buffer_;
  }
  if (buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_ = buffer;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResBufferEnterView.buffer)
}

// -------------------------------------------------------------------

// ResMonsterEnterView

// required .mapV2.RoundMonsterInfo monster = 1;
inline bool ResMonsterEnterView::has_monster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResMonsterEnterView::clear_monster() {
  if (monster_ != nullptr) monster_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundMonsterInfo& ResMonsterEnterView::monster() const {
  const ::mapV2::RoundMonsterInfo* p = monster_;
  // @@protoc_insertion_point(field_get:mapV2.ResMonsterEnterView.monster)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundMonsterInfo*>(
      &::mapV2::_RoundMonsterInfo_default_instance_);
}
inline ::mapV2::RoundMonsterInfo* ResMonsterEnterView::release_monster() {
  // @@protoc_insertion_point(field_release:mapV2.ResMonsterEnterView.monster)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundMonsterInfo* temp = monster_;
  monster_ = nullptr;
  return temp;
}
inline ::mapV2::RoundMonsterInfo* ResMonsterEnterView::mutable_monster() {
  _has_bits_[0] |= 0x00000001u;
  if (monster_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundMonsterInfo>(GetArenaNoVirtual());
    monster_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResMonsterEnterView.monster)
  return monster_;
}
inline void ResMonsterEnterView::set_allocated_monster(::mapV2::RoundMonsterInfo* monster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete monster_;
  }
  if (monster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      monster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  monster_ = monster;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResMonsterEnterView.monster)
}

// -------------------------------------------------------------------

// ResNpcEnterView

// required .mapV2.RoundNpcInfo npc = 1;
inline bool ResNpcEnterView::has_npc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResNpcEnterView::clear_npc() {
  if (npc_ != nullptr) npc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundNpcInfo& ResNpcEnterView::npc() const {
  const ::mapV2::RoundNpcInfo* p = npc_;
  // @@protoc_insertion_point(field_get:mapV2.ResNpcEnterView.npc)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundNpcInfo*>(
      &::mapV2::_RoundNpcInfo_default_instance_);
}
inline ::mapV2::RoundNpcInfo* ResNpcEnterView::release_npc() {
  // @@protoc_insertion_point(field_release:mapV2.ResNpcEnterView.npc)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundNpcInfo* temp = npc_;
  npc_ = nullptr;
  return temp;
}
inline ::mapV2::RoundNpcInfo* ResNpcEnterView::mutable_npc() {
  _has_bits_[0] |= 0x00000001u;
  if (npc_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundNpcInfo>(GetArenaNoVirtual());
    npc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResNpcEnterView.npc)
  return npc_;
}
inline void ResNpcEnterView::set_allocated_npc(::mapV2::RoundNpcInfo* npc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete npc_;
  }
  if (npc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      npc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, npc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  npc_ = npc;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResNpcEnterView.npc)
}

// -------------------------------------------------------------------

// ResPetEnterView

// required .mapV2.RoundPetInfo pet = 1;
inline bool ResPetEnterView::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPetEnterView::clear_pet() {
  if (pet_ != nullptr) pet_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundPetInfo& ResPetEnterView::pet() const {
  const ::mapV2::RoundPetInfo* p = pet_;
  // @@protoc_insertion_point(field_get:mapV2.ResPetEnterView.pet)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundPetInfo*>(
      &::mapV2::_RoundPetInfo_default_instance_);
}
inline ::mapV2::RoundPetInfo* ResPetEnterView::release_pet() {
  // @@protoc_insertion_point(field_release:mapV2.ResPetEnterView.pet)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundPetInfo* temp = pet_;
  pet_ = nullptr;
  return temp;
}
inline ::mapV2::RoundPetInfo* ResPetEnterView::mutable_pet() {
  _has_bits_[0] |= 0x00000001u;
  if (pet_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundPetInfo>(GetArenaNoVirtual());
    pet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResPetEnterView.pet)
  return pet_;
}
inline void ResPetEnterView::set_allocated_pet(::mapV2::RoundPetInfo* pet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pet_;
  }
  if (pet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pet_ = pet;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResPetEnterView.pet)
}

// -------------------------------------------------------------------

// ResHeroEnterView

// required .mapV2.RoundHeroInfo hero = 1;
inline bool ResHeroEnterView::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResHeroEnterView::clear_hero() {
  if (hero_ != nullptr) hero_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundHeroInfo& ResHeroEnterView::hero() const {
  const ::mapV2::RoundHeroInfo* p = hero_;
  // @@protoc_insertion_point(field_get:mapV2.ResHeroEnterView.hero)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundHeroInfo*>(
      &::mapV2::_RoundHeroInfo_default_instance_);
}
inline ::mapV2::RoundHeroInfo* ResHeroEnterView::release_hero() {
  // @@protoc_insertion_point(field_release:mapV2.ResHeroEnterView.hero)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundHeroInfo* temp = hero_;
  hero_ = nullptr;
  return temp;
}
inline ::mapV2::RoundHeroInfo* ResHeroEnterView::mutable_hero() {
  _has_bits_[0] |= 0x00000001u;
  if (hero_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundHeroInfo>(GetArenaNoVirtual());
    hero_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResHeroEnterView.hero)
  return hero_;
}
inline void ResHeroEnterView::set_allocated_hero(::mapV2::RoundHeroInfo* hero) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hero_;
  }
  if (hero) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hero = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hero_ = hero;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResHeroEnterView.hero)
}

// -------------------------------------------------------------------

// ResServantEnterView

// required .mapV2.RoundServantInfo servant = 1;
inline bool ResServantEnterView::has_servant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResServantEnterView::clear_servant() {
  if (servant_ != nullptr) servant_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundServantInfo& ResServantEnterView::servant() const {
  const ::mapV2::RoundServantInfo* p = servant_;
  // @@protoc_insertion_point(field_get:mapV2.ResServantEnterView.servant)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundServantInfo*>(
      &::mapV2::_RoundServantInfo_default_instance_);
}
inline ::mapV2::RoundServantInfo* ResServantEnterView::release_servant() {
  // @@protoc_insertion_point(field_release:mapV2.ResServantEnterView.servant)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundServantInfo* temp = servant_;
  servant_ = nullptr;
  return temp;
}
inline ::mapV2::RoundServantInfo* ResServantEnterView::mutable_servant() {
  _has_bits_[0] |= 0x00000001u;
  if (servant_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundServantInfo>(GetArenaNoVirtual());
    servant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResServantEnterView.servant)
  return servant_;
}
inline void ResServantEnterView::set_allocated_servant(::mapV2::RoundServantInfo* servant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete servant_;
  }
  if (servant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servant, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  servant_ = servant;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResServantEnterView.servant)
}

// -------------------------------------------------------------------

// ResMapObjectExitView

// optional int64 lid = 1;
inline bool ResMapObjectExitView::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResMapObjectExitView::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResMapObjectExitView::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResMapObjectExitView.lid)
  return lid_;
}
inline void ResMapObjectExitView::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResMapObjectExitView.lid)
}

// -------------------------------------------------------------------

// ResPlayerEnterMap

// optional int64 lid = 1;
inline bool ResPlayerEnterMap::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerEnterMap::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerEnterMap::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.lid)
  return lid_;
}
inline void ResPlayerEnterMap::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.lid)
}

// optional float x = 2;
inline bool ResPlayerEnterMap::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerEnterMap::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ResPlayerEnterMap::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.x)
  return x_;
}
inline void ResPlayerEnterMap::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.x)
}

// optional float y = 3;
inline bool ResPlayerEnterMap::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerEnterMap::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResPlayerEnterMap::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.y)
  return y_;
}
inline void ResPlayerEnterMap::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.y)
}

// optional float z = 4;
inline bool ResPlayerEnterMap::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResPlayerEnterMap::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResPlayerEnterMap::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.z)
  return z_;
}
inline void ResPlayerEnterMap::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.z)
}

// optional float dir = 5;
inline bool ResPlayerEnterMap::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResPlayerEnterMap::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ResPlayerEnterMap::dir() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.dir)
  return dir_;
}
inline void ResPlayerEnterMap::set_dir(float value) {
  _has_bits_[0] |= 0x00000010u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.dir)
}

// optional int32 hp = 6;
inline bool ResPlayerEnterMap::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResPlayerEnterMap::clear_hp() {
  hp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerEnterMap::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.hp)
  return hp_;
}
inline void ResPlayerEnterMap::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.hp)
}

// optional int32 mp = 7;
inline bool ResPlayerEnterMap::has_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResPlayerEnterMap::clear_mp() {
  mp_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerEnterMap::mp() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerEnterMap.mp)
  return mp_;
}
inline void ResPlayerEnterMap::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerEnterMap.mp)
}

// -------------------------------------------------------------------

// ResPlayerChangeMap

// optional int32 mid = 1;
inline bool ResPlayerChangeMap::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerChangeMap::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerChangeMap::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerChangeMap.mid)
  return mid_;
}
inline void ResPlayerChangeMap::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerChangeMap.mid)
}

// optional int32 line = 2;
inline bool ResPlayerChangeMap::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerChangeMap::clear_line() {
  line_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerChangeMap::line() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerChangeMap.line)
  return line_;
}
inline void ResPlayerChangeMap::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  line_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerChangeMap.line)
}

// optional float x = 3;
inline bool ResPlayerChangeMap::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerChangeMap::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResPlayerChangeMap::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerChangeMap.x)
  return x_;
}
inline void ResPlayerChangeMap::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerChangeMap.x)
}

// optional float y = 4;
inline bool ResPlayerChangeMap::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResPlayerChangeMap::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResPlayerChangeMap::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerChangeMap.y)
  return y_;
}
inline void ResPlayerChangeMap::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerChangeMap.y)
}

// optional float z = 5;
inline bool ResPlayerChangeMap::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResPlayerChangeMap::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ResPlayerChangeMap::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerChangeMap.z)
  return z_;
}
inline void ResPlayerChangeMap::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerChangeMap.z)
}

// -------------------------------------------------------------------

// ResChangePos

// optional int64 lid = 1;
inline bool ResChangePos::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResChangePos::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResChangePos::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.lid)
  return lid_;
}
inline void ResChangePos::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.lid)
}

// optional float x = 2;
inline bool ResChangePos::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResChangePos::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ResChangePos::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.x)
  return x_;
}
inline void ResChangePos::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.x)
}

// optional float y = 3;
inline bool ResChangePos::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResChangePos::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResChangePos::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.y)
  return y_;
}
inline void ResChangePos::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.y)
}

// optional float z = 4;
inline bool ResChangePos::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResChangePos::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResChangePos::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.z)
  return z_;
}
inline void ResChangePos::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.z)
}

// optional int32 reason = 5;
inline bool ResChangePos::has_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResChangePos::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResChangePos::reason() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.reason)
  return reason_;
}
inline void ResChangePos::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reason_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.reason)
}

// optional int32 waiGuaCanMoveTime = 6;
inline bool ResChangePos::has_waiguacanmovetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResChangePos::clear_waiguacanmovetime() {
  waiguacanmovetime_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResChangePos::waiguacanmovetime() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePos.waiGuaCanMoveTime)
  return waiguacanmovetime_;
}
inline void ResChangePos::set_waiguacanmovetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  waiguacanmovetime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePos.waiGuaCanMoveTime)
}

// -------------------------------------------------------------------

// ResObjectMove

// optional int64 lid = 1;
inline bool ResObjectMove::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResObjectMove::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectMove::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectMove.lid)
  return lid_;
}
inline void ResObjectMove::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectMove.lid)
}

// optional float x = 2;
inline bool ResObjectMove::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResObjectMove::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ResObjectMove::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectMove.x)
  return x_;
}
inline void ResObjectMove::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectMove.x)
}

// optional float y = 3;
inline bool ResObjectMove::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResObjectMove::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResObjectMove::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectMove.y)
  return y_;
}
inline void ResObjectMove::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectMove.y)
}

// optional float z = 4;
inline bool ResObjectMove::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResObjectMove::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResObjectMove::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectMove.z)
  return z_;
}
inline void ResObjectMove::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectMove.z)
}

// -------------------------------------------------------------------

// ResEventEnterView

// optional .mapV2.RoundEventInfo info = 1;
inline bool ResEventEnterView::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResEventEnterView::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundEventInfo& ResEventEnterView::info() const {
  const ::mapV2::RoundEventInfo* p = info_;
  // @@protoc_insertion_point(field_get:mapV2.ResEventEnterView.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundEventInfo*>(
      &::mapV2::_RoundEventInfo_default_instance_);
}
inline ::mapV2::RoundEventInfo* ResEventEnterView::release_info() {
  // @@protoc_insertion_point(field_release:mapV2.ResEventEnterView.info)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundEventInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::mapV2::RoundEventInfo* ResEventEnterView::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundEventInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResEventEnterView.info)
  return info_;
}
inline void ResEventEnterView::set_allocated_info(::mapV2::RoundEventInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResEventEnterView.info)
}

// -------------------------------------------------------------------

// ResRelive

// optional int64 lid = 1;
inline bool ResRelive::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResRelive::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResRelive::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResRelive.lid)
  return lid_;
}
inline void ResRelive::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResRelive.lid)
}

// optional int64 hp = 2;
inline bool ResRelive::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResRelive::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResRelive::hp() const {
  // @@protoc_insertion_point(field_get:mapV2.ResRelive.hp)
  return hp_;
}
inline void ResRelive::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResRelive.hp)
}

// optional int32 mp = 3;
inline bool ResRelive::has_mp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResRelive::clear_mp() {
  mp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRelive::mp() const {
  // @@protoc_insertion_point(field_get:mapV2.ResRelive.mp)
  return mp_;
}
inline void ResRelive::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mp_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResRelive.mp)
}

// optional int32 inner = 4;
inline bool ResRelive::has_inner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResRelive::clear_inner() {
  inner_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRelive::inner() const {
  // @@protoc_insertion_point(field_get:mapV2.ResRelive.inner)
  return inner_;
}
inline void ResRelive::set_inner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  inner_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResRelive.inner)
}

// -------------------------------------------------------------------

// ResItemEnterView

// optional .mapV2.RoundItemInfo info = 1;
inline bool ResItemEnterView::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResItemEnterView::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::RoundItemInfo& ResItemEnterView::info() const {
  const ::mapV2::RoundItemInfo* p = info_;
  // @@protoc_insertion_point(field_get:mapV2.ResItemEnterView.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::RoundItemInfo*>(
      &::mapV2::_RoundItemInfo_default_instance_);
}
inline ::mapV2::RoundItemInfo* ResItemEnterView::release_info() {
  // @@protoc_insertion_point(field_release:mapV2.ResItemEnterView.info)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::RoundItemInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::mapV2::RoundItemInfo* ResItemEnterView::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::RoundItemInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResItemEnterView.info)
  return info_;
}
inline void ResItemEnterView::set_allocated_info(::mapV2::RoundItemInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResItemEnterView.info)
}

// -------------------------------------------------------------------

// ResUpdateEquip

// optional int64 lid = 1;
inline bool ResUpdateEquip::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResUpdateEquip::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResUpdateEquip::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateEquip.lid)
  return lid_;
}
inline void ResUpdateEquip::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResUpdateEquip.lid)
}

// optional .mapV2.PerformerEquipBean equip = 2;
inline bool ResUpdateEquip::has_equip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResUpdateEquip::clear_equip() {
  if (equip_ != nullptr) equip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mapV2::PerformerEquipBean& ResUpdateEquip::equip() const {
  const ::mapV2::PerformerEquipBean* p = equip_;
  // @@protoc_insertion_point(field_get:mapV2.ResUpdateEquip.equip)
  return p != nullptr ? *p : *reinterpret_cast<const ::mapV2::PerformerEquipBean*>(
      &::mapV2::_PerformerEquipBean_default_instance_);
}
inline ::mapV2::PerformerEquipBean* ResUpdateEquip::release_equip() {
  // @@protoc_insertion_point(field_release:mapV2.ResUpdateEquip.equip)
  _has_bits_[0] &= ~0x00000001u;
  ::mapV2::PerformerEquipBean* temp = equip_;
  equip_ = nullptr;
  return temp;
}
inline ::mapV2::PerformerEquipBean* ResUpdateEquip::mutable_equip() {
  _has_bits_[0] |= 0x00000001u;
  if (equip_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapV2::PerformerEquipBean>(GetArenaNoVirtual());
    equip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapV2.ResUpdateEquip.equip)
  return equip_;
}
inline void ResUpdateEquip::set_allocated_equip(::mapV2::PerformerEquipBean* equip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete equip_;
  }
  if (equip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      equip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  equip_ = equip;
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResUpdateEquip.equip)
}

// -------------------------------------------------------------------

// TryEnterMapRequest

// required int32 mid = 1;
inline bool TryEnterMapRequest::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TryEnterMapRequest::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryEnterMapRequest::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.TryEnterMapRequest.mid)
  return mid_;
}
inline void TryEnterMapRequest::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.TryEnterMapRequest.mid)
}

// required int32 line = 2;
inline bool TryEnterMapRequest::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TryEnterMapRequest::clear_line() {
  line_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryEnterMapRequest::line() const {
  // @@protoc_insertion_point(field_get:mapV2.TryEnterMapRequest.line)
  return line_;
}
inline void TryEnterMapRequest::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  line_ = value;
  // @@protoc_insertion_point(field_set:mapV2.TryEnterMapRequest.line)
}

// -------------------------------------------------------------------

// ResTryEnterMap

// required int32 mid = 1;
inline bool ResTryEnterMap::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResTryEnterMap::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResTryEnterMap::mid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResTryEnterMap.mid)
  return mid_;
}
inline void ResTryEnterMap::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResTryEnterMap.mid)
}

// required int32 line = 2;
inline bool ResTryEnterMap::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResTryEnterMap::clear_line() {
  line_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResTryEnterMap::line() const {
  // @@protoc_insertion_point(field_get:mapV2.ResTryEnterMap.line)
  return line_;
}
inline void ResTryEnterMap::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  line_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResTryEnterMap.line)
}

// optional bool reconnect = 3;
inline bool ResTryEnterMap::has_reconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResTryEnterMap::clear_reconnect() {
  reconnect_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ResTryEnterMap::reconnect() const {
  // @@protoc_insertion_point(field_get:mapV2.ResTryEnterMap.reconnect)
  return reconnect_;
}
inline void ResTryEnterMap::set_reconnect(bool value) {
  _has_bits_[0] |= 0x00000004u;
  reconnect_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResTryEnterMap.reconnect)
}

// -------------------------------------------------------------------

// ResChangePlayer

// required int64 playerId = 1;
inline bool ResChangePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResChangePlayer::clear_playerid() {
  playerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResChangePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResChangePlayer.playerId)
  return playerid_;
}
inline void ResChangePlayer::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResChangePlayer.playerId)
}

// -------------------------------------------------------------------

// ResReplacePlayer

// required int64 oldId = 1;
inline bool ResReplacePlayer::has_oldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResReplacePlayer::clear_oldid() {
  oldid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResReplacePlayer::oldid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResReplacePlayer.oldId)
  return oldid_;
}
inline void ResReplacePlayer::set_oldid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  oldid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResReplacePlayer.oldId)
}

// required int64 newId = 2;
inline bool ResReplacePlayer::has_newid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResReplacePlayer::clear_newid() {
  newid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResReplacePlayer::newid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResReplacePlayer.newId)
  return newid_;
}
inline void ResReplacePlayer::set_newid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  newid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResReplacePlayer.newId)
}

// -------------------------------------------------------------------

// ResBossOwner

// optional int64 bossId = 1;
inline bool ResBossOwner::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResBossOwner::clear_bossid() {
  bossid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResBossOwner::bossid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.bossId)
  return bossid_;
}
inline void ResBossOwner::set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  bossid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.bossId)
}

// optional int64 lid = 2;
inline bool ResBossOwner::has_lid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResBossOwner::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResBossOwner::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.lid)
  return lid_;
}
inline void ResBossOwner::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.lid)
}

// optional string name = 3;
inline bool ResBossOwner::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResBossOwner::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResBossOwner::name() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.name)
  return name_.GetNoArena();
}
inline void ResBossOwner::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.name)
}
inline void ResBossOwner::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.ResBossOwner.name)
}
inline void ResBossOwner::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.ResBossOwner.name)
}
inline void ResBossOwner::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResBossOwner.name)
}
inline std::string* ResBossOwner::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.ResBossOwner.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResBossOwner::release_name() {
  // @@protoc_insertion_point(field_release:mapV2.ResBossOwner.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResBossOwner::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResBossOwner.name)
}

// optional int64 unionId = 4;
inline bool ResBossOwner::has_unionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResBossOwner::clear_unionid() {
  unionid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResBossOwner::unionid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.unionId)
  return unionid_;
}
inline void ResBossOwner::set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  unionid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.unionId)
}

// optional string unionName = 5;
inline bool ResBossOwner::has_unionname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResBossOwner::clear_unionname() {
  unionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResBossOwner::unionname() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.unionName)
  return unionname_.GetNoArena();
}
inline void ResBossOwner::set_unionname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.unionName)
}
inline void ResBossOwner::set_unionname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.ResBossOwner.unionName)
}
inline void ResBossOwner::set_unionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.ResBossOwner.unionName)
}
inline void ResBossOwner::set_unionname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResBossOwner.unionName)
}
inline std::string* ResBossOwner::mutable_unionname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:mapV2.ResBossOwner.unionName)
  return unionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResBossOwner::release_unionname() {
  // @@protoc_insertion_point(field_release:mapV2.ResBossOwner.unionName)
  if (!has_unionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unionname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResBossOwner::set_allocated_unionname(std::string* unionname) {
  if (unionname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unionname);
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResBossOwner.unionName)
}

// optional int32 sex = 6;
inline bool ResBossOwner::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResBossOwner::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResBossOwner::sex() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.sex)
  return sex_;
}
inline void ResBossOwner::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.sex)
}

// optional int32 career = 7;
inline bool ResBossOwner::has_career() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResBossOwner::clear_career() {
  career_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResBossOwner::career() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.career)
  return career_;
}
inline void ResBossOwner::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  career_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.career)
}

// optional float x = 8;
inline bool ResBossOwner::has_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResBossOwner::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ResBossOwner::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.x)
  return x_;
}
inline void ResBossOwner::set_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.x)
}

// optional float y = 9;
inline bool ResBossOwner::has_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResBossOwner::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ResBossOwner::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.y)
  return y_;
}
inline void ResBossOwner::set_y(float value) {
  _has_bits_[0] |= 0x00000100u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.y)
}

// optional float z = 10;
inline bool ResBossOwner::has_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResBossOwner::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ResBossOwner::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResBossOwner.z)
  return z_;
}
inline void ResBossOwner::set_z(float value) {
  _has_bits_[0] |= 0x00000200u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResBossOwner.z)
}

// -------------------------------------------------------------------

// ResPlayerWingChange

// required int64 lid = 1;
inline bool ResPlayerWingChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerWingChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerWingChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerWingChange.lid)
  return lid_;
}
inline void ResPlayerWingChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerWingChange.lid)
}

// required int32 wing = 2;
inline bool ResPlayerWingChange::has_wing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerWingChange::clear_wing() {
  wing_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerWingChange::wing() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerWingChange.wing)
  return wing_;
}
inline void ResPlayerWingChange::set_wing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  wing_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerWingChange.wing)
}

// -------------------------------------------------------------------

// ResPlayerUnionChange

// required int64 lid = 1;
inline bool ResPlayerUnionChange::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerUnionChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerUnionChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerUnionChange.lid)
  return lid_;
}
inline void ResPlayerUnionChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerUnionChange.lid)
}

// required int64 unionId = 2;
inline bool ResPlayerUnionChange::has_unionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerUnionChange::clear_unionid() {
  unionid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerUnionChange::unionid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerUnionChange.unionId)
  return unionid_;
}
inline void ResPlayerUnionChange::set_unionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  unionid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerUnionChange.unionId)
}

// required string unionName = 3;
inline bool ResPlayerUnionChange::has_unionname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerUnionChange::clear_unionname() {
  unionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResPlayerUnionChange::unionname() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerUnionChange.unionName)
  return unionname_.GetNoArena();
}
inline void ResPlayerUnionChange::set_unionname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerUnionChange.unionName)
}
inline void ResPlayerUnionChange::set_unionname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.ResPlayerUnionChange.unionName)
}
inline void ResPlayerUnionChange::set_unionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.ResPlayerUnionChange.unionName)
}
inline void ResPlayerUnionChange::set_unionname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResPlayerUnionChange.unionName)
}
inline std::string* ResPlayerUnionChange::mutable_unionname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.ResPlayerUnionChange.unionName)
  return unionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResPlayerUnionChange::release_unionname() {
  // @@protoc_insertion_point(field_release:mapV2.ResPlayerUnionChange.unionName)
  if (!has_unionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unionname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResPlayerUnionChange::set_allocated_unionname(std::string* unionname) {
  if (unionname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unionname);
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResPlayerUnionChange.unionName)
}

// -------------------------------------------------------------------

// PlayerReliveRequest

// required int32 reliveType = 1;
inline bool PlayerReliveRequest::has_relivetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerReliveRequest::clear_relivetype() {
  relivetype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerReliveRequest::relivetype() const {
  // @@protoc_insertion_point(field_get:mapV2.PlayerReliveRequest.reliveType)
  return relivetype_;
}
inline void PlayerReliveRequest::set_relivetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  relivetype_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PlayerReliveRequest.reliveType)
}

// -------------------------------------------------------------------

// ResPlayerReliveInfo

// required int32 dieCount = 1;
inline bool ResPlayerReliveInfo::has_diecount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerReliveInfo::clear_diecount() {
  diecount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerReliveInfo::diecount() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerReliveInfo.dieCount)
  return diecount_;
}
inline void ResPlayerReliveInfo::set_diecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  diecount_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerReliveInfo.dieCount)
}

// required int32 autoReliveTime = 2;
inline bool ResPlayerReliveInfo::has_autorelivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerReliveInfo::clear_autorelivetime() {
  autorelivetime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerReliveInfo::autorelivetime() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerReliveInfo.autoReliveTime)
  return autorelivetime_;
}
inline void ResPlayerReliveInfo::set_autorelivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  autorelivetime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerReliveInfo.autoReliveTime)
}

// -------------------------------------------------------------------

// ResPlayerFashionChange

// required int64 lid = 1;
inline bool ResPlayerFashionChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerFashionChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerFashionChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerFashionChange.lid)
  return lid_;
}
inline void ResPlayerFashionChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerFashionChange.lid)
}

// required int32 fashionType = 2;
inline bool ResPlayerFashionChange::has_fashiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerFashionChange::clear_fashiontype() {
  fashiontype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerFashionChange::fashiontype() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerFashionChange.fashionType)
  return fashiontype_;
}
inline void ResPlayerFashionChange::set_fashiontype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  fashiontype_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerFashionChange.fashionType)
}

// required int32 int32 = 3;
inline bool ResPlayerFashionChange::has_int32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerFashionChange::clear_int32() {
  int32_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerFashionChange::int32() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerFashionChange.int32)
  return int32_;
}
inline void ResPlayerFashionChange::set_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  int32_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerFashionChange.int32)
}

// -------------------------------------------------------------------

// ResPlayerJunxianChange

// required int64 lid = 1;
inline bool ResPlayerJunxianChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerJunxianChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerJunxianChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerJunxianChange.lid)
  return lid_;
}
inline void ResPlayerJunxianChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerJunxianChange.lid)
}

// required int32 junxianLevel = 2;
inline bool ResPlayerJunxianChange::has_junxianlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerJunxianChange::clear_junxianlevel() {
  junxianlevel_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerJunxianChange::junxianlevel() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerJunxianChange.junxianLevel)
  return junxianlevel_;
}
inline void ResPlayerJunxianChange::set_junxianlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  junxianlevel_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerJunxianChange.junxianLevel)
}

// -------------------------------------------------------------------

// SwitchFightModelRequest

// required int32 fightModel = 1;
inline bool SwitchFightModelRequest::has_fightmodel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchFightModelRequest::clear_fightmodel() {
  fightmodel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwitchFightModelRequest::fightmodel() const {
  // @@protoc_insertion_point(field_get:mapV2.SwitchFightModelRequest.fightModel)
  return fightmodel_;
}
inline void SwitchFightModelRequest::set_fightmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fightmodel_ = value;
  // @@protoc_insertion_point(field_set:mapV2.SwitchFightModelRequest.fightModel)
}

// -------------------------------------------------------------------

// ResSwitchFightModel

// required int32 fightModel = 1;
inline bool ResSwitchFightModel::has_fightmodel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResSwitchFightModel::clear_fightmodel() {
  fightmodel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResSwitchFightModel::fightmodel() const {
  // @@protoc_insertion_point(field_get:mapV2.ResSwitchFightModel.fightModel)
  return fightmodel_;
}
inline void ResSwitchFightModel::set_fightmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fightmodel_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResSwitchFightModel.fightModel)
}

// -------------------------------------------------------------------

// PickUpMapItemRequest

// required int64 objId = 1;
inline bool PickUpMapItemRequest::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PickUpMapItemRequest::clear_objid() {
  objid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PickUpMapItemRequest::objid() const {
  // @@protoc_insertion_point(field_get:mapV2.PickUpMapItemRequest.objId)
  return objid_;
}
inline void PickUpMapItemRequest::set_objid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  objid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.PickUpMapItemRequest.objId)
}

// -------------------------------------------------------------------

// ResNoticeViewTypeInfo

// required int64 lid = 1;
inline bool ResNoticeViewTypeInfo::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResNoticeViewTypeInfo::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResNoticeViewTypeInfo::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResNoticeViewTypeInfo.lid)
  return lid_;
}
inline void ResNoticeViewTypeInfo::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResNoticeViewTypeInfo.lid)
}

// repeated .mapV2.NoticeBean updateList = 2;
inline int ResNoticeViewTypeInfo::updatelist_size() const {
  return updatelist_.size();
}
inline void ResNoticeViewTypeInfo::clear_updatelist() {
  updatelist_.Clear();
}
inline ::mapV2::NoticeBean* ResNoticeViewTypeInfo::mutable_updatelist(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResNoticeViewTypeInfo.updateList)
  return updatelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::NoticeBean >*
ResNoticeViewTypeInfo::mutable_updatelist() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResNoticeViewTypeInfo.updateList)
  return &updatelist_;
}
inline const ::mapV2::NoticeBean& ResNoticeViewTypeInfo::updatelist(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResNoticeViewTypeInfo.updateList)
  return updatelist_.Get(index);
}
inline ::mapV2::NoticeBean* ResNoticeViewTypeInfo::add_updatelist() {
  // @@protoc_insertion_point(field_add:mapV2.ResNoticeViewTypeInfo.updateList)
  return updatelist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::NoticeBean >&
ResNoticeViewTypeInfo::updatelist() const {
  // @@protoc_insertion_point(field_list:mapV2.ResNoticeViewTypeInfo.updateList)
  return updatelist_;
}

// -------------------------------------------------------------------

// ResAllPerformerTotalHp

// repeated .mapV2.MapBoss mapBossList = 1;
inline int ResAllPerformerTotalHp::mapbosslist_size() const {
  return mapbosslist_.size();
}
inline void ResAllPerformerTotalHp::clear_mapbosslist() {
  mapbosslist_.Clear();
}
inline ::mapV2::MapBoss* ResAllPerformerTotalHp::mutable_mapbosslist(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResAllPerformerTotalHp.mapBossList)
  return mapbosslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MapBoss >*
ResAllPerformerTotalHp::mutable_mapbosslist() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResAllPerformerTotalHp.mapBossList)
  return &mapbosslist_;
}
inline const ::mapV2::MapBoss& ResAllPerformerTotalHp::mapbosslist(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResAllPerformerTotalHp.mapBossList)
  return mapbosslist_.Get(index);
}
inline ::mapV2::MapBoss* ResAllPerformerTotalHp::add_mapbosslist() {
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.mapBossList)
  return mapbosslist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MapBoss >&
ResAllPerformerTotalHp::mapbosslist() const {
  // @@protoc_insertion_point(field_list:mapV2.ResAllPerformerTotalHp.mapBossList)
  return mapbosslist_;
}

// repeated int64 playerId = 2;
inline int ResAllPerformerTotalHp::playerid_size() const {
  return playerid_.size();
}
inline void ResAllPerformerTotalHp::clear_playerid() {
  playerid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResAllPerformerTotalHp::playerid(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResAllPerformerTotalHp.playerId)
  return playerid_.Get(index);
}
inline void ResAllPerformerTotalHp::set_playerid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  playerid_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapV2.ResAllPerformerTotalHp.playerId)
}
inline void ResAllPerformerTotalHp::add_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  playerid_.Add(value);
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.playerId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ResAllPerformerTotalHp::playerid() const {
  // @@protoc_insertion_point(field_list:mapV2.ResAllPerformerTotalHp.playerId)
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ResAllPerformerTotalHp::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResAllPerformerTotalHp.playerId)
  return &playerid_;
}

// repeated bytes percent = 3;
inline int ResAllPerformerTotalHp::percent_size() const {
  return percent_.size();
}
inline void ResAllPerformerTotalHp::clear_percent() {
  percent_.Clear();
}
inline const std::string& ResAllPerformerTotalHp::percent(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResAllPerformerTotalHp.percent)
  return percent_.Get(index);
}
inline std::string* ResAllPerformerTotalHp::mutable_percent(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResAllPerformerTotalHp.percent)
  return percent_.Mutable(index);
}
inline void ResAllPerformerTotalHp::set_percent(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mapV2.ResAllPerformerTotalHp.percent)
  percent_.Mutable(index)->assign(value);
}
inline void ResAllPerformerTotalHp::set_percent(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mapV2.ResAllPerformerTotalHp.percent)
  percent_.Mutable(index)->assign(std::move(value));
}
inline void ResAllPerformerTotalHp::set_percent(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  percent_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapV2.ResAllPerformerTotalHp.percent)
}
inline void ResAllPerformerTotalHp::set_percent(int index, const void* value, size_t size) {
  percent_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResAllPerformerTotalHp.percent)
}
inline std::string* ResAllPerformerTotalHp::add_percent() {
  // @@protoc_insertion_point(field_add_mutable:mapV2.ResAllPerformerTotalHp.percent)
  return percent_.Add();
}
inline void ResAllPerformerTotalHp::add_percent(const std::string& value) {
  percent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.percent)
}
inline void ResAllPerformerTotalHp::add_percent(std::string&& value) {
  percent_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.percent)
}
inline void ResAllPerformerTotalHp::add_percent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  percent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapV2.ResAllPerformerTotalHp.percent)
}
inline void ResAllPerformerTotalHp::add_percent(const void* value, size_t size) {
  percent_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapV2.ResAllPerformerTotalHp.percent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResAllPerformerTotalHp::percent() const {
  // @@protoc_insertion_point(field_list:mapV2.ResAllPerformerTotalHp.percent)
  return percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResAllPerformerTotalHp::mutable_percent() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResAllPerformerTotalHp.percent)
  return &percent_;
}

// repeated bytes percentIp = 4;
inline int ResAllPerformerTotalHp::percentip_size() const {
  return percentip_.size();
}
inline void ResAllPerformerTotalHp::clear_percentip() {
  percentip_.Clear();
}
inline const std::string& ResAllPerformerTotalHp::percentip(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResAllPerformerTotalHp.percentIp)
  return percentip_.Get(index);
}
inline std::string* ResAllPerformerTotalHp::mutable_percentip(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResAllPerformerTotalHp.percentIp)
  return percentip_.Mutable(index);
}
inline void ResAllPerformerTotalHp::set_percentip(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mapV2.ResAllPerformerTotalHp.percentIp)
  percentip_.Mutable(index)->assign(value);
}
inline void ResAllPerformerTotalHp::set_percentip(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mapV2.ResAllPerformerTotalHp.percentIp)
  percentip_.Mutable(index)->assign(std::move(value));
}
inline void ResAllPerformerTotalHp::set_percentip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  percentip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline void ResAllPerformerTotalHp::set_percentip(int index, const void* value, size_t size) {
  percentip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline std::string* ResAllPerformerTotalHp::add_percentip() {
  // @@protoc_insertion_point(field_add_mutable:mapV2.ResAllPerformerTotalHp.percentIp)
  return percentip_.Add();
}
inline void ResAllPerformerTotalHp::add_percentip(const std::string& value) {
  percentip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline void ResAllPerformerTotalHp::add_percentip(std::string&& value) {
  percentip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline void ResAllPerformerTotalHp::add_percentip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  percentip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline void ResAllPerformerTotalHp::add_percentip(const void* value, size_t size) {
  percentip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapV2.ResAllPerformerTotalHp.percentIp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResAllPerformerTotalHp::percentip() const {
  // @@protoc_insertion_point(field_list:mapV2.ResAllPerformerTotalHp.percentIp)
  return percentip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResAllPerformerTotalHp::mutable_percentip() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResAllPerformerTotalHp.percentIp)
  return &percentip_;
}

// -------------------------------------------------------------------

// ResPressureValue

// required int32 pressure = 1;
inline bool ResPressureValue::has_pressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPressureValue::clear_pressure() {
  pressure_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPressureValue::pressure() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPressureValue.pressure)
  return pressure_;
}
inline void ResPressureValue::set_pressure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pressure_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPressureValue.pressure)
}

// -------------------------------------------------------------------

// BossOwnerRequest

// required int64 bossId = 1;
inline bool BossOwnerRequest::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossOwnerRequest::clear_bossid() {
  bossid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BossOwnerRequest::bossid() const {
  // @@protoc_insertion_point(field_get:mapV2.BossOwnerRequest.bossId)
  return bossid_;
}
inline void BossOwnerRequest::set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bossid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.BossOwnerRequest.bossId)
}

// -------------------------------------------------------------------

// BossReliveTime

// required int64 bossId = 1;
inline bool BossReliveTime::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossReliveTime::clear_bossid() {
  bossid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BossReliveTime::bossid() const {
  // @@protoc_insertion_point(field_get:mapV2.BossReliveTime.bossId)
  return bossid_;
}
inline void BossReliveTime::set_bossid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  bossid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.BossReliveTime.bossId)
}

// required int32 reliveTime = 2;
inline bool BossReliveTime::has_relivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossReliveTime::clear_relivetime() {
  relivetime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BossReliveTime::relivetime() const {
  // @@protoc_insertion_point(field_get:mapV2.BossReliveTime.reliveTime)
  return relivetime_;
}
inline void BossReliveTime::set_relivetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  relivetime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.BossReliveTime.reliveTime)
}

// -------------------------------------------------------------------

// ResPlayerSzSuitChange

// required int64 lid = 1;
inline bool ResPlayerSzSuitChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerSzSuitChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerSzSuitChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerSzSuitChange.lid)
  return lid_;
}
inline void ResPlayerSzSuitChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerSzSuitChange.lid)
}

// required int32 suit = 2;
inline bool ResPlayerSzSuitChange::has_suit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerSzSuitChange::clear_suit() {
  suit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerSzSuitChange::suit() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerSzSuitChange.suit)
  return suit_;
}
inline void ResPlayerSzSuitChange::set_suit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  suit_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerSzSuitChange.suit)
}

// -------------------------------------------------------------------

// ResPlayerLegendChange

// required int64 lid = 1;
inline bool ResPlayerLegendChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerLegendChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerLegendChange::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerLegendChange.lid)
  return lid_;
}
inline void ResPlayerLegendChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerLegendChange.lid)
}

// required int32 type = 2;
inline bool ResPlayerLegendChange::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerLegendChange::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerLegendChange::type() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerLegendChange.type)
  return type_;
}
inline void ResPlayerLegendChange::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerLegendChange.type)
}

// required int32 legendLevel = 3;
inline bool ResPlayerLegendChange::has_legendlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerLegendChange::clear_legendlevel() {
  legendlevel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResPlayerLegendChange::legendlevel() const {
  // @@protoc_insertion_point(field_get:mapV2.ResPlayerLegendChange.legendLevel)
  return legendlevel_;
}
inline void ResPlayerLegendChange::set_legendlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  legendlevel_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResPlayerLegendChange.legendLevel)
}

// -------------------------------------------------------------------

// ResCartMove

// required int32 state = 1;
inline bool ResCartMove::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCartMove::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCartMove::state() const {
  // @@protoc_insertion_point(field_get:mapV2.ResCartMove.state)
  return state_;
}
inline void ResCartMove::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResCartMove.state)
}

// -------------------------------------------------------------------

// ResTombInfo

// repeated .mapV2.MonsterTomb tombInfos = 1;
inline int ResTombInfo::tombinfos_size() const {
  return tombinfos_.size();
}
inline void ResTombInfo::clear_tombinfos() {
  tombinfos_.Clear();
}
inline ::mapV2::MonsterTomb* ResTombInfo::mutable_tombinfos(int index) {
  // @@protoc_insertion_point(field_mutable:mapV2.ResTombInfo.tombInfos)
  return tombinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MonsterTomb >*
ResTombInfo::mutable_tombinfos() {
  // @@protoc_insertion_point(field_mutable_list:mapV2.ResTombInfo.tombInfos)
  return &tombinfos_;
}
inline const ::mapV2::MonsterTomb& ResTombInfo::tombinfos(int index) const {
  // @@protoc_insertion_point(field_get:mapV2.ResTombInfo.tombInfos)
  return tombinfos_.Get(index);
}
inline ::mapV2::MonsterTomb* ResTombInfo::add_tombinfos() {
  // @@protoc_insertion_point(field_add:mapV2.ResTombInfo.tombInfos)
  return tombinfos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapV2::MonsterTomb >&
ResTombInfo::tombinfos() const {
  // @@protoc_insertion_point(field_list:mapV2.ResTombInfo.tombInfos)
  return tombinfos_;
}

// -------------------------------------------------------------------

// GatherOperatorRequest

// required int32 type = 1;
inline bool GatherOperatorRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatherOperatorRequest::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GatherOperatorRequest::type() const {
  // @@protoc_insertion_point(field_get:mapV2.GatherOperatorRequest.type)
  return type_;
}
inline void GatherOperatorRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:mapV2.GatherOperatorRequest.type)
}

// required int64 lid = 2;
inline bool GatherOperatorRequest::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatherOperatorRequest::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GatherOperatorRequest::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.GatherOperatorRequest.lid)
  return lid_;
}
inline void GatherOperatorRequest::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.GatherOperatorRequest.lid)
}

// -------------------------------------------------------------------

// ResGatherState

// optional int64 roleId = 1;
inline bool ResGatherState::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResGatherState::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResGatherState::roleid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.roleId)
  return roleid_;
}
inline void ResGatherState::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.roleId)
}

// optional int32 type = 2;
inline bool ResGatherState::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResGatherState::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResGatherState::type() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.type)
  return type_;
}
inline void ResGatherState::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.type)
}

// optional int32 time = 3;
inline bool ResGatherState::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResGatherState::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResGatherState::time() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.time)
  return time_;
}
inline void ResGatherState::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.time)
}

// optional int32 state = 4;
inline bool ResGatherState::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResGatherState::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResGatherState::state() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.state)
  return state_;
}
inline void ResGatherState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.state)
}

// optional bool isMonster = 5;
inline bool ResGatherState::has_ismonster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResGatherState::clear_ismonster() {
  ismonster_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ResGatherState::ismonster() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.isMonster)
  return ismonster_;
}
inline void ResGatherState::set_ismonster(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ismonster_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.isMonster)
}

// optional float x = 6;
inline bool ResGatherState::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResGatherState::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResGatherState::x() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.x)
  return x_;
}
inline void ResGatherState::set_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.x)
}

// optional float y = 7;
inline bool ResGatherState::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResGatherState::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ResGatherState::y() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.y)
  return y_;
}
inline void ResGatherState::set_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.y)
}

// optional float z = 8;
inline bool ResGatherState::has_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResGatherState::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ResGatherState::z() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.z)
  return z_;
}
inline void ResGatherState::set_z(float value) {
  _has_bits_[0] |= 0x00000400u;
  z_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.z)
}

// optional int64 deadTime = 9;
inline bool ResGatherState::has_deadtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResGatherState::clear_deadtime() {
  deadtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResGatherState::deadtime() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.deadTime)
  return deadtime_;
}
inline void ResGatherState::set_deadtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  deadtime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.deadTime)
}

// optional int64 ownerId = 10;
inline bool ResGatherState::has_ownerid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResGatherState::clear_ownerid() {
  ownerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResGatherState::ownerid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.ownerId)
  return ownerid_;
}
inline void ResGatherState::set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.ownerId)
}

// optional int64 lid = 11;
inline bool ResGatherState::has_lid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResGatherState::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResGatherState::lid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResGatherState.lid)
  return lid_;
}
inline void ResGatherState::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResGatherState.lid)
}

// -------------------------------------------------------------------

// ReqClickEvent

// required int64 groundEventId = 1;
inline bool ReqClickEvent::has_groundeventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqClickEvent::clear_groundeventid() {
  groundeventid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqClickEvent::groundeventid() const {
  // @@protoc_insertion_point(field_get:mapV2.ReqClickEvent.groundEventId)
  return groundeventid_;
}
inline void ReqClickEvent::set_groundeventid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  groundeventid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ReqClickEvent.groundEventId)
}

// -------------------------------------------------------------------

// ResObjectDeadTime

// optional int64 id = 1;
inline bool ResObjectDeadTime::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResObjectDeadTime::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectDeadTime::id() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectDeadTime.id)
  return id_;
}
inline void ResObjectDeadTime::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectDeadTime.id)
}

// optional int64 killid = 2;
inline bool ResObjectDeadTime::has_killid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResObjectDeadTime::clear_killid() {
  killid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectDeadTime::killid() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectDeadTime.killid)
  return killid_;
}
inline void ResObjectDeadTime::set_killid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  killid_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectDeadTime.killid)
}

// optional string killName = 3;
inline bool ResObjectDeadTime::has_killname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResObjectDeadTime::clear_killname() {
  killname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResObjectDeadTime::killname() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectDeadTime.killName)
  return killname_.GetNoArena();
}
inline void ResObjectDeadTime::set_killname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  killname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapV2.ResObjectDeadTime.killName)
}
inline void ResObjectDeadTime::set_killname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  killname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapV2.ResObjectDeadTime.killName)
}
inline void ResObjectDeadTime::set_killname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  killname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapV2.ResObjectDeadTime.killName)
}
inline void ResObjectDeadTime::set_killname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  killname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapV2.ResObjectDeadTime.killName)
}
inline std::string* ResObjectDeadTime::mutable_killname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mapV2.ResObjectDeadTime.killName)
  return killname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResObjectDeadTime::release_killname() {
  // @@protoc_insertion_point(field_release:mapV2.ResObjectDeadTime.killName)
  if (!has_killname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return killname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResObjectDeadTime::set_allocated_killname(std::string* killname) {
  if (killname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  killname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), killname);
  // @@protoc_insertion_point(field_set_allocated:mapV2.ResObjectDeadTime.killName)
}

// optional int64 deadTime = 4;
inline bool ResObjectDeadTime::has_deadtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResObjectDeadTime::clear_deadtime() {
  deadtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectDeadTime::deadtime() const {
  // @@protoc_insertion_point(field_get:mapV2.ResObjectDeadTime.deadTime)
  return deadtime_;
}
inline void ResObjectDeadTime::set_deadtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  deadtime_ = value;
  // @@protoc_insertion_point(field_set:mapV2.ResObjectDeadTime.deadTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapV2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
