// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapBoss_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterTomb_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeBean_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformerEquipBean_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundBufferInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundCollectPoint_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundEventInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundHeroInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundItemInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundMonsterInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundNpcInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundPetInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoundPlayerInfo_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundServantInfo_map_2eproto;
namespace mapV2 {
class PerformerEquipBeanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformerEquipBean> _instance;
} _PerformerEquipBean_default_instance_;
class PerformerFashionBeanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformerFashionBean> _instance;
} _PerformerFashionBean_default_instance_;
class RoundItemInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundItemInfo> _instance;
} _RoundItemInfo_default_instance_;
class NoticeBeanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoticeBean> _instance;
} _NoticeBean_default_instance_;
class RoundEventInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundEventInfo> _instance;
} _RoundEventInfo_default_instance_;
class RoundBufferInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundBufferInfo> _instance;
} _RoundBufferInfo_default_instance_;
class RoundPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundPlayerInfo> _instance;
} _RoundPlayerInfo_default_instance_;
class RoundMonsterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundMonsterInfo> _instance;
} _RoundMonsterInfo_default_instance_;
class RoundNpcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundNpcInfo> _instance;
} _RoundNpcInfo_default_instance_;
class RoundPetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundPetInfo> _instance;
} _RoundPetInfo_default_instance_;
class RoundHeroInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundHeroInfo> _instance;
} _RoundHeroInfo_default_instance_;
class RoundServantInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundServantInfo> _instance;
} _RoundServantInfo_default_instance_;
class RoundCollectPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoundCollectPoint> _instance;
} _RoundCollectPoint_default_instance_;
class MapBossDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapBoss> _instance;
} _MapBoss_default_instance_;
class MonsterTombDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonsterTomb> _instance;
} _MonsterTomb_default_instance_;
class ResUpdateViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResUpdateView> _instance;
} _ResUpdateView_default_instance_;
class ResPlayerEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerEnterView> _instance;
} _ResPlayerEnterView_default_instance_;
class ResCollectEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCollectEnterView> _instance;
} _ResCollectEnterView_default_instance_;
class ResBufferEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResBufferEnterView> _instance;
} _ResBufferEnterView_default_instance_;
class ResMonsterEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResMonsterEnterView> _instance;
} _ResMonsterEnterView_default_instance_;
class ResNpcEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResNpcEnterView> _instance;
} _ResNpcEnterView_default_instance_;
class ResPetEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPetEnterView> _instance;
} _ResPetEnterView_default_instance_;
class ResHeroEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResHeroEnterView> _instance;
} _ResHeroEnterView_default_instance_;
class ResServantEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResServantEnterView> _instance;
} _ResServantEnterView_default_instance_;
class ResMapObjectExitViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResMapObjectExitView> _instance;
} _ResMapObjectExitView_default_instance_;
class ResPlayerEnterMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerEnterMap> _instance;
} _ResPlayerEnterMap_default_instance_;
class ResPlayerChangeMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerChangeMap> _instance;
} _ResPlayerChangeMap_default_instance_;
class ResChangePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResChangePos> _instance;
} _ResChangePos_default_instance_;
class ResObjectMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResObjectMove> _instance;
} _ResObjectMove_default_instance_;
class ResEventEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResEventEnterView> _instance;
} _ResEventEnterView_default_instance_;
class ResReliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResRelive> _instance;
} _ResRelive_default_instance_;
class ResItemEnterViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResItemEnterView> _instance;
} _ResItemEnterView_default_instance_;
class ResUpdateEquipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResUpdateEquip> _instance;
} _ResUpdateEquip_default_instance_;
class TryEnterMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TryEnterMapRequest> _instance;
} _TryEnterMapRequest_default_instance_;
class ResTryEnterMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResTryEnterMap> _instance;
} _ResTryEnterMap_default_instance_;
class ResChangePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResChangePlayer> _instance;
} _ResChangePlayer_default_instance_;
class ResReplacePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResReplacePlayer> _instance;
} _ResReplacePlayer_default_instance_;
class ResBossOwnerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResBossOwner> _instance;
} _ResBossOwner_default_instance_;
class ResPlayerWingChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerWingChange> _instance;
} _ResPlayerWingChange_default_instance_;
class ResPlayerUnionChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerUnionChange> _instance;
} _ResPlayerUnionChange_default_instance_;
class PlayerReliveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerReliveRequest> _instance;
} _PlayerReliveRequest_default_instance_;
class ResPlayerReliveInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerReliveInfo> _instance;
} _ResPlayerReliveInfo_default_instance_;
class ResPlayerFashionChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerFashionChange> _instance;
} _ResPlayerFashionChange_default_instance_;
class ResPlayerJunxianChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerJunxianChange> _instance;
} _ResPlayerJunxianChange_default_instance_;
class SwitchFightModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchFightModelRequest> _instance;
} _SwitchFightModelRequest_default_instance_;
class ResSwitchFightModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResSwitchFightModel> _instance;
} _ResSwitchFightModel_default_instance_;
class PickUpMapItemRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PickUpMapItemRequest> _instance;
} _PickUpMapItemRequest_default_instance_;
class ResNoticeViewTypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResNoticeViewTypeInfo> _instance;
} _ResNoticeViewTypeInfo_default_instance_;
class ResAllPerformerTotalHpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResAllPerformerTotalHp> _instance;
} _ResAllPerformerTotalHp_default_instance_;
class ResPressureValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPressureValue> _instance;
} _ResPressureValue_default_instance_;
class BossOwnerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BossOwnerRequest> _instance;
} _BossOwnerRequest_default_instance_;
class BossReliveTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BossReliveTime> _instance;
} _BossReliveTime_default_instance_;
class ResPlayerSzSuitChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerSzSuitChange> _instance;
} _ResPlayerSzSuitChange_default_instance_;
class ResPlayerLegendChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerLegendChange> _instance;
} _ResPlayerLegendChange_default_instance_;
class ResCartMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCartMove> _instance;
} _ResCartMove_default_instance_;
class ResTombInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResTombInfo> _instance;
} _ResTombInfo_default_instance_;
class GatherOperatorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatherOperatorRequest> _instance;
} _GatherOperatorRequest_default_instance_;
class ResGatherStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResGatherState> _instance;
} _ResGatherState_default_instance_;
class ReqClickEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqClickEvent> _instance;
} _ReqClickEvent_default_instance_;
class ResObjectDeadTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResObjectDeadTime> _instance;
} _ResObjectDeadTime_default_instance_;
}  // namespace mapV2
static void InitDefaultsscc_info_BossOwnerRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_BossOwnerRequest_default_instance_;
    new (ptr) ::mapV2::BossOwnerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::BossOwnerRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BossOwnerRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BossOwnerRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_BossReliveTime_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_BossReliveTime_default_instance_;
    new (ptr) ::mapV2::BossReliveTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::BossReliveTime::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BossReliveTime_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BossReliveTime_map_2eproto}, {}};

static void InitDefaultsscc_info_GatherOperatorRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_GatherOperatorRequest_default_instance_;
    new (ptr) ::mapV2::GatherOperatorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::GatherOperatorRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GatherOperatorRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GatherOperatorRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_MapBoss_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_MapBoss_default_instance_;
    new (ptr) ::mapV2::MapBoss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::MapBoss::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapBoss_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapBoss_map_2eproto}, {}};

static void InitDefaultsscc_info_MonsterTomb_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_MonsterTomb_default_instance_;
    new (ptr) ::mapV2::MonsterTomb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::MonsterTomb::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonsterTomb_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MonsterTomb_map_2eproto}, {}};

static void InitDefaultsscc_info_NoticeBean_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_NoticeBean_default_instance_;
    new (ptr) ::mapV2::NoticeBean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::NoticeBean::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoticeBean_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NoticeBean_map_2eproto}, {}};

static void InitDefaultsscc_info_PerformerEquipBean_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_PerformerEquipBean_default_instance_;
    new (ptr) ::mapV2::PerformerEquipBean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::PerformerEquipBean::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformerEquipBean_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerformerEquipBean_map_2eproto}, {}};

static void InitDefaultsscc_info_PerformerFashionBean_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_PerformerFashionBean_default_instance_;
    new (ptr) ::mapV2::PerformerFashionBean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::PerformerFashionBean::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformerFashionBean_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerformerFashionBean_map_2eproto}, {}};

static void InitDefaultsscc_info_PickUpMapItemRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_PickUpMapItemRequest_default_instance_;
    new (ptr) ::mapV2::PickUpMapItemRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::PickUpMapItemRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PickUpMapItemRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PickUpMapItemRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_PlayerReliveRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_PlayerReliveRequest_default_instance_;
    new (ptr) ::mapV2::PlayerReliveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::PlayerReliveRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerReliveRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerReliveRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_ReqClickEvent_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ReqClickEvent_default_instance_;
    new (ptr) ::mapV2::ReqClickEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ReqClickEvent::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqClickEvent_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqClickEvent_map_2eproto}, {}};

static void InitDefaultsscc_info_ResAllPerformerTotalHp_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResAllPerformerTotalHp_default_instance_;
    new (ptr) ::mapV2::ResAllPerformerTotalHp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResAllPerformerTotalHp::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResAllPerformerTotalHp_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResAllPerformerTotalHp_map_2eproto}, {
      &scc_info_MapBoss_map_2eproto.base,}};

static void InitDefaultsscc_info_ResBossOwner_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResBossOwner_default_instance_;
    new (ptr) ::mapV2::ResBossOwner();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResBossOwner::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResBossOwner_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResBossOwner_map_2eproto}, {}};

static void InitDefaultsscc_info_ResBufferEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResBufferEnterView_default_instance_;
    new (ptr) ::mapV2::ResBufferEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResBufferEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResBufferEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResBufferEnterView_map_2eproto}, {
      &scc_info_RoundBufferInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResCartMove_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResCartMove_default_instance_;
    new (ptr) ::mapV2::ResCartMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResCartMove::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResCartMove_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResCartMove_map_2eproto}, {}};

static void InitDefaultsscc_info_ResChangePlayer_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResChangePlayer_default_instance_;
    new (ptr) ::mapV2::ResChangePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResChangePlayer::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResChangePlayer_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResChangePlayer_map_2eproto}, {}};

static void InitDefaultsscc_info_ResChangePos_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResChangePos_default_instance_;
    new (ptr) ::mapV2::ResChangePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResChangePos::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResChangePos_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResChangePos_map_2eproto}, {}};

static void InitDefaultsscc_info_ResCollectEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResCollectEnterView_default_instance_;
    new (ptr) ::mapV2::ResCollectEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResCollectEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResCollectEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResCollectEnterView_map_2eproto}, {
      &scc_info_RoundCollectPoint_map_2eproto.base,}};

static void InitDefaultsscc_info_ResEventEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResEventEnterView_default_instance_;
    new (ptr) ::mapV2::ResEventEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResEventEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResEventEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResEventEnterView_map_2eproto}, {
      &scc_info_RoundEventInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResGatherState_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResGatherState_default_instance_;
    new (ptr) ::mapV2::ResGatherState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResGatherState::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResGatherState_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResGatherState_map_2eproto}, {}};

static void InitDefaultsscc_info_ResHeroEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResHeroEnterView_default_instance_;
    new (ptr) ::mapV2::ResHeroEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResHeroEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResHeroEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResHeroEnterView_map_2eproto}, {
      &scc_info_RoundHeroInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResItemEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResItemEnterView_default_instance_;
    new (ptr) ::mapV2::ResItemEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResItemEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResItemEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResItemEnterView_map_2eproto}, {
      &scc_info_RoundItemInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResMapObjectExitView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResMapObjectExitView_default_instance_;
    new (ptr) ::mapV2::ResMapObjectExitView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResMapObjectExitView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResMapObjectExitView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResMapObjectExitView_map_2eproto}, {}};

static void InitDefaultsscc_info_ResMonsterEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResMonsterEnterView_default_instance_;
    new (ptr) ::mapV2::ResMonsterEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResMonsterEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResMonsterEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResMonsterEnterView_map_2eproto}, {
      &scc_info_RoundMonsterInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResNoticeViewTypeInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResNoticeViewTypeInfo_default_instance_;
    new (ptr) ::mapV2::ResNoticeViewTypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResNoticeViewTypeInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResNoticeViewTypeInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResNoticeViewTypeInfo_map_2eproto}, {
      &scc_info_NoticeBean_map_2eproto.base,}};

static void InitDefaultsscc_info_ResNpcEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResNpcEnterView_default_instance_;
    new (ptr) ::mapV2::ResNpcEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResNpcEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResNpcEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResNpcEnterView_map_2eproto}, {
      &scc_info_RoundNpcInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResObjectDeadTime_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResObjectDeadTime_default_instance_;
    new (ptr) ::mapV2::ResObjectDeadTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResObjectDeadTime::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResObjectDeadTime_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResObjectDeadTime_map_2eproto}, {}};

static void InitDefaultsscc_info_ResObjectMove_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResObjectMove_default_instance_;
    new (ptr) ::mapV2::ResObjectMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResObjectMove::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResObjectMove_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResObjectMove_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPetEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPetEnterView_default_instance_;
    new (ptr) ::mapV2::ResPetEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPetEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResPetEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResPetEnterView_map_2eproto}, {
      &scc_info_RoundPetInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResPlayerChangeMap_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerChangeMap_default_instance_;
    new (ptr) ::mapV2::ResPlayerChangeMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerChangeMap::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerChangeMap_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerChangeMap_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerEnterMap_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerEnterMap_default_instance_;
    new (ptr) ::mapV2::ResPlayerEnterMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerEnterMap::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerEnterMap_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerEnterMap_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerEnterView_default_instance_;
    new (ptr) ::mapV2::ResPlayerEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResPlayerEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResPlayerEnterView_map_2eproto}, {
      &scc_info_RoundPlayerInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResPlayerFashionChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerFashionChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerFashionChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerFashionChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerFashionChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerFashionChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerJunxianChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerJunxianChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerJunxianChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerJunxianChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerJunxianChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerJunxianChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerLegendChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerLegendChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerLegendChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerLegendChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerLegendChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerLegendChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerReliveInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerReliveInfo_default_instance_;
    new (ptr) ::mapV2::ResPlayerReliveInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerReliveInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerReliveInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerReliveInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerSzSuitChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerSzSuitChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerSzSuitChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerSzSuitChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerSzSuitChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerSzSuitChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerUnionChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerUnionChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerUnionChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerUnionChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerUnionChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerUnionChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerWingChange_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPlayerWingChange_default_instance_;
    new (ptr) ::mapV2::ResPlayerWingChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPlayerWingChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerWingChange_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerWingChange_map_2eproto}, {}};

static void InitDefaultsscc_info_ResPressureValue_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResPressureValue_default_instance_;
    new (ptr) ::mapV2::ResPressureValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResPressureValue::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPressureValue_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPressureValue_map_2eproto}, {}};

static void InitDefaultsscc_info_ResRelive_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResRelive_default_instance_;
    new (ptr) ::mapV2::ResRelive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResRelive::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResRelive_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResRelive_map_2eproto}, {}};

static void InitDefaultsscc_info_ResReplacePlayer_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResReplacePlayer_default_instance_;
    new (ptr) ::mapV2::ResReplacePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResReplacePlayer::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResReplacePlayer_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResReplacePlayer_map_2eproto}, {}};

static void InitDefaultsscc_info_ResServantEnterView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResServantEnterView_default_instance_;
    new (ptr) ::mapV2::ResServantEnterView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResServantEnterView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResServantEnterView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResServantEnterView_map_2eproto}, {
      &scc_info_RoundServantInfo_map_2eproto.base,}};

static void InitDefaultsscc_info_ResSwitchFightModel_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResSwitchFightModel_default_instance_;
    new (ptr) ::mapV2::ResSwitchFightModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResSwitchFightModel::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResSwitchFightModel_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResSwitchFightModel_map_2eproto}, {}};

static void InitDefaultsscc_info_ResTombInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResTombInfo_default_instance_;
    new (ptr) ::mapV2::ResTombInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResTombInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResTombInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResTombInfo_map_2eproto}, {
      &scc_info_MonsterTomb_map_2eproto.base,}};

static void InitDefaultsscc_info_ResTryEnterMap_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResTryEnterMap_default_instance_;
    new (ptr) ::mapV2::ResTryEnterMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResTryEnterMap::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResTryEnterMap_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResTryEnterMap_map_2eproto}, {}};

static void InitDefaultsscc_info_ResUpdateEquip_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResUpdateEquip_default_instance_;
    new (ptr) ::mapV2::ResUpdateEquip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResUpdateEquip::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResUpdateEquip_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResUpdateEquip_map_2eproto}, {
      &scc_info_PerformerEquipBean_map_2eproto.base,}};

static void InitDefaultsscc_info_ResUpdateView_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_ResUpdateView_default_instance_;
    new (ptr) ::mapV2::ResUpdateView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::ResUpdateView::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ResUpdateView_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_ResUpdateView_map_2eproto}, {
      &scc_info_RoundPlayerInfo_map_2eproto.base,
      &scc_info_RoundMonsterInfo_map_2eproto.base,
      &scc_info_RoundNpcInfo_map_2eproto.base,
      &scc_info_RoundBufferInfo_map_2eproto.base,
      &scc_info_RoundPetInfo_map_2eproto.base,
      &scc_info_RoundHeroInfo_map_2eproto.base,
      &scc_info_RoundEventInfo_map_2eproto.base,
      &scc_info_RoundItemInfo_map_2eproto.base,
      &scc_info_RoundServantInfo_map_2eproto.base,
      &scc_info_RoundCollectPoint_map_2eproto.base,}};

static void InitDefaultsscc_info_RoundBufferInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundBufferInfo_default_instance_;
    new (ptr) ::mapV2::RoundBufferInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundBufferInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundBufferInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundBufferInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundCollectPoint_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundCollectPoint_default_instance_;
    new (ptr) ::mapV2::RoundCollectPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundCollectPoint::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundCollectPoint_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundCollectPoint_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundEventInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundEventInfo_default_instance_;
    new (ptr) ::mapV2::RoundEventInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundEventInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundEventInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundEventInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundHeroInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundHeroInfo_default_instance_;
    new (ptr) ::mapV2::RoundHeroInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundHeroInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundHeroInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundHeroInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundItemInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundItemInfo_default_instance_;
    new (ptr) ::mapV2::RoundItemInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundItemInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundItemInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundItemInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundMonsterInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundMonsterInfo_default_instance_;
    new (ptr) ::mapV2::RoundMonsterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundMonsterInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundMonsterInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundMonsterInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundNpcInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundNpcInfo_default_instance_;
    new (ptr) ::mapV2::RoundNpcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundNpcInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundNpcInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundNpcInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundPetInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundPetInfo_default_instance_;
    new (ptr) ::mapV2::RoundPetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundPetInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundPetInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundPetInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_RoundPlayerInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundPlayerInfo_default_instance_;
    new (ptr) ::mapV2::RoundPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundPlayerInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoundPlayerInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoundPlayerInfo_map_2eproto}, {
      &scc_info_PerformerEquipBean_map_2eproto.base,}};

static void InitDefaultsscc_info_RoundServantInfo_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_RoundServantInfo_default_instance_;
    new (ptr) ::mapV2::RoundServantInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::RoundServantInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoundServantInfo_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoundServantInfo_map_2eproto}, {}};

static void InitDefaultsscc_info_SwitchFightModelRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_SwitchFightModelRequest_default_instance_;
    new (ptr) ::mapV2::SwitchFightModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::SwitchFightModelRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchFightModelRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SwitchFightModelRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_TryEnterMapRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mapV2::_TryEnterMapRequest_default_instance_;
    new (ptr) ::mapV2::TryEnterMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapV2::TryEnterMapRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TryEnterMapRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TryEnterMapRequest_map_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[60];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerEquipBean, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerEquipBean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerEquipBean, equipindex_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerEquipBean, itemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerFashionBean, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerFashionBean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerFashionBean, fashiontype_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PerformerFashionBean, fashionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, itemid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, count_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, ownerid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, droptime_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, ownerteamid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, dropfrom_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundItemInfo, totaltime_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::mapV2::NoticeBean, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::NoticeBean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::NoticeBean, updatetype_),
  PROTOBUF_FIELD_OFFSET(::mapV2::NoticeBean, updatevalue_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, eventid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundEventInfo, z_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, bufferid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundBufferInfo, iscenterpoint_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, level_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, career_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, maxhp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, inner_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, innermax_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, teamid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, master_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, equipbean_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, wing_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, rid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, unionid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, unionname_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, titleid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, nbvalue_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, power_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, mp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, maxmp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, nbvaluemax_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, boxtime_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, tokencount_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, tokencountid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPlayerInfo, thisjunxianid_),
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  10,
  9,
  12,
  11,
  14,
  13,
  15,
  ~0u,
  18,
  16,
  17,
  1,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, maxhp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, level_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, endanimation_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, deathtime_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundMonsterInfo, killid_),
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  7,
  0,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, nid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, mapnpcid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundNpcInfo, dir_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, masterid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundPetInfo, maxhp_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, masterid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, career_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, maxhp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, inner_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, innermax_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundHeroInfo, mabirate_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  12,
  11,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, id_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, masterid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, career_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, maxhp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundServantInfo, level_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  12,
  11,
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, id_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, type_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::RoundCollectPoint, configid_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, bossid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, bosshp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MapBoss, z_),
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::MonsterTomb, nextrelivetime_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addplayers_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addmonsters_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addnpcs_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addbuffers_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addpets_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addheros_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addevents_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, additems_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, exitidlist_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, addservants_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateView, collectpoint_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterView, player_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCollectEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCollectEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCollectEnterView, collect_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBufferEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBufferEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBufferEnterView, buffer_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMonsterEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMonsterEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMonsterEnterView, monster_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNpcEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNpcEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNpcEnterView, npc_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPetEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPetEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPetEnterView, pet_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResHeroEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResHeroEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResHeroEnterView, hero_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResServantEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResServantEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResServantEnterView, servant_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMapObjectExitView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMapObjectExitView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResMapObjectExitView, lid_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, dir_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerEnterMap, mp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, line_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerChangeMap, z_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, reason_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePos, waiguacanmovetime_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectMove, z_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResEventEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResEventEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResEventEnterView, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, hp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, mp_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResRelive, inner_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResItemEnterView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResItemEnterView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResItemEnterView, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateEquip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateEquip, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResUpdateEquip, equip_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::TryEnterMapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::TryEnterMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::TryEnterMapRequest, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::TryEnterMapRequest, line_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTryEnterMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTryEnterMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTryEnterMap, mid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTryEnterMap, line_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTryEnterMap, reconnect_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResChangePlayer, playerid_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResReplacePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResReplacePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResReplacePlayer, oldid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResReplacePlayer, newid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, bossid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, name_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, unionid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, unionname_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, sex_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, career_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResBossOwner, z_),
  2,
  3,
  0,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerWingChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerWingChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerWingChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerWingChange, wing_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerUnionChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerUnionChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerUnionChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerUnionChange, unionid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerUnionChange, unionname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::PlayerReliveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PlayerReliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::PlayerReliveRequest, relivetype_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerReliveInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerReliveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerReliveInfo, diecount_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerReliveInfo, autorelivetime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerFashionChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerFashionChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerFashionChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerFashionChange, fashiontype_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerFashionChange, int32_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerJunxianChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerJunxianChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerJunxianChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerJunxianChange, junxianlevel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::SwitchFightModelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::SwitchFightModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::SwitchFightModelRequest, fightmodel_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResSwitchFightModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResSwitchFightModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResSwitchFightModel, fightmodel_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::PickUpMapItemRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::PickUpMapItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::PickUpMapItemRequest, objid_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNoticeViewTypeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNoticeViewTypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNoticeViewTypeInfo, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResNoticeViewTypeInfo, updatelist_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, mapbosslist_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, playerid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, percent_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResAllPerformerTotalHp, percentip_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPressureValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPressureValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPressureValue, pressure_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::BossOwnerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::BossOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::BossOwnerRequest, bossid_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::BossReliveTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::BossReliveTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::BossReliveTime, bossid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::BossReliveTime, relivetime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerSzSuitChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerSzSuitChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerSzSuitChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerSzSuitChange, suit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerLegendChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerLegendChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerLegendChange, lid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerLegendChange, type_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResPlayerLegendChange, legendlevel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCartMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCartMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResCartMove, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTombInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTombInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResTombInfo, tombinfos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mapV2::GatherOperatorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::GatherOperatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::GatherOperatorRequest, type_),
  PROTOBUF_FIELD_OFFSET(::mapV2::GatherOperatorRequest, lid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, roleid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, type_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, time_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, state_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, ismonster_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, x_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, y_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, z_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, deadtime_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, ownerid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResGatherState, lid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  10,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::mapV2::ReqClickEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ReqClickEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ReqClickEvent, groundeventid_),
  0,
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, id_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, killid_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, killname_),
  PROTOBUF_FIELD_OFFSET(::mapV2::ResObjectDeadTime, deadtime_),
  1,
  2,
  0,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mapV2::PerformerEquipBean)},
  { 9, 16, sizeof(::mapV2::PerformerFashionBean)},
  { 18, 34, sizeof(::mapV2::RoundItemInfo)},
  { 45, 52, sizeof(::mapV2::NoticeBean)},
  { 54, 64, sizeof(::mapV2::RoundEventInfo)},
  { 69, 80, sizeof(::mapV2::RoundBufferInfo)},
  { 86, 121, sizeof(::mapV2::RoundPlayerInfo)},
  { 151, 169, sizeof(::mapV2::RoundMonsterInfo)},
  { 182, 194, sizeof(::mapV2::RoundNpcInfo)},
  { 201, 216, sizeof(::mapV2::RoundPetInfo)},
  { 226, 246, sizeof(::mapV2::RoundHeroInfo)},
  { 261, 279, sizeof(::mapV2::RoundServantInfo)},
  { 292, 303, sizeof(::mapV2::RoundCollectPoint)},
  { 309, 320, sizeof(::mapV2::MapBoss)},
  { 326, 337, sizeof(::mapV2::MonsterTomb)},
  { 343, 359, sizeof(::mapV2::ResUpdateView)},
  { 370, 376, sizeof(::mapV2::ResPlayerEnterView)},
  { 377, 383, sizeof(::mapV2::ResCollectEnterView)},
  { 384, 390, sizeof(::mapV2::ResBufferEnterView)},
  { 391, 397, sizeof(::mapV2::ResMonsterEnterView)},
  { 398, 404, sizeof(::mapV2::ResNpcEnterView)},
  { 405, 411, sizeof(::mapV2::ResPetEnterView)},
  { 412, 418, sizeof(::mapV2::ResHeroEnterView)},
  { 419, 425, sizeof(::mapV2::ResServantEnterView)},
  { 426, 432, sizeof(::mapV2::ResMapObjectExitView)},
  { 433, 445, sizeof(::mapV2::ResPlayerEnterMap)},
  { 452, 462, sizeof(::mapV2::ResPlayerChangeMap)},
  { 467, 478, sizeof(::mapV2::ResChangePos)},
  { 484, 493, sizeof(::mapV2::ResObjectMove)},
  { 497, 503, sizeof(::mapV2::ResEventEnterView)},
  { 504, 513, sizeof(::mapV2::ResRelive)},
  { 517, 523, sizeof(::mapV2::ResItemEnterView)},
  { 524, 531, sizeof(::mapV2::ResUpdateEquip)},
  { 533, 540, sizeof(::mapV2::TryEnterMapRequest)},
  { 542, 550, sizeof(::mapV2::ResTryEnterMap)},
  { 553, 559, sizeof(::mapV2::ResChangePlayer)},
  { 560, 567, sizeof(::mapV2::ResReplacePlayer)},
  { 569, 584, sizeof(::mapV2::ResBossOwner)},
  { 594, 601, sizeof(::mapV2::ResPlayerWingChange)},
  { 603, 611, sizeof(::mapV2::ResPlayerUnionChange)},
  { 614, 620, sizeof(::mapV2::PlayerReliveRequest)},
  { 621, 628, sizeof(::mapV2::ResPlayerReliveInfo)},
  { 630, 638, sizeof(::mapV2::ResPlayerFashionChange)},
  { 641, 648, sizeof(::mapV2::ResPlayerJunxianChange)},
  { 650, 656, sizeof(::mapV2::SwitchFightModelRequest)},
  { 657, 663, sizeof(::mapV2::ResSwitchFightModel)},
  { 664, 670, sizeof(::mapV2::PickUpMapItemRequest)},
  { 671, 678, sizeof(::mapV2::ResNoticeViewTypeInfo)},
  { 680, 689, sizeof(::mapV2::ResAllPerformerTotalHp)},
  { 693, 699, sizeof(::mapV2::ResPressureValue)},
  { 700, 706, sizeof(::mapV2::BossOwnerRequest)},
  { 707, 714, sizeof(::mapV2::BossReliveTime)},
  { 716, 723, sizeof(::mapV2::ResPlayerSzSuitChange)},
  { 725, 733, sizeof(::mapV2::ResPlayerLegendChange)},
  { 736, 742, sizeof(::mapV2::ResCartMove)},
  { 743, 749, sizeof(::mapV2::ResTombInfo)},
  { 750, 757, sizeof(::mapV2::GatherOperatorRequest)},
  { 759, 775, sizeof(::mapV2::ResGatherState)},
  { 786, 792, sizeof(::mapV2::ReqClickEvent)},
  { 793, 802, sizeof(::mapV2::ResObjectDeadTime)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_PerformerEquipBean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_PerformerFashionBean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_NoticeBean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundEventInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundBufferInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundMonsterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundNpcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundPetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundHeroInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundServantInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_RoundCollectPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_MapBoss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_MonsterTomb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResUpdateView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResCollectEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResBufferEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResMonsterEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResNpcEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPetEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResHeroEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResServantEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResMapObjectExitView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerEnterMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerChangeMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResChangePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResObjectMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResEventEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResRelive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResItemEnterView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResUpdateEquip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_TryEnterMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResTryEnterMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResChangePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResReplacePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResBossOwner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerWingChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerUnionChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_PlayerReliveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerReliveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerFashionChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerJunxianChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_SwitchFightModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResSwitchFightModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_PickUpMapItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResNoticeViewTypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResAllPerformerTotalHp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPressureValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_BossOwnerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_BossReliveTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerSzSuitChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResPlayerLegendChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResCartMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResTombInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_GatherOperatorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResGatherState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ReqClickEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mapV2::_ResObjectDeadTime_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] =
  "\n\tmap.proto\022\005mapV2\"8\n\022PerformerEquipBean"
  "\022\022\n\nequipIndex\030\001 \001(\005\022\016\n\006itemId\030\002 \001(\005\">\n\024"
  "PerformerFashionBean\022\023\n\013fashionType\030\001 \001("
  "\005\022\021\n\tfashionId\030\002 \001(\005\"\271\001\n\rRoundItemInfo\022\013"
  "\n\003lid\030\001 \001(\003\022\016\n\006itemId\030\002 \001(\005\022\r\n\005count\030\003 \001"
  "(\005\022\017\n\007ownerId\030\004 \001(\003\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001("
  "\002\022\t\n\001z\030\007 \001(\002\022\020\n\010dropTime\030\010 \001(\003\022\023\n\013ownerT"
  "eamId\030\t \001(\003\022\020\n\010dropFrom\030\n \001(\003\022\021\n\ttotalTi"
  "me\030\013 \001(\003\"5\n\nNoticeBean\022\022\n\nupdateType\030\001 \001"
  "(\005\022\023\n\013updateValue\030\002 \001(\003\"O\n\016RoundEventInf"
  "o\022\013\n\003lid\030\001 \001(\003\022\017\n\007eventId\030\002 \001(\003\022\t\n\001x\030\003 \001"
  "(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\"h\n\017RoundBufferI"
  "nfo\022\013\n\003lid\030\001 \001(\003\022\020\n\010bufferId\030\002 \001(\005\022\t\n\001x\030"
  "\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\025\n\risCenterP"
  "oint\030\006 \001(\010\"\201\004\n\017RoundPlayerInfo\022\013\n\003lid\030\001 "
  "\001(\003\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003"
  "dir\030\005 \001(\002\022\014\n\004name\030\006 \001(\t\022\r\n\005level\030\007 \001(\005\022\016"
  "\n\006career\030\010 \001(\005\022\013\n\003sex\030\t \001(\005\022\n\n\002hp\030\n \001(\003\022"
  "\r\n\005maxHp\030\013 \001(\003\022\r\n\005inner\030\014 \001(\005\022\020\n\010innerMa"
  "x\030\r \001(\005\022\016\n\006teamId\030\016 \001(\003\022\016\n\006master\030\017 \001(\005\022"
  ",\n\tequipBean\030\020 \003(\0132\031.mapV2.PerformerEqui"
  "pBean\022\014\n\004wing\030\022 \001(\005\022\013\n\003rid\030\023 \001(\003\022\017\n\007unio"
  "nId\030\024 \001(\003\022\021\n\tunionName\030\025 \001(\t\022\017\n\007titleId\030"
  "\026 \001(\005\022\017\n\007nbValue\030\027 \001(\005\022\r\n\005power\030\030 \001(\005\022\n\n"
  "\002mp\030\031 \001(\003\022\r\n\005maxMp\030\032 \001(\003\022\022\n\nnbValueMax\030\033"
  " \001(\005\022\017\n\007boxTime\030\034 \001(\005\022\022\n\ntokenCount\030\035 \001("
  "\005\022\024\n\014tokenCountId\030\036 \001(\005\022\025\n\rthisJunXianId"
  "\030  \001(\005\"\313\001\n\020RoundMonsterInfo\022\013\n\003lid\030\001 \001(\003"
  "\022\013\n\003mid\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z"
  "\030\005 \001(\002\022\013\n\003dir\030\006 \001(\002\022\n\n\002hp\030\007 \001(\003\022\r\n\005maxHp"
  "\030\010 \001(\003\022\014\n\004name\030\t \001(\t\022\r\n\005level\030\n \001(\005\022\024\n\014e"
  "ndAnimation\030\014 \001(\003\022\021\n\tdeathTime\030\r \001(\003\022\016\n\006"
  "killId\030\016 \001(\003\"h\n\014RoundNpcInfo\022\013\n\003lid\030\001 \001("
  "\003\022\013\n\003nid\030\002 \001(\005\022\020\n\010mapNpcId\030\003 \001(\005\022\t\n\001x\030\004 "
  "\001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022\013\n\003dir\030\007 \001(\002\"\221"
  "\001\n\014RoundPetInfo\022\013\n\003lid\030\001 \001(\003\022\020\n\010masterId"
  "\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\013\n\003mid\030\004 \001(\005\022\t\n\001x\030\005"
  " \001(\002\022\t\n\001y\030\006 \001(\002\022\t\n\001z\030\007 \001(\002\022\013\n\003dir\030\010 \001(\002\022"
  "\n\n\002hp\030\t \001(\003\022\r\n\005maxHp\030\n \001(\003\"\342\001\n\rRoundHero"
  "Info\022\013\n\003lid\030\001 \001(\003\022\020\n\010masterId\030\002 \001(\003\022\014\n\004n"
  "ame\030\003 \001(\t\022\016\n\006career\030\004 \001(\005\022\013\n\003sex\030\005 \001(\005\022\013"
  "\n\003mid\030\006 \001(\005\022\t\n\001x\030\007 \001(\002\022\t\n\001y\030\010 \001(\002\022\t\n\001z\030\t"
  " \001(\002\022\013\n\003dir\030\n \001(\002\022\n\n\002hp\030\013 \001(\003\022\r\n\005maxHp\030\014"
  " \001(\003\022\r\n\005inner\030\r \001(\005\022\020\n\010innerMax\030\016 \001(\005\022\020\n"
  "\010maBiRate\030\017 \001(\005\"\300\001\n\020RoundServantInfo\022\n\n\002"
  "id\030\001 \001(\003\022\020\n\010masterId\030\002 \001(\003\022\014\n\004name\030\003 \001(\t"
  "\022\016\n\006career\030\004 \001(\005\022\013\n\003sex\030\005 \001(\005\022\013\n\003mid\030\006 \001"
  "(\005\022\t\n\001x\030\007 \001(\002\022\t\n\001y\030\010 \001(\002\022\t\n\001z\030\t \001(\002\022\013\n\003d"
  "ir\030\n \001(\002\022\n\n\002hp\030\013 \001(\003\022\r\n\005maxHp\030\014 \001(\003\022\r\n\005l"
  "evel\030\r \001(\005\"`\n\021RoundCollectPoint\022\n\n\002id\030\001 "
  "\001(\003\022\014\n\004type\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022"
  "\t\n\001z\030\005 \001(\002\022\020\n\010configId\030\006 \001(\005\"W\n\007MapBoss\022"
  "\016\n\006bossId\030\001 \001(\003\022\013\n\003mid\030\002 \001(\005\022\016\n\006bossHp\030\003"
  " \001(\003\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\"`\n"
  "\013MonsterTomb\022\013\n\003lid\030\001 \001(\003\022\013\n\003mid\030\002 \001(\005\022\t"
  "\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\026\n\016nextR"
  "eliveTime\030\006 \001(\005\"\315\003\n\rResUpdateView\022*\n\nadd"
  "Players\030\001 \003(\0132\026.mapV2.RoundPlayerInfo\022,\n"
  "\013addMonsters\030\002 \003(\0132\027.mapV2.RoundMonsterI"
  "nfo\022$\n\007addNpcs\030\003 \003(\0132\023.mapV2.RoundNpcInf"
  "o\022*\n\naddBuffers\030\004 \003(\0132\026.mapV2.RoundBuffe"
  "rInfo\022$\n\007addPets\030\005 \003(\0132\023.mapV2.RoundPetI"
  "nfo\022&\n\010addHeros\030\006 \003(\0132\024.mapV2.RoundHeroI"
  "nfo\022(\n\taddEvents\030\007 \003(\0132\025.mapV2.RoundEven"
  "tInfo\022&\n\010addItems\030\010 \003(\0132\024.mapV2.RoundIte"
  "mInfo\022\022\n\nexitIdList\030\t \003(\003\022,\n\013addServants"
  "\030\n \003(\0132\027.mapV2.RoundServantInfo\022.\n\014colle"
  "ctPoint\030\013 \003(\0132\030.mapV2.RoundCollectPoint\""
  "<\n\022ResPlayerEnterView\022&\n\006player\030\001 \002(\0132\026."
  "mapV2.RoundPlayerInfo\"@\n\023ResCollectEnter"
  "View\022)\n\007collect\030\001 \002(\0132\030.mapV2.RoundColle"
  "ctPoint\"<\n\022ResBufferEnterView\022&\n\006buffer\030"
  "\001 \002(\0132\026.mapV2.RoundBufferInfo\"\?\n\023ResMons"
  "terEnterView\022(\n\007monster\030\001 \002(\0132\027.mapV2.Ro"
  "undMonsterInfo\"3\n\017ResNpcEnterView\022 \n\003npc"
  "\030\001 \002(\0132\023.mapV2.RoundNpcInfo\"3\n\017ResPetEnt"
  "erView\022 \n\003pet\030\001 \002(\0132\023.mapV2.RoundPetInfo"
  "\"6\n\020ResHeroEnterView\022\"\n\004hero\030\001 \002(\0132\024.map"
  "V2.RoundHeroInfo\"\?\n\023ResServantEnterView\022"
  "(\n\007servant\030\001 \002(\0132\027.mapV2.RoundServantInf"
  "o\"#\n\024ResMapObjectExitView\022\013\n\003lid\030\001 \001(\003\"f"
  "\n\021ResPlayerEnterMap\022\013\n\003lid\030\001 \001(\003\022\t\n\001x\030\002 "
  "\001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003dir\030\005 \001(\002\022\n"
  "\n\002hp\030\006 \001(\005\022\n\n\002mp\030\007 \001(\005\"P\n\022ResPlayerChang"
  "eMap\022\013\n\003mid\030\001 \001(\005\022\014\n\004line\030\002 \001(\005\022\t\n\001x\030\003 \001"
  "(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\"g\n\014ResChangePos"
  "\022\013\n\003lid\030\001 \001(\003\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z"
  "\030\004 \001(\002\022\016\n\006reason\030\005 \001(\005\022\031\n\021waiGuaCanMoveT"
  "ime\030\006 \001(\005\"=\n\rResObjectMove\022\013\n\003lid\030\001 \001(\003\022"
  "\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"8\n\021ResE"
  "ventEnterView\022#\n\004info\030\001 \001(\0132\025.mapV2.Roun"
  "dEventInfo\"\?\n\tResRelive\022\013\n\003lid\030\001 \001(\003\022\n\n\002"
  "hp\030\002 \001(\003\022\n\n\002mp\030\003 \001(\005\022\r\n\005inner\030\004 \001(\005\"6\n\020R"
  "esItemEnterView\022\"\n\004info\030\001 \001(\0132\024.mapV2.Ro"
  "undItemInfo\"G\n\016ResUpdateEquip\022\013\n\003lid\030\001 \001"
  "(\003\022(\n\005equip\030\002 \001(\0132\031.mapV2.PerformerEquip"
  "Bean\"/\n\022TryEnterMapRequest\022\013\n\003mid\030\001 \002(\005\022"
  "\014\n\004line\030\002 \002(\005\">\n\016ResTryEnterMap\022\013\n\003mid\030\001"
  " \002(\005\022\014\n\004line\030\002 \002(\005\022\021\n\treconnect\030\003 \001(\010\"#\n"
  "\017ResChangePlayer\022\020\n\010playerId\030\001 \002(\003\"0\n\020Re"
  "sReplacePlayer\022\r\n\005oldId\030\001 \002(\003\022\r\n\005newId\030\002"
  " \002(\003\"\233\001\n\014ResBossOwner\022\016\n\006bossId\030\001 \001(\003\022\013\n"
  "\003lid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\017\n\007unionId\030\004 \001("
  "\003\022\021\n\tunionName\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\022\016\n\006car"
  "eer\030\007 \001(\005\022\t\n\001x\030\010 \001(\002\022\t\n\001y\030\t \001(\002\022\t\n\001z\030\n \001"
  "(\002\"0\n\023ResPlayerWingChange\022\013\n\003lid\030\001 \002(\003\022\014"
  "\n\004wing\030\002 \002(\005\"G\n\024ResPlayerUnionChange\022\013\n\003"
  "lid\030\001 \002(\003\022\017\n\007unionId\030\002 \002(\003\022\021\n\tunionName\030"
  "\003 \002(\t\")\n\023PlayerReliveRequest\022\022\n\nreliveTy"
  "pe\030\001 \002(\005\"\?\n\023ResPlayerReliveInfo\022\020\n\010dieCo"
  "unt\030\001 \002(\005\022\026\n\016autoReliveTime\030\002 \002(\005\"I\n\026Res"
  "PlayerFashionChange\022\013\n\003lid\030\001 \002(\003\022\023\n\013fash"
  "ionType\030\002 \002(\005\022\r\n\005int32\030\003 \002(\005\";\n\026ResPlaye"
  "rJunxianChange\022\013\n\003lid\030\001 \002(\003\022\024\n\014junxianLe"
  "vel\030\002 \002(\005\"-\n\027SwitchFightModelRequest\022\022\n\n"
  "fightModel\030\001 \002(\005\")\n\023ResSwitchFightModel\022"
  "\022\n\nfightModel\030\001 \002(\005\"%\n\024PickUpMapItemRequ"
  "est\022\r\n\005objId\030\001 \002(\003\"K\n\025ResNoticeViewTypeI"
  "nfo\022\013\n\003lid\030\001 \002(\003\022%\n\nupdateList\030\002 \003(\0132\021.m"
  "apV2.NoticeBean\"s\n\026ResAllPerformerTotalH"
  "p\022#\n\013mapBossList\030\001 \003(\0132\016.mapV2.MapBoss\022\020"
  "\n\010playerId\030\002 \003(\003\022\017\n\007percent\030\003 \003(\014\022\021\n\tper"
  "centIp\030\004 \003(\014\"$\n\020ResPressureValue\022\020\n\010pres"
  "sure\030\001 \002(\005\"\"\n\020BossOwnerRequest\022\016\n\006bossId"
  "\030\001 \002(\003\"4\n\016BossReliveTime\022\016\n\006bossId\030\001 \002(\003"
  "\022\022\n\nreliveTime\030\002 \002(\005\"2\n\025ResPlayerSzSuitC"
  "hange\022\013\n\003lid\030\001 \002(\003\022\014\n\004suit\030\002 \002(\005\"G\n\025ResP"
  "layerLegendChange\022\013\n\003lid\030\001 \002(\003\022\014\n\004type\030\002"
  " \002(\005\022\023\n\013legendLevel\030\003 \002(\005\"\034\n\013ResCartMove"
  "\022\r\n\005state\030\001 \002(\005\"4\n\013ResTombInfo\022%\n\ttombIn"
  "fos\030\001 \003(\0132\022.mapV2.MonsterTomb\"2\n\025GatherO"
  "peratorRequest\022\014\n\004type\030\001 \002(\005\022\013\n\003lid\030\002 \002("
  "\003\"\257\001\n\016ResGatherState\022\016\n\006roleId\030\001 \001(\003\022\014\n\004"
  "type\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\r\n\005state\030\004 \001(\005\022"
  "\021\n\tisMonster\030\005 \001(\010\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007 \001(\002"
  "\022\t\n\001z\030\010 \001(\002\022\020\n\010deadTime\030\t \001(\003\022\017\n\007ownerId"
  "\030\n \001(\003\022\013\n\003lid\030\013 \001(\003\"&\n\rReqClickEvent\022\025\n\r"
  "groundEventId\030\001 \002(\003\"S\n\021ResObjectDeadTime"
  "\022\n\n\002id\030\001 \001(\003\022\016\n\006killid\030\002 \001(\003\022\020\n\010killName"
  "\030\003 \001(\t\022\020\n\010deadTime\030\004 \001(\003B\035\n\021com.sh.game."
  "protoB\010MapProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[60] = {
  &scc_info_BossOwnerRequest_map_2eproto.base,
  &scc_info_BossReliveTime_map_2eproto.base,
  &scc_info_GatherOperatorRequest_map_2eproto.base,
  &scc_info_MapBoss_map_2eproto.base,
  &scc_info_MonsterTomb_map_2eproto.base,
  &scc_info_NoticeBean_map_2eproto.base,
  &scc_info_PerformerEquipBean_map_2eproto.base,
  &scc_info_PerformerFashionBean_map_2eproto.base,
  &scc_info_PickUpMapItemRequest_map_2eproto.base,
  &scc_info_PlayerReliveRequest_map_2eproto.base,
  &scc_info_ReqClickEvent_map_2eproto.base,
  &scc_info_ResAllPerformerTotalHp_map_2eproto.base,
  &scc_info_ResBossOwner_map_2eproto.base,
  &scc_info_ResBufferEnterView_map_2eproto.base,
  &scc_info_ResCartMove_map_2eproto.base,
  &scc_info_ResChangePlayer_map_2eproto.base,
  &scc_info_ResChangePos_map_2eproto.base,
  &scc_info_ResCollectEnterView_map_2eproto.base,
  &scc_info_ResEventEnterView_map_2eproto.base,
  &scc_info_ResGatherState_map_2eproto.base,
  &scc_info_ResHeroEnterView_map_2eproto.base,
  &scc_info_ResItemEnterView_map_2eproto.base,
  &scc_info_ResMapObjectExitView_map_2eproto.base,
  &scc_info_ResMonsterEnterView_map_2eproto.base,
  &scc_info_ResNoticeViewTypeInfo_map_2eproto.base,
  &scc_info_ResNpcEnterView_map_2eproto.base,
  &scc_info_ResObjectDeadTime_map_2eproto.base,
  &scc_info_ResObjectMove_map_2eproto.base,
  &scc_info_ResPetEnterView_map_2eproto.base,
  &scc_info_ResPlayerChangeMap_map_2eproto.base,
  &scc_info_ResPlayerEnterMap_map_2eproto.base,
  &scc_info_ResPlayerEnterView_map_2eproto.base,
  &scc_info_ResPlayerFashionChange_map_2eproto.base,
  &scc_info_ResPlayerJunxianChange_map_2eproto.base,
  &scc_info_ResPlayerLegendChange_map_2eproto.base,
  &scc_info_ResPlayerReliveInfo_map_2eproto.base,
  &scc_info_ResPlayerSzSuitChange_map_2eproto.base,
  &scc_info_ResPlayerUnionChange_map_2eproto.base,
  &scc_info_ResPlayerWingChange_map_2eproto.base,
  &scc_info_ResPressureValue_map_2eproto.base,
  &scc_info_ResRelive_map_2eproto.base,
  &scc_info_ResReplacePlayer_map_2eproto.base,
  &scc_info_ResServantEnterView_map_2eproto.base,
  &scc_info_ResSwitchFightModel_map_2eproto.base,
  &scc_info_ResTombInfo_map_2eproto.base,
  &scc_info_ResTryEnterMap_map_2eproto.base,
  &scc_info_ResUpdateEquip_map_2eproto.base,
  &scc_info_ResUpdateView_map_2eproto.base,
  &scc_info_RoundBufferInfo_map_2eproto.base,
  &scc_info_RoundCollectPoint_map_2eproto.base,
  &scc_info_RoundEventInfo_map_2eproto.base,
  &scc_info_RoundHeroInfo_map_2eproto.base,
  &scc_info_RoundItemInfo_map_2eproto.base,
  &scc_info_RoundMonsterInfo_map_2eproto.base,
  &scc_info_RoundNpcInfo_map_2eproto.base,
  &scc_info_RoundPetInfo_map_2eproto.base,
  &scc_info_RoundPlayerInfo_map_2eproto.base,
  &scc_info_RoundServantInfo_map_2eproto.base,
  &scc_info_SwitchFightModelRequest_map_2eproto.base,
  &scc_info_TryEnterMapRequest_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 5615,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 60, 0,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 60, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace mapV2 {

// ===================================================================

void PerformerEquipBean::InitAsDefaultInstance() {
}
class PerformerEquipBean::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<PerformerEquipBean>()._has_bits_);
  static void set_has_equipindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformerEquipBean::kEquipIndexFieldNumber;
const int PerformerEquipBean::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformerEquipBean::PerformerEquipBean()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.PerformerEquipBean)
}
PerformerEquipBean::PerformerEquipBean(const PerformerEquipBean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equipindex_, &from.equipindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&equipindex_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.PerformerEquipBean)
}

void PerformerEquipBean::SharedCtor() {
  ::memset(&equipindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&equipindex_)) + sizeof(itemid_));
}

PerformerEquipBean::~PerformerEquipBean() {
  // @@protoc_insertion_point(destructor:mapV2.PerformerEquipBean)
  SharedDtor();
}

void PerformerEquipBean::SharedDtor() {
}

void PerformerEquipBean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformerEquipBean& PerformerEquipBean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformerEquipBean_map_2eproto.base);
  return *internal_default_instance();
}


void PerformerEquipBean::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.PerformerEquipBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&equipindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&equipindex_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformerEquipBean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 equipIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_equipindex(&has_bits);
          equipindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformerEquipBean::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.PerformerEquipBean)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equipIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_equipindex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.PerformerEquipBean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.PerformerEquipBean)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformerEquipBean::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.PerformerEquipBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 equipIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->equipindex(), output);
  }

  // optional int32 itemId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.PerformerEquipBean)
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformerEquipBean::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.PerformerEquipBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 equipIndex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->equipindex(), target);
  }

  // optional int32 itemId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.PerformerEquipBean)
  return target;
}

size_t PerformerEquipBean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.PerformerEquipBean)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 equipIndex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->equipindex());
    }

    // optional int32 itemId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerEquipBean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.PerformerEquipBean)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformerEquipBean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformerEquipBean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.PerformerEquipBean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.PerformerEquipBean)
    MergeFrom(*source);
  }
}

void PerformerEquipBean::MergeFrom(const PerformerEquipBean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.PerformerEquipBean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      equipindex_ = from.equipindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerformerEquipBean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.PerformerEquipBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformerEquipBean::CopyFrom(const PerformerEquipBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.PerformerEquipBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerEquipBean::IsInitialized() const {
  return true;
}

void PerformerEquipBean::Swap(PerformerEquipBean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformerEquipBean::InternalSwap(PerformerEquipBean* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(equipindex_, other->equipindex_);
  swap(itemid_, other->itemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformerEquipBean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerformerFashionBean::InitAsDefaultInstance() {
}
class PerformerFashionBean::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<PerformerFashionBean>()._has_bits_);
  static void set_has_fashiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fashionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformerFashionBean::kFashionTypeFieldNumber;
const int PerformerFashionBean::kFashionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformerFashionBean::PerformerFashionBean()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.PerformerFashionBean)
}
PerformerFashionBean::PerformerFashionBean(const PerformerFashionBean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fashiontype_, &from.fashiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&fashionid_) -
    reinterpret_cast<char*>(&fashiontype_)) + sizeof(fashionid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.PerformerFashionBean)
}

void PerformerFashionBean::SharedCtor() {
  ::memset(&fashiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fashionid_) -
      reinterpret_cast<char*>(&fashiontype_)) + sizeof(fashionid_));
}

PerformerFashionBean::~PerformerFashionBean() {
  // @@protoc_insertion_point(destructor:mapV2.PerformerFashionBean)
  SharedDtor();
}

void PerformerFashionBean::SharedDtor() {
}

void PerformerFashionBean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformerFashionBean& PerformerFashionBean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformerFashionBean_map_2eproto.base);
  return *internal_default_instance();
}


void PerformerFashionBean::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.PerformerFashionBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fashiontype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fashionid_) -
        reinterpret_cast<char*>(&fashiontype_)) + sizeof(fashionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformerFashionBean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fashionType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_fashiontype(&has_bits);
          fashiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fashionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_fashionid(&has_bits);
          fashionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformerFashionBean::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.PerformerFashionBean)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fashionType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fashiontype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fashionId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fashionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.PerformerFashionBean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.PerformerFashionBean)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformerFashionBean::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.PerformerFashionBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fashionType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fashiontype(), output);
  }

  // optional int32 fashionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->fashionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.PerformerFashionBean)
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformerFashionBean::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.PerformerFashionBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fashionType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->fashiontype(), target);
  }

  // optional int32 fashionId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->fashionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.PerformerFashionBean)
  return target;
}

size_t PerformerFashionBean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.PerformerFashionBean)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 fashionType = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fashiontype());
    }

    // optional int32 fashionId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerFashionBean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.PerformerFashionBean)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformerFashionBean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformerFashionBean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.PerformerFashionBean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.PerformerFashionBean)
    MergeFrom(*source);
  }
}

void PerformerFashionBean::MergeFrom(const PerformerFashionBean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.PerformerFashionBean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fashiontype_ = from.fashiontype_;
    }
    if (cached_has_bits & 0x00000002u) {
      fashionid_ = from.fashionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerformerFashionBean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.PerformerFashionBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformerFashionBean::CopyFrom(const PerformerFashionBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.PerformerFashionBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerFashionBean::IsInitialized() const {
  return true;
}

void PerformerFashionBean::Swap(PerformerFashionBean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformerFashionBean::InternalSwap(PerformerFashionBean* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fashiontype_, other->fashiontype_);
  swap(fashionid_, other->fashionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformerFashionBean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundItemInfo::InitAsDefaultInstance() {
}
class RoundItemInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundItemInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ownerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_droptime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ownerteamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dropfrom(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_totaltime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundItemInfo::kLidFieldNumber;
const int RoundItemInfo::kItemIdFieldNumber;
const int RoundItemInfo::kCountFieldNumber;
const int RoundItemInfo::kOwnerIdFieldNumber;
const int RoundItemInfo::kXFieldNumber;
const int RoundItemInfo::kYFieldNumber;
const int RoundItemInfo::kZFieldNumber;
const int RoundItemInfo::kDropTimeFieldNumber;
const int RoundItemInfo::kOwnerTeamIdFieldNumber;
const int RoundItemInfo::kDropFromFieldNumber;
const int RoundItemInfo::kTotalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundItemInfo::RoundItemInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundItemInfo)
}
RoundItemInfo::RoundItemInfo(const RoundItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundItemInfo)
}

void RoundItemInfo::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(z_));
}

RoundItemInfo::~RoundItemInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundItemInfo)
  SharedDtor();
}

void RoundItemInfo::SharedDtor() {
}

void RoundItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundItemInfo& RoundItemInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundItemInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ownerteamid_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(ownerteamid_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&dropfrom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&dropfrom_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ownerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_ownerid(&has_bits);
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 dropTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_droptime(&has_bits);
          droptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ownerTeamId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_ownerteamid(&has_bits);
          ownerteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 dropFrom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_dropfrom(&has_bits);
          dropfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 totalTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          HasBitSetters::set_has_totaltime(&has_bits);
          totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundItemInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundItemInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_itemid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ownerId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ownerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dropTime = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_droptime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &droptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ownerTeamId = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_ownerteamid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerteamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dropFrom = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_dropfrom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 totalTime = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_totaltime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundItemInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundItemInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int32 itemId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int64 ownerId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->ownerid(), output);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // optional float z = 7;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->z(), output);
  }

  // optional int64 dropTime = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->droptime(), output);
  }

  // optional int64 ownerTeamId = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->ownerteamid(), output);
  }

  // optional int64 dropFrom = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->dropfrom(), output);
  }

  // optional int64 totalTime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->totaltime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundItemInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundItemInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int32 itemId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int64 ownerId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->ownerid(), target);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // optional float z = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->z(), target);
  }

  // optional int64 dropTime = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->droptime(), target);
  }

  // optional int64 ownerTeamId = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->ownerteamid(), target);
  }

  // optional int64 dropFrom = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->dropfrom(), target);
  }

  // optional int64 totalTime = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->totaltime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundItemInfo)
  return target;
}

size_t RoundItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundItemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int32 itemId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 ownerId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ownerid());
    }

    // optional float x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int64 dropTime = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->droptime());
    }

    // optional int64 ownerTeamId = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ownerteamid());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 dropFrom = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->dropfrom());
    }

    // optional int64 totalTime = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->totaltime());
    }

    // optional float z = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundItemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundItemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundItemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundItemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundItemInfo)
    MergeFrom(*source);
  }
}

void RoundItemInfo::MergeFrom(const RoundItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      droptime_ = from.droptime_;
    }
    if (cached_has_bits & 0x00000080u) {
      ownerteamid_ = from.ownerteamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      dropfrom_ = from.dropfrom_;
    }
    if (cached_has_bits & 0x00000200u) {
      totaltime_ = from.totaltime_;
    }
    if (cached_has_bits & 0x00000400u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundItemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundItemInfo::CopyFrom(const RoundItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundItemInfo::IsInitialized() const {
  return true;
}

void RoundItemInfo::Swap(RoundItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundItemInfo::InternalSwap(RoundItemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(itemid_, other->itemid_);
  swap(count_, other->count_);
  swap(ownerid_, other->ownerid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(droptime_, other->droptime_);
  swap(ownerteamid_, other->ownerteamid_);
  swap(dropfrom_, other->dropfrom_);
  swap(totaltime_, other->totaltime_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundItemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoticeBean::InitAsDefaultInstance() {
}
class NoticeBean::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<NoticeBean>()._has_bits_);
  static void set_has_updatetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_updatevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoticeBean::kUpdateTypeFieldNumber;
const int NoticeBean::kUpdateValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoticeBean::NoticeBean()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.NoticeBean)
}
NoticeBean::NoticeBean(const NoticeBean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&updatevalue_, &from.updatevalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatetype_) -
    reinterpret_cast<char*>(&updatevalue_)) + sizeof(updatetype_));
  // @@protoc_insertion_point(copy_constructor:mapV2.NoticeBean)
}

void NoticeBean::SharedCtor() {
  ::memset(&updatevalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatetype_) -
      reinterpret_cast<char*>(&updatevalue_)) + sizeof(updatetype_));
}

NoticeBean::~NoticeBean() {
  // @@protoc_insertion_point(destructor:mapV2.NoticeBean)
  SharedDtor();
}

void NoticeBean::SharedDtor() {
}

void NoticeBean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoticeBean& NoticeBean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoticeBean_map_2eproto.base);
  return *internal_default_instance();
}


void NoticeBean::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.NoticeBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&updatevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updatetype_) -
        reinterpret_cast<char*>(&updatevalue_)) + sizeof(updatetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NoticeBean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 updateType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_updatetype(&has_bits);
          updatetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 updateValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_updatevalue(&has_bits);
          updatevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NoticeBean::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.NoticeBean)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 updateType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_updatetype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 updateValue = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_updatevalue(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatevalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.NoticeBean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.NoticeBean)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NoticeBean::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.NoticeBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 updateType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->updatetype(), output);
  }

  // optional int64 updateValue = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->updatevalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.NoticeBean)
}

::PROTOBUF_NAMESPACE_ID::uint8* NoticeBean::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.NoticeBean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 updateType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->updatetype(), target);
  }

  // optional int64 updateValue = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->updatevalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.NoticeBean)
  return target;
}

size_t NoticeBean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.NoticeBean)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 updateValue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->updatevalue());
    }

    // optional int32 updateType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->updatetype());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoticeBean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.NoticeBean)
  GOOGLE_DCHECK_NE(&from, this);
  const NoticeBean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoticeBean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.NoticeBean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.NoticeBean)
    MergeFrom(*source);
  }
}

void NoticeBean::MergeFrom(const NoticeBean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.NoticeBean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      updatevalue_ = from.updatevalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      updatetype_ = from.updatetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoticeBean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.NoticeBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeBean::CopyFrom(const NoticeBean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.NoticeBean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeBean::IsInitialized() const {
  return true;
}

void NoticeBean::Swap(NoticeBean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoticeBean::InternalSwap(NoticeBean* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(updatevalue_, other->updatevalue_);
  swap(updatetype_, other->updatetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoticeBean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundEventInfo::InitAsDefaultInstance() {
}
class RoundEventInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundEventInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundEventInfo::kLidFieldNumber;
const int RoundEventInfo::kEventIdFieldNumber;
const int RoundEventInfo::kXFieldNumber;
const int RoundEventInfo::kYFieldNumber;
const int RoundEventInfo::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundEventInfo::RoundEventInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundEventInfo)
}
RoundEventInfo::RoundEventInfo(const RoundEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundEventInfo)
}

void RoundEventInfo::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(z_));
}

RoundEventInfo::~RoundEventInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundEventInfo)
  SharedDtor();
}

void RoundEventInfo::SharedDtor() {
}

void RoundEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundEventInfo& RoundEventInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundEventInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundEventInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 eventId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundEventInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundEventInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 eventId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_eventid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundEventInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundEventInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 eventId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->eventid(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundEventInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundEventInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 eventId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->eventid(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundEventInfo)
  return target;
}

size_t RoundEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundEventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int64 eventId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->eventid());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundEventInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundEventInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundEventInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundEventInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundEventInfo)
    MergeFrom(*source);
  }
}

void RoundEventInfo::MergeFrom(const RoundEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundEventInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundEventInfo::CopyFrom(const RoundEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundEventInfo::IsInitialized() const {
  return true;
}

void RoundEventInfo::Swap(RoundEventInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundEventInfo::InternalSwap(RoundEventInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(eventid_, other->eventid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundEventInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundBufferInfo::InitAsDefaultInstance() {
}
class RoundBufferInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundBufferInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bufferid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iscenterpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundBufferInfo::kLidFieldNumber;
const int RoundBufferInfo::kBufferIdFieldNumber;
const int RoundBufferInfo::kXFieldNumber;
const int RoundBufferInfo::kYFieldNumber;
const int RoundBufferInfo::kZFieldNumber;
const int RoundBufferInfo::kIsCenterPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundBufferInfo::RoundBufferInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundBufferInfo)
}
RoundBufferInfo::RoundBufferInfo(const RoundBufferInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscenterpoint_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(iscenterpoint_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundBufferInfo)
}

void RoundBufferInfo::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscenterpoint_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(iscenterpoint_));
}

RoundBufferInfo::~RoundBufferInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundBufferInfo)
  SharedDtor();
}

void RoundBufferInfo::SharedDtor() {
}

void RoundBufferInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundBufferInfo& RoundBufferInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundBufferInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundBufferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundBufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscenterpoint_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(iscenterpoint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundBufferInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bufferId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_bufferid(&has_bits);
          bufferid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isCenterPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_iscenterpoint(&has_bits);
          iscenterpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundBufferInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundBufferInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bufferId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bufferid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isCenterPoint = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_iscenterpoint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscenterpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundBufferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundBufferInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundBufferInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundBufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int32 bufferId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->bufferid(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional bool isCenterPoint = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->iscenterpoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundBufferInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundBufferInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundBufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int32 bufferId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->bufferid(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // optional bool isCenterPoint = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->iscenterpoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundBufferInfo)
  return target;
}

size_t RoundBufferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundBufferInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int32 bufferId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bufferid());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool isCenterPoint = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundBufferInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundBufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundBufferInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundBufferInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundBufferInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundBufferInfo)
    MergeFrom(*source);
  }
}

void RoundBufferInfo::MergeFrom(const RoundBufferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundBufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bufferid_ = from.bufferid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      iscenterpoint_ = from.iscenterpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundBufferInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundBufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundBufferInfo::CopyFrom(const RoundBufferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundBufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundBufferInfo::IsInitialized() const {
  return true;
}

void RoundBufferInfo::Swap(RoundBufferInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundBufferInfo::InternalSwap(RoundBufferInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(bufferid_, other->bufferid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(iscenterpoint_, other->iscenterpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundBufferInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundPlayerInfo::InitAsDefaultInstance() {
}
class RoundPlayerInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundPlayerInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_inner(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_innermax(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_wing(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_unionid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_unionname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_titleid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_nbvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_nbvaluemax(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_boxtime(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tokencount(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tokencountid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_thisjunxianid(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundPlayerInfo::kLidFieldNumber;
const int RoundPlayerInfo::kXFieldNumber;
const int RoundPlayerInfo::kYFieldNumber;
const int RoundPlayerInfo::kZFieldNumber;
const int RoundPlayerInfo::kDirFieldNumber;
const int RoundPlayerInfo::kNameFieldNumber;
const int RoundPlayerInfo::kLevelFieldNumber;
const int RoundPlayerInfo::kCareerFieldNumber;
const int RoundPlayerInfo::kSexFieldNumber;
const int RoundPlayerInfo::kHpFieldNumber;
const int RoundPlayerInfo::kMaxHpFieldNumber;
const int RoundPlayerInfo::kInnerFieldNumber;
const int RoundPlayerInfo::kInnerMaxFieldNumber;
const int RoundPlayerInfo::kTeamIdFieldNumber;
const int RoundPlayerInfo::kMasterFieldNumber;
const int RoundPlayerInfo::kEquipBeanFieldNumber;
const int RoundPlayerInfo::kWingFieldNumber;
const int RoundPlayerInfo::kRidFieldNumber;
const int RoundPlayerInfo::kUnionIdFieldNumber;
const int RoundPlayerInfo::kUnionNameFieldNumber;
const int RoundPlayerInfo::kTitleIdFieldNumber;
const int RoundPlayerInfo::kNbValueFieldNumber;
const int RoundPlayerInfo::kPowerFieldNumber;
const int RoundPlayerInfo::kMpFieldNumber;
const int RoundPlayerInfo::kMaxMpFieldNumber;
const int RoundPlayerInfo::kNbValueMaxFieldNumber;
const int RoundPlayerInfo::kBoxTimeFieldNumber;
const int RoundPlayerInfo::kTokenCountFieldNumber;
const int RoundPlayerInfo::kTokenCountIdFieldNumber;
const int RoundPlayerInfo::kThisJunXianIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundPlayerInfo::RoundPlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundPlayerInfo)
}
RoundPlayerInfo::RoundPlayerInfo(const RoundPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      equipbean_(from.equipbean_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unionname()) {
    unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
  }
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&thisjunxianid_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(thisjunxianid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundPlayerInfo)
}

void RoundPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundPlayerInfo_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thisjunxianid_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(thisjunxianid_));
}

RoundPlayerInfo::~RoundPlayerInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundPlayerInfo)
  SharedDtor();
}

void RoundPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoundPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundPlayerInfo& RoundPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundPlayerInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipbean_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unionname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&career_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&master_) -
        reinterpret_cast<char*>(&career_)) + sizeof(master_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxmp_) -
        reinterpret_cast<char*>(&rid_)) + sizeof(maxmp_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&nbvaluemax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thisjunxianid_) -
        reinterpret_cast<char*>(&nbvaluemax_)) + sizeof(thisjunxianid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.RoundPlayerInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 career = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_sex(&has_bits);
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inner = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          HasBitSetters::set_has_inner(&has_bits);
          inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 innerMax = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_innermax(&has_bits);
          innermax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 teamId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          HasBitSetters::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 master = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          HasBitSetters::set_has_master(&has_bits);
          master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.PerformerEquipBean equipBean = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_equipbean(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // optional int32 wing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          HasBitSetters::set_has_wing(&has_bits);
          wing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          HasBitSetters::set_has_rid(&has_bits);
          rid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 unionId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          HasBitSetters::set_has_unionid(&has_bits);
          unionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unionName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unionname(), ptr, ctx, "mapV2.RoundPlayerInfo.unionName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 titleId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          HasBitSetters::set_has_titleid(&has_bits);
          titleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nbValue = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          HasBitSetters::set_has_nbvalue(&has_bits);
          nbvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 power = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          HasBitSetters::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mp = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          HasBitSetters::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxMp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          HasBitSetters::set_has_maxmp(&has_bits);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nbValueMax = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          HasBitSetters::set_has_nbvaluemax(&has_bits);
          nbvaluemax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 boxTime = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          HasBitSetters::set_has_boxtime(&has_bits);
          boxtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tokenCount = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          HasBitSetters::set_has_tokencount(&has_bits);
          tokencount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tokenCountId = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          HasBitSetters::set_has_tokencountid(&has_bits);
          tokencountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 thisJunXianId = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          HasBitSetters::set_has_thisjunxianid(&has_bits);
          thisjunxianid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundPlayerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundPlayerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundPlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 career = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_career(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_sex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inner = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_inner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 innerMax = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_innermax(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &innermax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 teamId = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_teamid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 master = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_master(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.PerformerEquipBean equipBean = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_equipbean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wing = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_wing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rid = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_rid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unionId = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_unionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unionName = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unionname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionname().data(), static_cast<int>(this->unionname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundPlayerInfo.unionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 titleId = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_titleid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nbValue = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_nbvalue(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 power = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_power(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mp = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_mp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxMp = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_maxmp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nbValueMax = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_nbvaluemax(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbvaluemax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 boxTime = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_boxtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tokenCount = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_tokencount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tokencount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tokenCountId = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_tokencountid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tokencountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 thisJunXianId = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_thisjunxianid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &thisjunxianid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundPlayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundPlayerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float dir = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPlayerInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 level = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 career = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->career(), output);
  }

  // optional int32 sex = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int64 hp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->hp(), output);
  }

  // optional int64 maxHp = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->maxhp(), output);
  }

  // optional int32 inner = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->inner(), output);
  }

  // optional int32 innerMax = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->innermax(), output);
  }

  // optional int64 teamId = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->teamid(), output);
  }

  // optional int32 master = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->master(), output);
  }

  // repeated .mapV2.PerformerEquipBean equipBean = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipbean_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->equipbean(static_cast<int>(i)),
      output);
  }

  // optional int32 wing = 18;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->wing(), output);
  }

  // optional int64 rid = 19;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->rid(), output);
  }

  // optional int64 unionId = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->unionid(), output);
  }

  // optional string unionName = 21;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPlayerInfo.unionName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->unionname(), output);
  }

  // optional int32 titleId = 22;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->titleid(), output);
  }

  // optional int32 nbValue = 23;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->nbvalue(), output);
  }

  // optional int32 power = 24;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->power(), output);
  }

  // optional int64 mp = 25;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(25, this->mp(), output);
  }

  // optional int64 maxMp = 26;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(26, this->maxmp(), output);
  }

  // optional int32 nbValueMax = 27;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(27, this->nbvaluemax(), output);
  }

  // optional int32 boxTime = 28;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->boxtime(), output);
  }

  // optional int32 tokenCount = 29;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->tokencount(), output);
  }

  // optional int32 tokenCountId = 30;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(30, this->tokencountid(), output);
  }

  // optional int32 thisJunXianId = 32;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(32, this->thisjunxianid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundPlayerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundPlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional float dir = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPlayerInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 level = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 career = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->career(), target);
  }

  // optional int32 sex = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int64 hp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->hp(), target);
  }

  // optional int64 maxHp = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->maxhp(), target);
  }

  // optional int32 inner = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->inner(), target);
  }

  // optional int32 innerMax = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->innermax(), target);
  }

  // optional int64 teamId = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->teamid(), target);
  }

  // optional int32 master = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->master(), target);
  }

  // repeated .mapV2.PerformerEquipBean equipBean = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipbean_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->equipbean(static_cast<int>(i)), target);
  }

  // optional int32 wing = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->wing(), target);
  }

  // optional int64 rid = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->rid(), target);
  }

  // optional int64 unionId = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->unionid(), target);
  }

  // optional string unionName = 21;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPlayerInfo.unionName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->unionname(), target);
  }

  // optional int32 titleId = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->titleid(), target);
  }

  // optional int32 nbValue = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->nbvalue(), target);
  }

  // optional int32 power = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->power(), target);
  }

  // optional int64 mp = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->mp(), target);
  }

  // optional int64 maxMp = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(26, this->maxmp(), target);
  }

  // optional int32 nbValueMax = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->nbvaluemax(), target);
  }

  // optional int32 boxTime = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->boxtime(), target);
  }

  // optional int32 tokenCount = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->tokencount(), target);
  }

  // optional int32 tokenCountId = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->tokencountid(), target);
  }

  // optional int32 thisJunXianId = 32;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->thisjunxianid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundPlayerInfo)
  return target;
}

size_t RoundPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mapV2.PerformerEquipBean equipBean = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->equipbean_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->equipbean(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string unionName = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unionname());
    }

    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float dir = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 level = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 career = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int64 hp = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int32 sex = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 inner = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->inner());
    }

    // optional int64 maxHp = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional int64 teamId = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 innerMax = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->innermax());
    }

    // optional int32 master = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->master());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 rid = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rid());
    }

    // optional int64 unionId = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->unionid());
    }

    // optional int32 wing = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wing());
    }

    // optional int32 titleId = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 nbValue = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nbvalue());
    }

    // optional int32 power = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int64 mp = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mp());
    }

    // optional int64 maxMp = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxmp());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional int32 nbValueMax = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nbvaluemax());
    }

    // optional int32 boxTime = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->boxtime());
    }

    // optional int32 tokenCount = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tokencount());
    }

    // optional int32 tokenCountId = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tokencountid());
    }

    // optional int32 thisJunXianId = 32;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->thisjunxianid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundPlayerInfo)
    MergeFrom(*source);
  }
}

void RoundPlayerInfo::MergeFrom(const RoundPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equipbean_.MergeFrom(from.equipbean_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
    }
    if (cached_has_bits & 0x00000004u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000200u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000400u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000800u) {
      inner_ = from.inner_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00002000u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00004000u) {
      innermax_ = from.innermax_;
    }
    if (cached_has_bits & 0x00008000u) {
      master_ = from.master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rid_ = from.rid_;
    }
    if (cached_has_bits & 0x00020000u) {
      unionid_ = from.unionid_;
    }
    if (cached_has_bits & 0x00040000u) {
      wing_ = from.wing_;
    }
    if (cached_has_bits & 0x00080000u) {
      titleid_ = from.titleid_;
    }
    if (cached_has_bits & 0x00100000u) {
      nbvalue_ = from.nbvalue_;
    }
    if (cached_has_bits & 0x00200000u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00400000u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00800000u) {
      maxmp_ = from.maxmp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      nbvaluemax_ = from.nbvaluemax_;
    }
    if (cached_has_bits & 0x02000000u) {
      boxtime_ = from.boxtime_;
    }
    if (cached_has_bits & 0x04000000u) {
      tokencount_ = from.tokencount_;
    }
    if (cached_has_bits & 0x08000000u) {
      tokencountid_ = from.tokencountid_;
    }
    if (cached_has_bits & 0x10000000u) {
      thisjunxianid_ = from.thisjunxianid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundPlayerInfo::CopyFrom(const RoundPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundPlayerInfo::IsInitialized() const {
  return true;
}

void RoundPlayerInfo::Swap(RoundPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundPlayerInfo::InternalSwap(RoundPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&equipbean_)->InternalSwap(CastToBase(&other->equipbean_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unionname_.Swap(&other->unionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lid_, other->lid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(dir_, other->dir_);
  swap(level_, other->level_);
  swap(career_, other->career_);
  swap(hp_, other->hp_);
  swap(sex_, other->sex_);
  swap(inner_, other->inner_);
  swap(maxhp_, other->maxhp_);
  swap(teamid_, other->teamid_);
  swap(innermax_, other->innermax_);
  swap(master_, other->master_);
  swap(rid_, other->rid_);
  swap(unionid_, other->unionid_);
  swap(wing_, other->wing_);
  swap(titleid_, other->titleid_);
  swap(nbvalue_, other->nbvalue_);
  swap(power_, other->power_);
  swap(mp_, other->mp_);
  swap(maxmp_, other->maxmp_);
  swap(nbvaluemax_, other->nbvaluemax_);
  swap(boxtime_, other->boxtime_);
  swap(tokencount_, other->tokencount_);
  swap(tokencountid_, other->tokencountid_);
  swap(thisjunxianid_, other->thisjunxianid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundMonsterInfo::InitAsDefaultInstance() {
}
class RoundMonsterInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundMonsterInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_endanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deathtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_killid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundMonsterInfo::kLidFieldNumber;
const int RoundMonsterInfo::kMidFieldNumber;
const int RoundMonsterInfo::kXFieldNumber;
const int RoundMonsterInfo::kYFieldNumber;
const int RoundMonsterInfo::kZFieldNumber;
const int RoundMonsterInfo::kDirFieldNumber;
const int RoundMonsterInfo::kHpFieldNumber;
const int RoundMonsterInfo::kMaxHpFieldNumber;
const int RoundMonsterInfo::kNameFieldNumber;
const int RoundMonsterInfo::kLevelFieldNumber;
const int RoundMonsterInfo::kEndAnimationFieldNumber;
const int RoundMonsterInfo::kDeathTimeFieldNumber;
const int RoundMonsterInfo::kKillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundMonsterInfo::RoundMonsterInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundMonsterInfo)
}
RoundMonsterInfo::RoundMonsterInfo(const RoundMonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&killid_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(killid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundMonsterInfo)
}

void RoundMonsterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundMonsterInfo_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killid_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(killid_));
}

RoundMonsterInfo::~RoundMonsterInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundMonsterInfo)
  SharedDtor();
}

void RoundMonsterInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoundMonsterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundMonsterInfo& RoundMonsterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundMonsterInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(maxhp_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&dir_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killid_) -
        reinterpret_cast<char*>(&dir_)) + sizeof(killid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundMonsterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.RoundMonsterInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 endAnimation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          HasBitSetters::set_has_endanimation(&has_bits);
          endanimation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deathTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_deathtime(&has_bits);
          deathtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 killId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          HasBitSetters::set_has_killid(&has_bits);
          killid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundMonsterInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundMonsterInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundMonsterInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 endAnimation = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_endanimation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &endanimation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deathTime = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_deathtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deathtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 killId = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_killid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &killid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundMonsterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundMonsterInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional float dir = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->dir(), output);
  }

  // optional int64 hp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->hp(), output);
  }

  // optional int64 maxHp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->maxhp(), output);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundMonsterInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional int32 level = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  // optional int64 endAnimation = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->endanimation(), output);
  }

  // optional int64 deathTime = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->deathtime(), output);
  }

  // optional int64 killId = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->killid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundMonsterInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundMonsterInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundMonsterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // optional float dir = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->dir(), target);
  }

  // optional int64 hp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->hp(), target);
  }

  // optional int64 maxHp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->maxhp(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundMonsterInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional int32 level = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }

  // optional int64 endAnimation = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->endanimation(), target);
  }

  // optional int64 deathTime = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->deathtime(), target);
  }

  // optional int64 killId = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->killid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundMonsterInfo)
  return target;
}

size_t RoundMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundMonsterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int32 mid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int64 hp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 maxHp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float dir = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 level = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 endAnimation = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->endanimation());
    }

    // optional int64 deathTime = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deathtime());
    }

    // optional int64 killId = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->killid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundMonsterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundMonsterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundMonsterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundMonsterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundMonsterInfo)
    MergeFrom(*source);
  }
}

void RoundMonsterInfo::MergeFrom(const RoundMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundMonsterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000200u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000400u) {
      endanimation_ = from.endanimation_;
    }
    if (cached_has_bits & 0x00000800u) {
      deathtime_ = from.deathtime_;
    }
    if (cached_has_bits & 0x00001000u) {
      killid_ = from.killid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundMonsterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundMonsterInfo::CopyFrom(const RoundMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundMonsterInfo::IsInitialized() const {
  return true;
}

void RoundMonsterInfo::Swap(RoundMonsterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundMonsterInfo::InternalSwap(RoundMonsterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lid_, other->lid_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(dir_, other->dir_);
  swap(level_, other->level_);
  swap(endanimation_, other->endanimation_);
  swap(deathtime_, other->deathtime_);
  swap(killid_, other->killid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundMonsterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundNpcInfo::InitAsDefaultInstance() {
}
class RoundNpcInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundNpcInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mapnpcid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundNpcInfo::kLidFieldNumber;
const int RoundNpcInfo::kNidFieldNumber;
const int RoundNpcInfo::kMapNpcIdFieldNumber;
const int RoundNpcInfo::kXFieldNumber;
const int RoundNpcInfo::kYFieldNumber;
const int RoundNpcInfo::kZFieldNumber;
const int RoundNpcInfo::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundNpcInfo::RoundNpcInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundNpcInfo)
}
RoundNpcInfo::RoundNpcInfo(const RoundNpcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundNpcInfo)
}

void RoundNpcInfo::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(dir_));
}

RoundNpcInfo::~RoundNpcInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundNpcInfo)
  SharedDtor();
}

void RoundNpcInfo::SharedDtor() {
}

void RoundNpcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundNpcInfo& RoundNpcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundNpcInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundNpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundNpcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dir_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundNpcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_nid(&has_bits);
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mapNpcId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_mapnpcid(&has_bits);
          mapnpcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundNpcInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundNpcInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_nid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mapNpcId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_mapnpcid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapnpcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundNpcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundNpcInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundNpcInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundNpcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int32 nid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->nid(), output);
  }

  // optional int32 mapNpcId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mapnpcid(), output);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // optional float dir = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundNpcInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundNpcInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundNpcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int32 nid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->nid(), target);
  }

  // optional int32 mapNpcId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mapnpcid(), target);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // optional float dir = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundNpcInfo)
  return target;
}

size_t RoundNpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundNpcInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int32 nid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nid());
    }

    // optional int32 mapNpcId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mapnpcid());
    }

    // optional float x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float dir = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundNpcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundNpcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundNpcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundNpcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundNpcInfo)
    MergeFrom(*source);
  }
}

void RoundNpcInfo::MergeFrom(const RoundNpcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nid_ = from.nid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mapnpcid_ = from.mapnpcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundNpcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundNpcInfo::CopyFrom(const RoundNpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundNpcInfo::IsInitialized() const {
  return true;
}

void RoundNpcInfo::Swap(RoundNpcInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundNpcInfo::InternalSwap(RoundNpcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(nid_, other->nid_);
  swap(mapnpcid_, other->mapnpcid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundNpcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundPetInfo::InitAsDefaultInstance() {
}
class RoundPetInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundPetInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_masterid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundPetInfo::kLidFieldNumber;
const int RoundPetInfo::kMasterIdFieldNumber;
const int RoundPetInfo::kNameFieldNumber;
const int RoundPetInfo::kMidFieldNumber;
const int RoundPetInfo::kXFieldNumber;
const int RoundPetInfo::kYFieldNumber;
const int RoundPetInfo::kZFieldNumber;
const int RoundPetInfo::kDirFieldNumber;
const int RoundPetInfo::kHpFieldNumber;
const int RoundPetInfo::kMaxHpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundPetInfo::RoundPetInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundPetInfo)
}
RoundPetInfo::RoundPetInfo(const RoundPetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundPetInfo)
}

void RoundPetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundPetInfo_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(dir_));
}

RoundPetInfo::~RoundPetInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundPetInfo)
  SharedDtor();
}

void RoundPetInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoundPetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundPetInfo& RoundPetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundPetInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundPetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundPetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hp_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(hp_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&maxhp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dir_) -
        reinterpret_cast<char*>(&maxhp_)) + sizeof(dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundPetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 masterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_masterid(&has_bits);
          masterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.RoundPetInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundPetInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundPetInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 masterId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_masterid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &masterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundPetInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundPetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundPetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundPetInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundPetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->masterid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPetInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 mid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->mid(), output);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // optional float z = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->z(), output);
  }

  // optional float dir = 8;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->dir(), output);
  }

  // optional int64 hp = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->hp(), output);
  }

  // optional int64 maxHp = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->maxhp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundPetInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundPetInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundPetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->masterid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundPetInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 mid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->mid(), target);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->x(), target);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->y(), target);
  }

  // optional float z = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->z(), target);
  }

  // optional float dir = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->dir(), target);
  }

  // optional int64 hp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->hp(), target);
  }

  // optional int64 maxHp = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->maxhp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundPetInfo)
  return target;
}

size_t RoundPetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundPetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int64 masterId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->masterid());
    }

    // optional int32 mid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float z = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int64 hp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 maxHp = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional float dir = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundPetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundPetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundPetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundPetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundPetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundPetInfo)
    MergeFrom(*source);
  }
}

void RoundPetInfo::MergeFrom(const RoundPetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundPetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000004u) {
      masterid_ = from.masterid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000080u) {
      hp_ = from.hp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000200u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundPetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundPetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundPetInfo::CopyFrom(const RoundPetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundPetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundPetInfo::IsInitialized() const {
  return true;
}

void RoundPetInfo::Swap(RoundPetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundPetInfo::InternalSwap(RoundPetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lid_, other->lid_);
  swap(masterid_, other->masterid_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundPetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundHeroInfo::InitAsDefaultInstance() {
}
class RoundHeroInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundHeroInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_masterid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_inner(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_innermax(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mabirate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundHeroInfo::kLidFieldNumber;
const int RoundHeroInfo::kMasterIdFieldNumber;
const int RoundHeroInfo::kNameFieldNumber;
const int RoundHeroInfo::kCareerFieldNumber;
const int RoundHeroInfo::kSexFieldNumber;
const int RoundHeroInfo::kMidFieldNumber;
const int RoundHeroInfo::kXFieldNumber;
const int RoundHeroInfo::kYFieldNumber;
const int RoundHeroInfo::kZFieldNumber;
const int RoundHeroInfo::kDirFieldNumber;
const int RoundHeroInfo::kHpFieldNumber;
const int RoundHeroInfo::kMaxHpFieldNumber;
const int RoundHeroInfo::kInnerFieldNumber;
const int RoundHeroInfo::kInnerMaxFieldNumber;
const int RoundHeroInfo::kMaBiRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundHeroInfo::RoundHeroInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundHeroInfo)
}
RoundHeroInfo::RoundHeroInfo(const RoundHeroInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mabirate_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(mabirate_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundHeroInfo)
}

void RoundHeroInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundHeroInfo_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mabirate_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(mabirate_));
}

RoundHeroInfo::~RoundHeroInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundHeroInfo)
  SharedDtor();
}

void RoundHeroInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoundHeroInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundHeroInfo& RoundHeroInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundHeroInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundHeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundHeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(y_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mabirate_) -
        reinterpret_cast<char*>(&z_)) + sizeof(mabirate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundHeroInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 masterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_masterid(&has_bits);
          masterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.RoundHeroInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 career = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_sex(&has_bits);
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_inner(&has_bits);
          inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 innerMax = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          HasBitSetters::set_has_innermax(&has_bits);
          innermax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maBiRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          HasBitSetters::set_has_mabirate(&has_bits);
          mabirate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundHeroInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundHeroInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 masterId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_masterid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &masterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundHeroInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 career = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_career(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_sex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inner = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_inner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 innerMax = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_innermax(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &innermax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maBiRate = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_mabirate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mabirate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundHeroInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundHeroInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundHeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->masterid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundHeroInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 career = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->career(), output);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional int32 mid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->mid(), output);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional float z = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->z(), output);
  }

  // optional float dir = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->dir(), output);
  }

  // optional int64 hp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->hp(), output);
  }

  // optional int64 maxHp = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->maxhp(), output);
  }

  // optional int32 inner = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->inner(), output);
  }

  // optional int32 innerMax = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->innermax(), output);
  }

  // optional int32 maBiRate = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->mabirate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundHeroInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundHeroInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundHeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->masterid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundHeroInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 career = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->career(), target);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional int32 mid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->mid(), target);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional float z = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->z(), target);
  }

  // optional float dir = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->dir(), target);
  }

  // optional int64 hp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->hp(), target);
  }

  // optional int64 maxHp = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->maxhp(), target);
  }

  // optional int32 inner = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->inner(), target);
  }

  // optional int32 innerMax = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->innermax(), target);
  }

  // optional int32 maBiRate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->mabirate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundHeroInfo)
  return target;
}

size_t RoundHeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundHeroInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int64 masterId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->masterid());
    }

    // optional int32 career = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 sex = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 mid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float z = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 hp = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional float dir = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 inner = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->inner());
    }

    // optional int64 maxHp = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional int32 innerMax = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->innermax());
    }

    // optional int32 maBiRate = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mabirate());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundHeroInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundHeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundHeroInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundHeroInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundHeroInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundHeroInfo)
    MergeFrom(*source);
  }
}

void RoundHeroInfo::MergeFrom(const RoundHeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundHeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000004u) {
      masterid_ = from.masterid_;
    }
    if (cached_has_bits & 0x00000008u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000010u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000020u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000080u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000200u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000400u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000800u) {
      inner_ = from.inner_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00002000u) {
      innermax_ = from.innermax_;
    }
    if (cached_has_bits & 0x00004000u) {
      mabirate_ = from.mabirate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundHeroInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundHeroInfo::CopyFrom(const RoundHeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundHeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundHeroInfo::IsInitialized() const {
  return true;
}

void RoundHeroInfo::Swap(RoundHeroInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundHeroInfo::InternalSwap(RoundHeroInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lid_, other->lid_);
  swap(masterid_, other->masterid_);
  swap(career_, other->career_);
  swap(sex_, other->sex_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(hp_, other->hp_);
  swap(dir_, other->dir_);
  swap(inner_, other->inner_);
  swap(maxhp_, other->maxhp_);
  swap(innermax_, other->innermax_);
  swap(mabirate_, other->mabirate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundHeroInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundServantInfo::InitAsDefaultInstance() {
}
class RoundServantInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundServantInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_masterid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundServantInfo::kIdFieldNumber;
const int RoundServantInfo::kMasterIdFieldNumber;
const int RoundServantInfo::kNameFieldNumber;
const int RoundServantInfo::kCareerFieldNumber;
const int RoundServantInfo::kSexFieldNumber;
const int RoundServantInfo::kMidFieldNumber;
const int RoundServantInfo::kXFieldNumber;
const int RoundServantInfo::kYFieldNumber;
const int RoundServantInfo::kZFieldNumber;
const int RoundServantInfo::kDirFieldNumber;
const int RoundServantInfo::kHpFieldNumber;
const int RoundServantInfo::kMaxHpFieldNumber;
const int RoundServantInfo::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundServantInfo::RoundServantInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundServantInfo)
}
RoundServantInfo::RoundServantInfo(const RoundServantInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxhp_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundServantInfo)
}

void RoundServantInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoundServantInfo_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxhp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxhp_));
}

RoundServantInfo::~RoundServantInfo() {
  // @@protoc_insertion_point(destructor:mapV2.RoundServantInfo)
  SharedDtor();
}

void RoundServantInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoundServantInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundServantInfo& RoundServantInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundServantInfo_map_2eproto.base);
  return *internal_default_instance();
}


void RoundServantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundServantInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&id_)) + sizeof(y_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&z_)) + sizeof(maxhp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundServantInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 masterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_masterid(&has_bits);
          masterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.RoundServantInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 career = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_sex(&has_bits);
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundServantInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundServantInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 masterId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_masterid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &masterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.RoundServantInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 career = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_career(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_sex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundServantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundServantInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundServantInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundServantInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->masterid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundServantInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 career = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->career(), output);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional int32 mid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->mid(), output);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional float z = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->z(), output);
  }

  // optional float dir = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->dir(), output);
  }

  // optional int64 hp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->hp(), output);
  }

  // optional int64 maxHp = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->maxhp(), output);
  }

  // optional int32 level = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundServantInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundServantInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundServantInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 masterId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->masterid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.RoundServantInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 career = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->career(), target);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional int32 mid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->mid(), target);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional float z = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->z(), target);
  }

  // optional float dir = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->dir(), target);
  }

  // optional int64 hp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->hp(), target);
  }

  // optional int64 maxHp = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->maxhp(), target);
  }

  // optional int32 level = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundServantInfo)
  return target;
}

size_t RoundServantInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundServantInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 masterId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->masterid());
    }

    // optional int32 career = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional int32 sex = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 mid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float z = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 hp = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional float dir = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 level = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 maxHp = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundServantInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundServantInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundServantInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundServantInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundServantInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundServantInfo)
    MergeFrom(*source);
  }
}

void RoundServantInfo::MergeFrom(const RoundServantInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundServantInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      masterid_ = from.masterid_;
    }
    if (cached_has_bits & 0x00000008u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000010u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000020u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000080u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000200u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000400u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundServantInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundServantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundServantInfo::CopyFrom(const RoundServantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundServantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundServantInfo::IsInitialized() const {
  return true;
}

void RoundServantInfo::Swap(RoundServantInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundServantInfo::InternalSwap(RoundServantInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(masterid_, other->masterid_);
  swap(career_, other->career_);
  swap(sex_, other->sex_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(hp_, other->hp_);
  swap(dir_, other->dir_);
  swap(level_, other->level_);
  swap(maxhp_, other->maxhp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundServantInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoundCollectPoint::InitAsDefaultInstance() {
}
class RoundCollectPoint::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RoundCollectPoint>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_configid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoundCollectPoint::kIdFieldNumber;
const int RoundCollectPoint::kTypeFieldNumber;
const int RoundCollectPoint::kXFieldNumber;
const int RoundCollectPoint::kYFieldNumber;
const int RoundCollectPoint::kZFieldNumber;
const int RoundCollectPoint::kConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoundCollectPoint::RoundCollectPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.RoundCollectPoint)
}
RoundCollectPoint::RoundCollectPoint(const RoundCollectPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&configid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(configid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.RoundCollectPoint)
}

void RoundCollectPoint::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(configid_));
}

RoundCollectPoint::~RoundCollectPoint() {
  // @@protoc_insertion_point(destructor:mapV2.RoundCollectPoint)
  SharedDtor();
}

void RoundCollectPoint::SharedDtor() {
}

void RoundCollectPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoundCollectPoint& RoundCollectPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoundCollectPoint_map_2eproto.base);
  return *internal_default_instance();
}


void RoundCollectPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.RoundCollectPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&configid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(configid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoundCollectPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 configId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_configid(&has_bits);
          configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoundCollectPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.RoundCollectPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 configId = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_configid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.RoundCollectPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.RoundCollectPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoundCollectPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.RoundCollectPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional int32 configId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->configid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.RoundCollectPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoundCollectPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.RoundCollectPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // optional int32 configId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->configid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.RoundCollectPoint)
  return target;
}

size_t RoundCollectPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.RoundCollectPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 configId = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->configid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoundCollectPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.RoundCollectPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoundCollectPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoundCollectPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.RoundCollectPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.RoundCollectPoint)
    MergeFrom(*source);
  }
}

void RoundCollectPoint::MergeFrom(const RoundCollectPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.RoundCollectPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      configid_ = from.configid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoundCollectPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.RoundCollectPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundCollectPoint::CopyFrom(const RoundCollectPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.RoundCollectPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundCollectPoint::IsInitialized() const {
  return true;
}

void RoundCollectPoint::Swap(RoundCollectPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoundCollectPoint::InternalSwap(RoundCollectPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(configid_, other->configid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundCollectPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapBoss::InitAsDefaultInstance() {
}
class MapBoss::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MapBoss>()._has_bits_);
  static void set_has_bossid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bosshp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBoss::kBossIdFieldNumber;
const int MapBoss::kMidFieldNumber;
const int MapBoss::kBossHpFieldNumber;
const int MapBoss::kXFieldNumber;
const int MapBoss::kYFieldNumber;
const int MapBoss::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBoss::MapBoss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.MapBoss)
}
MapBoss::MapBoss(const MapBoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bossid_, &from.bossid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&bossid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.MapBoss)
}

void MapBoss::SharedCtor() {
  ::memset(&bossid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&bossid_)) + sizeof(z_));
}

MapBoss::~MapBoss() {
  // @@protoc_insertion_point(destructor:mapV2.MapBoss)
  SharedDtor();
}

void MapBoss::SharedDtor() {
}

void MapBoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapBoss& MapBoss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapBoss_map_2eproto.base);
  return *internal_default_instance();
}


void MapBoss::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.MapBoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&bossid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&bossid_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapBoss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 bossId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bossid(&has_bits);
          bossid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bossHp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_bosshp(&has_bits);
          bosshp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapBoss::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.MapBoss)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bossId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bossid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bossHp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bosshp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bosshp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.MapBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.MapBoss)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapBoss::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.MapBoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // optional int64 bossHp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->bosshp(), output);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.MapBoss)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapBoss::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.MapBoss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // optional int64 bossHp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->bosshp(), target);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.MapBoss)
  return target;
}

size_t MapBoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.MapBoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 bossId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 bossHp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bosshp());
    }

    // optional int32 mid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBoss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.MapBoss)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBoss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapBoss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.MapBoss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.MapBoss)
    MergeFrom(*source);
  }
}

void MapBoss::MergeFrom(const MapBoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.MapBoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      bossid_ = from.bossid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bosshp_ = from.bosshp_;
    }
    if (cached_has_bits & 0x00000004u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapBoss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.MapBoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBoss::CopyFrom(const MapBoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.MapBoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBoss::IsInitialized() const {
  return true;
}

void MapBoss::Swap(MapBoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBoss::InternalSwap(MapBoss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bossid_, other->bossid_);
  swap(bosshp_, other->bosshp_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapBoss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonsterTomb::InitAsDefaultInstance() {
}
class MonsterTomb::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<MonsterTomb>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nextrelivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonsterTomb::kLidFieldNumber;
const int MonsterTomb::kMidFieldNumber;
const int MonsterTomb::kXFieldNumber;
const int MonsterTomb::kYFieldNumber;
const int MonsterTomb::kZFieldNumber;
const int MonsterTomb::kNextReliveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonsterTomb::MonsterTomb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.MonsterTomb)
}
MonsterTomb::MonsterTomb(const MonsterTomb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextrelivetime_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(nextrelivetime_));
  // @@protoc_insertion_point(copy_constructor:mapV2.MonsterTomb)
}

void MonsterTomb::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextrelivetime_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(nextrelivetime_));
}

MonsterTomb::~MonsterTomb() {
  // @@protoc_insertion_point(destructor:mapV2.MonsterTomb)
  SharedDtor();
}

void MonsterTomb::SharedDtor() {
}

void MonsterTomb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonsterTomb& MonsterTomb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonsterTomb_map_2eproto.base);
  return *internal_default_instance();
}


void MonsterTomb::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.MonsterTomb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextrelivetime_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(nextrelivetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MonsterTomb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 nextReliveTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_nextrelivetime(&has_bits);
          nextrelivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MonsterTomb::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.MonsterTomb)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nextReliveTime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_nextrelivetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextrelivetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.MonsterTomb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.MonsterTomb)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MonsterTomb::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.MonsterTomb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional int32 nextReliveTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->nextrelivetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.MonsterTomb)
}

::PROTOBUF_NAMESPACE_ID::uint8* MonsterTomb::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.MonsterTomb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int32 mid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // optional int32 nextReliveTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->nextrelivetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.MonsterTomb)
  return target;
}

size_t MonsterTomb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.MonsterTomb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int32 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 nextReliveTime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nextrelivetime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonsterTomb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.MonsterTomb)
  GOOGLE_DCHECK_NE(&from, this);
  const MonsterTomb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonsterTomb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.MonsterTomb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.MonsterTomb)
    MergeFrom(*source);
  }
}

void MonsterTomb::MergeFrom(const MonsterTomb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.MonsterTomb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      nextrelivetime_ = from.nextrelivetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonsterTomb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.MonsterTomb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterTomb::CopyFrom(const MonsterTomb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.MonsterTomb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterTomb::IsInitialized() const {
  return true;
}

void MonsterTomb::Swap(MonsterTomb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonsterTomb::InternalSwap(MonsterTomb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(mid_, other->mid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(nextrelivetime_, other->nextrelivetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterTomb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResUpdateView::InitAsDefaultInstance() {
}
class ResUpdateView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResUpdateView>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResUpdateView::kAddPlayersFieldNumber;
const int ResUpdateView::kAddMonstersFieldNumber;
const int ResUpdateView::kAddNpcsFieldNumber;
const int ResUpdateView::kAddBuffersFieldNumber;
const int ResUpdateView::kAddPetsFieldNumber;
const int ResUpdateView::kAddHerosFieldNumber;
const int ResUpdateView::kAddEventsFieldNumber;
const int ResUpdateView::kAddItemsFieldNumber;
const int ResUpdateView::kExitIdListFieldNumber;
const int ResUpdateView::kAddServantsFieldNumber;
const int ResUpdateView::kCollectPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResUpdateView::ResUpdateView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResUpdateView)
}
ResUpdateView::ResUpdateView(const ResUpdateView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      addplayers_(from.addplayers_),
      addmonsters_(from.addmonsters_),
      addnpcs_(from.addnpcs_),
      addbuffers_(from.addbuffers_),
      addpets_(from.addpets_),
      addheros_(from.addheros_),
      addevents_(from.addevents_),
      additems_(from.additems_),
      exitidlist_(from.exitidlist_),
      addservants_(from.addservants_),
      collectpoint_(from.collectpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mapV2.ResUpdateView)
}

void ResUpdateView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResUpdateView_map_2eproto.base);
}

ResUpdateView::~ResUpdateView() {
  // @@protoc_insertion_point(destructor:mapV2.ResUpdateView)
  SharedDtor();
}

void ResUpdateView::SharedDtor() {
}

void ResUpdateView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResUpdateView& ResUpdateView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResUpdateView_map_2eproto.base);
  return *internal_default_instance();
}


void ResUpdateView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResUpdateView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addplayers_.Clear();
  addmonsters_.Clear();
  addnpcs_.Clear();
  addbuffers_.Clear();
  addpets_.Clear();
  addheros_.Clear();
  addevents_.Clear();
  additems_.Clear();
  exitidlist_.Clear();
  addservants_.Clear();
  collectpoint_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResUpdateView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addmonsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundNpcInfo addNpcs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addnpcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundBufferInfo addBuffers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addbuffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundPetInfo addPets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addpets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundHeroInfo addHeros = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addheros(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundEventInfo addEvents = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addevents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundItemInfo addItems = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_additems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated int64 exitIdList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_exitidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_exitidlist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundServantInfo addServants = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addservants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.RoundCollectPoint collectPoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_collectpoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResUpdateView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResUpdateView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addplayers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addmonsters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundNpcInfo addNpcs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addnpcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundBufferInfo addBuffers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addbuffers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundPetInfo addPets = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addpets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundHeroInfo addHeros = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addheros()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundEventInfo addEvents = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addevents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundItemInfo addItems = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_additems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 exitIdList = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 72u, input, this->mutable_exitidlist())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_exitidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundServantInfo addServants = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addservants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.RoundCollectPoint collectPoint = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_collectpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResUpdateView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResUpdateView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResUpdateView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResUpdateView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addplayers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->addplayers(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addmonsters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->addmonsters(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundNpcInfo addNpcs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addnpcs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->addnpcs(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundBufferInfo addBuffers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addbuffers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->addbuffers(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundPetInfo addPets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addpets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->addpets(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundHeroInfo addHeros = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addheros_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->addheros(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundEventInfo addEvents = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addevents_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->addevents(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundItemInfo addItems = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->additems(static_cast<int>(i)),
      output);
  }

  // repeated int64 exitIdList = 9;
  for (int i = 0, n = this->exitidlist_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      9, this->exitidlist(i), output);
  }

  // repeated .mapV2.RoundServantInfo addServants = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addservants_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->addservants(static_cast<int>(i)),
      output);
  }

  // repeated .mapV2.RoundCollectPoint collectPoint = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collectpoint_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->collectpoint(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResUpdateView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResUpdateView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResUpdateView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addplayers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->addplayers(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addmonsters_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addmonsters(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundNpcInfo addNpcs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addnpcs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->addnpcs(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundBufferInfo addBuffers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addbuffers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->addbuffers(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundPetInfo addPets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addpets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->addpets(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundHeroInfo addHeros = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addheros_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->addheros(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundEventInfo addEvents = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addevents_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->addevents(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundItemInfo addItems = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additems_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->additems(static_cast<int>(i)), target);
  }

  // repeated int64 exitIdList = 9;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt64ToArray(9, this->exitidlist_, target);

  // repeated .mapV2.RoundServantInfo addServants = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addservants_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->addservants(static_cast<int>(i)), target);
  }

  // repeated .mapV2.RoundCollectPoint collectPoint = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collectpoint_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->collectpoint(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResUpdateView)
  return target;
}

size_t ResUpdateView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResUpdateView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mapV2.RoundPlayerInfo addPlayers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->addplayers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addplayers(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundMonsterInfo addMonsters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addmonsters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addmonsters(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundNpcInfo addNpcs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->addnpcs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addnpcs(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundBufferInfo addBuffers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->addbuffers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addbuffers(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundPetInfo addPets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->addpets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addpets(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundHeroInfo addHeros = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->addheros_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addheros(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundEventInfo addEvents = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->addevents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addevents(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundItemInfo addItems = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->additems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->additems(static_cast<int>(i)));
    }
  }

  // repeated int64 exitIdList = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->exitidlist_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exitidlist_size());
    total_size += data_size;
  }

  // repeated .mapV2.RoundServantInfo addServants = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->addservants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addservants(static_cast<int>(i)));
    }
  }

  // repeated .mapV2.RoundCollectPoint collectPoint = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->collectpoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->collectpoint(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResUpdateView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResUpdateView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResUpdateView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResUpdateView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResUpdateView)
    MergeFrom(*source);
  }
}

void ResUpdateView::MergeFrom(const ResUpdateView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResUpdateView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addplayers_.MergeFrom(from.addplayers_);
  addmonsters_.MergeFrom(from.addmonsters_);
  addnpcs_.MergeFrom(from.addnpcs_);
  addbuffers_.MergeFrom(from.addbuffers_);
  addpets_.MergeFrom(from.addpets_);
  addheros_.MergeFrom(from.addheros_);
  addevents_.MergeFrom(from.addevents_);
  additems_.MergeFrom(from.additems_);
  exitidlist_.MergeFrom(from.exitidlist_);
  addservants_.MergeFrom(from.addservants_);
  collectpoint_.MergeFrom(from.collectpoint_);
}

void ResUpdateView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUpdateView::CopyFrom(const ResUpdateView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResUpdateView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUpdateView::IsInitialized() const {
  return true;
}

void ResUpdateView::Swap(ResUpdateView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResUpdateView::InternalSwap(ResUpdateView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&addplayers_)->InternalSwap(CastToBase(&other->addplayers_));
  CastToBase(&addmonsters_)->InternalSwap(CastToBase(&other->addmonsters_));
  CastToBase(&addnpcs_)->InternalSwap(CastToBase(&other->addnpcs_));
  CastToBase(&addbuffers_)->InternalSwap(CastToBase(&other->addbuffers_));
  CastToBase(&addpets_)->InternalSwap(CastToBase(&other->addpets_));
  CastToBase(&addheros_)->InternalSwap(CastToBase(&other->addheros_));
  CastToBase(&addevents_)->InternalSwap(CastToBase(&other->addevents_));
  CastToBase(&additems_)->InternalSwap(CastToBase(&other->additems_));
  exitidlist_.InternalSwap(&other->exitidlist_);
  CastToBase(&addservants_)->InternalSwap(CastToBase(&other->addservants_));
  CastToBase(&collectpoint_)->InternalSwap(CastToBase(&other->collectpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResUpdateView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResPlayerEnterView_default_instance_._instance.get_mutable()->player_ = const_cast< ::mapV2::RoundPlayerInfo*>(
      ::mapV2::RoundPlayerInfo::internal_default_instance());
}
class ResPlayerEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerEnterView>()._has_bits_);
  static const ::mapV2::RoundPlayerInfo& player(const ResPlayerEnterView* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundPlayerInfo&
ResPlayerEnterView::HasBitSetters::player(const ResPlayerEnterView* msg) {
  return *msg->player_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerEnterView::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerEnterView::ResPlayerEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerEnterView)
}
ResPlayerEnterView::ResPlayerEnterView(const ResPlayerEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::mapV2::RoundPlayerInfo(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerEnterView)
}

void ResPlayerEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResPlayerEnterView_map_2eproto.base);
  player_ = nullptr;
}

ResPlayerEnterView::~ResPlayerEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerEnterView)
  SharedDtor();
}

void ResPlayerEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void ResPlayerEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerEnterView& ResPlayerEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != nullptr);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundPlayerInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundPlayerInfo player = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundPlayerInfo player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundPlayerInfo player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerEnterView)
  return target;
}

size_t ResPlayerEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundPlayerInfo player = 1;
  if (has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerEnterView)
    MergeFrom(*source);
  }
}

void ResPlayerEnterView::MergeFrom(const ResPlayerEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::mapV2::RoundPlayerInfo::MergeFrom(from.player());
  }
}

void ResPlayerEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerEnterView::CopyFrom(const ResPlayerEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResPlayerEnterView::Swap(ResPlayerEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerEnterView::InternalSwap(ResPlayerEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCollectEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResCollectEnterView_default_instance_._instance.get_mutable()->collect_ = const_cast< ::mapV2::RoundCollectPoint*>(
      ::mapV2::RoundCollectPoint::internal_default_instance());
}
class ResCollectEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResCollectEnterView>()._has_bits_);
  static const ::mapV2::RoundCollectPoint& collect(const ResCollectEnterView* msg);
  static void set_has_collect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundCollectPoint&
ResCollectEnterView::HasBitSetters::collect(const ResCollectEnterView* msg) {
  return *msg->collect_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResCollectEnterView::kCollectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResCollectEnterView::ResCollectEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResCollectEnterView)
}
ResCollectEnterView::ResCollectEnterView(const ResCollectEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_collect()) {
    collect_ = new ::mapV2::RoundCollectPoint(*from.collect_);
  } else {
    collect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResCollectEnterView)
}

void ResCollectEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResCollectEnterView_map_2eproto.base);
  collect_ = nullptr;
}

ResCollectEnterView::~ResCollectEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResCollectEnterView)
  SharedDtor();
}

void ResCollectEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete collect_;
}

void ResCollectEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCollectEnterView& ResCollectEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCollectEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResCollectEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResCollectEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(collect_ != nullptr);
    collect_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCollectEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundCollectPoint collect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_collect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCollectEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResCollectEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundCollectPoint collect = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_collect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResCollectEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResCollectEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCollectEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResCollectEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundCollectPoint collect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::collect(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResCollectEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCollectEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResCollectEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundCollectPoint collect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::collect(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResCollectEnterView)
  return target;
}

size_t ResCollectEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResCollectEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundCollectPoint collect = 1;
  if (has_collect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collect_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCollectEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResCollectEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCollectEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCollectEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResCollectEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResCollectEnterView)
    MergeFrom(*source);
  }
}

void ResCollectEnterView::MergeFrom(const ResCollectEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResCollectEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_collect()) {
    mutable_collect()->::mapV2::RoundCollectPoint::MergeFrom(from.collect());
  }
}

void ResCollectEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResCollectEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCollectEnterView::CopyFrom(const ResCollectEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResCollectEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCollectEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResCollectEnterView::Swap(ResCollectEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResCollectEnterView::InternalSwap(ResCollectEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(collect_, other->collect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCollectEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResBufferEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResBufferEnterView_default_instance_._instance.get_mutable()->buffer_ = const_cast< ::mapV2::RoundBufferInfo*>(
      ::mapV2::RoundBufferInfo::internal_default_instance());
}
class ResBufferEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResBufferEnterView>()._has_bits_);
  static const ::mapV2::RoundBufferInfo& buffer(const ResBufferEnterView* msg);
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundBufferInfo&
ResBufferEnterView::HasBitSetters::buffer(const ResBufferEnterView* msg) {
  return *msg->buffer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResBufferEnterView::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResBufferEnterView::ResBufferEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResBufferEnterView)
}
ResBufferEnterView::ResBufferEnterView(const ResBufferEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buffer()) {
    buffer_ = new ::mapV2::RoundBufferInfo(*from.buffer_);
  } else {
    buffer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResBufferEnterView)
}

void ResBufferEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResBufferEnterView_map_2eproto.base);
  buffer_ = nullptr;
}

ResBufferEnterView::~ResBufferEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResBufferEnterView)
  SharedDtor();
}

void ResBufferEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete buffer_;
}

void ResBufferEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResBufferEnterView& ResBufferEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResBufferEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResBufferEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResBufferEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buffer_ != nullptr);
    buffer_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResBufferEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundBufferInfo buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_buffer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResBufferEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResBufferEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundBufferInfo buffer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResBufferEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResBufferEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResBufferEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResBufferEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundBufferInfo buffer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::buffer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResBufferEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResBufferEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResBufferEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundBufferInfo buffer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::buffer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResBufferEnterView)
  return target;
}

size_t ResBufferEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResBufferEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundBufferInfo buffer = 1;
  if (has_buffer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResBufferEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResBufferEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResBufferEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResBufferEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResBufferEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResBufferEnterView)
    MergeFrom(*source);
  }
}

void ResBufferEnterView::MergeFrom(const ResBufferEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResBufferEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_buffer()) {
    mutable_buffer()->::mapV2::RoundBufferInfo::MergeFrom(from.buffer());
  }
}

void ResBufferEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResBufferEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBufferEnterView::CopyFrom(const ResBufferEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResBufferEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBufferEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResBufferEnterView::Swap(ResBufferEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResBufferEnterView::InternalSwap(ResBufferEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buffer_, other->buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResBufferEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResMonsterEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResMonsterEnterView_default_instance_._instance.get_mutable()->monster_ = const_cast< ::mapV2::RoundMonsterInfo*>(
      ::mapV2::RoundMonsterInfo::internal_default_instance());
}
class ResMonsterEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResMonsterEnterView>()._has_bits_);
  static const ::mapV2::RoundMonsterInfo& monster(const ResMonsterEnterView* msg);
  static void set_has_monster(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundMonsterInfo&
ResMonsterEnterView::HasBitSetters::monster(const ResMonsterEnterView* msg) {
  return *msg->monster_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResMonsterEnterView::kMonsterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResMonsterEnterView::ResMonsterEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResMonsterEnterView)
}
ResMonsterEnterView::ResMonsterEnterView(const ResMonsterEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_monster()) {
    monster_ = new ::mapV2::RoundMonsterInfo(*from.monster_);
  } else {
    monster_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResMonsterEnterView)
}

void ResMonsterEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResMonsterEnterView_map_2eproto.base);
  monster_ = nullptr;
}

ResMonsterEnterView::~ResMonsterEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResMonsterEnterView)
  SharedDtor();
}

void ResMonsterEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete monster_;
}

void ResMonsterEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResMonsterEnterView& ResMonsterEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResMonsterEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResMonsterEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResMonsterEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(monster_ != nullptr);
    monster_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResMonsterEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundMonsterInfo monster = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_monster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResMonsterEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResMonsterEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundMonsterInfo monster = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_monster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResMonsterEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResMonsterEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResMonsterEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResMonsterEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundMonsterInfo monster = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::monster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResMonsterEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResMonsterEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResMonsterEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundMonsterInfo monster = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::monster(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResMonsterEnterView)
  return target;
}

size_t ResMonsterEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResMonsterEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundMonsterInfo monster = 1;
  if (has_monster()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monster_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResMonsterEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResMonsterEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResMonsterEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResMonsterEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResMonsterEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResMonsterEnterView)
    MergeFrom(*source);
  }
}

void ResMonsterEnterView::MergeFrom(const ResMonsterEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResMonsterEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_monster()) {
    mutable_monster()->::mapV2::RoundMonsterInfo::MergeFrom(from.monster());
  }
}

void ResMonsterEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResMonsterEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResMonsterEnterView::CopyFrom(const ResMonsterEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResMonsterEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResMonsterEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResMonsterEnterView::Swap(ResMonsterEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResMonsterEnterView::InternalSwap(ResMonsterEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(monster_, other->monster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResMonsterEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResNpcEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResNpcEnterView_default_instance_._instance.get_mutable()->npc_ = const_cast< ::mapV2::RoundNpcInfo*>(
      ::mapV2::RoundNpcInfo::internal_default_instance());
}
class ResNpcEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResNpcEnterView>()._has_bits_);
  static const ::mapV2::RoundNpcInfo& npc(const ResNpcEnterView* msg);
  static void set_has_npc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundNpcInfo&
ResNpcEnterView::HasBitSetters::npc(const ResNpcEnterView* msg) {
  return *msg->npc_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResNpcEnterView::kNpcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResNpcEnterView::ResNpcEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResNpcEnterView)
}
ResNpcEnterView::ResNpcEnterView(const ResNpcEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_npc()) {
    npc_ = new ::mapV2::RoundNpcInfo(*from.npc_);
  } else {
    npc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResNpcEnterView)
}

void ResNpcEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResNpcEnterView_map_2eproto.base);
  npc_ = nullptr;
}

ResNpcEnterView::~ResNpcEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResNpcEnterView)
  SharedDtor();
}

void ResNpcEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete npc_;
}

void ResNpcEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResNpcEnterView& ResNpcEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResNpcEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResNpcEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResNpcEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(npc_ != nullptr);
    npc_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResNpcEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundNpcInfo npc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_npc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResNpcEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResNpcEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundNpcInfo npc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_npc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResNpcEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResNpcEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResNpcEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResNpcEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundNpcInfo npc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::npc(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResNpcEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResNpcEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResNpcEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundNpcInfo npc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::npc(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResNpcEnterView)
  return target;
}

size_t ResNpcEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResNpcEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundNpcInfo npc = 1;
  if (has_npc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *npc_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResNpcEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResNpcEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResNpcEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResNpcEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResNpcEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResNpcEnterView)
    MergeFrom(*source);
  }
}

void ResNpcEnterView::MergeFrom(const ResNpcEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResNpcEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_npc()) {
    mutable_npc()->::mapV2::RoundNpcInfo::MergeFrom(from.npc());
  }
}

void ResNpcEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResNpcEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNpcEnterView::CopyFrom(const ResNpcEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResNpcEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNpcEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResNpcEnterView::Swap(ResNpcEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResNpcEnterView::InternalSwap(ResNpcEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npc_, other->npc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResNpcEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPetEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResPetEnterView_default_instance_._instance.get_mutable()->pet_ = const_cast< ::mapV2::RoundPetInfo*>(
      ::mapV2::RoundPetInfo::internal_default_instance());
}
class ResPetEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPetEnterView>()._has_bits_);
  static const ::mapV2::RoundPetInfo& pet(const ResPetEnterView* msg);
  static void set_has_pet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundPetInfo&
ResPetEnterView::HasBitSetters::pet(const ResPetEnterView* msg) {
  return *msg->pet_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPetEnterView::kPetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPetEnterView::ResPetEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPetEnterView)
}
ResPetEnterView::ResPetEnterView(const ResPetEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pet()) {
    pet_ = new ::mapV2::RoundPetInfo(*from.pet_);
  } else {
    pet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPetEnterView)
}

void ResPetEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResPetEnterView_map_2eproto.base);
  pet_ = nullptr;
}

ResPetEnterView::~ResPetEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResPetEnterView)
  SharedDtor();
}

void ResPetEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete pet_;
}

void ResPetEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPetEnterView& ResPetEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPetEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResPetEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPetEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pet_ != nullptr);
    pet_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPetEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundPetInfo pet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPetEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPetEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundPetInfo pet = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPetEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPetEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPetEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPetEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundPetInfo pet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pet(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPetEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPetEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPetEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundPetInfo pet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pet(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPetEnterView)
  return target;
}

size_t ResPetEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPetEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundPetInfo pet = 1;
  if (has_pet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pet_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPetEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPetEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPetEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPetEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPetEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPetEnterView)
    MergeFrom(*source);
  }
}

void ResPetEnterView::MergeFrom(const ResPetEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPetEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pet()) {
    mutable_pet()->::mapV2::RoundPetInfo::MergeFrom(from.pet());
  }
}

void ResPetEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPetEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPetEnterView::CopyFrom(const ResPetEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPetEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPetEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResPetEnterView::Swap(ResPetEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPetEnterView::InternalSwap(ResPetEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pet_, other->pet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPetEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResHeroEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResHeroEnterView_default_instance_._instance.get_mutable()->hero_ = const_cast< ::mapV2::RoundHeroInfo*>(
      ::mapV2::RoundHeroInfo::internal_default_instance());
}
class ResHeroEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResHeroEnterView>()._has_bits_);
  static const ::mapV2::RoundHeroInfo& hero(const ResHeroEnterView* msg);
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundHeroInfo&
ResHeroEnterView::HasBitSetters::hero(const ResHeroEnterView* msg) {
  return *msg->hero_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResHeroEnterView::kHeroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResHeroEnterView::ResHeroEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResHeroEnterView)
}
ResHeroEnterView::ResHeroEnterView(const ResHeroEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hero()) {
    hero_ = new ::mapV2::RoundHeroInfo(*from.hero_);
  } else {
    hero_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResHeroEnterView)
}

void ResHeroEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResHeroEnterView_map_2eproto.base);
  hero_ = nullptr;
}

ResHeroEnterView::~ResHeroEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResHeroEnterView)
  SharedDtor();
}

void ResHeroEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete hero_;
}

void ResHeroEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResHeroEnterView& ResHeroEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResHeroEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResHeroEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResHeroEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hero_ != nullptr);
    hero_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResHeroEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundHeroInfo hero = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_hero(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResHeroEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResHeroEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundHeroInfo hero = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResHeroEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResHeroEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResHeroEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResHeroEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundHeroInfo hero = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hero(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResHeroEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResHeroEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResHeroEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundHeroInfo hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hero(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResHeroEnterView)
  return target;
}

size_t ResHeroEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResHeroEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundHeroInfo hero = 1;
  if (has_hero()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hero_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResHeroEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResHeroEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResHeroEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResHeroEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResHeroEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResHeroEnterView)
    MergeFrom(*source);
  }
}

void ResHeroEnterView::MergeFrom(const ResHeroEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResHeroEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hero()) {
    mutable_hero()->::mapV2::RoundHeroInfo::MergeFrom(from.hero());
  }
}

void ResHeroEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResHeroEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHeroEnterView::CopyFrom(const ResHeroEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResHeroEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeroEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResHeroEnterView::Swap(ResHeroEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResHeroEnterView::InternalSwap(ResHeroEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_, other->hero_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResHeroEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResServantEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResServantEnterView_default_instance_._instance.get_mutable()->servant_ = const_cast< ::mapV2::RoundServantInfo*>(
      ::mapV2::RoundServantInfo::internal_default_instance());
}
class ResServantEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResServantEnterView>()._has_bits_);
  static const ::mapV2::RoundServantInfo& servant(const ResServantEnterView* msg);
  static void set_has_servant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundServantInfo&
ResServantEnterView::HasBitSetters::servant(const ResServantEnterView* msg) {
  return *msg->servant_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResServantEnterView::kServantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResServantEnterView::ResServantEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResServantEnterView)
}
ResServantEnterView::ResServantEnterView(const ResServantEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_servant()) {
    servant_ = new ::mapV2::RoundServantInfo(*from.servant_);
  } else {
    servant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResServantEnterView)
}

void ResServantEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResServantEnterView_map_2eproto.base);
  servant_ = nullptr;
}

ResServantEnterView::~ResServantEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResServantEnterView)
  SharedDtor();
}

void ResServantEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete servant_;
}

void ResServantEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResServantEnterView& ResServantEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResServantEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResServantEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResServantEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(servant_ != nullptr);
    servant_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResServantEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mapV2.RoundServantInfo servant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_servant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResServantEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResServantEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mapV2.RoundServantInfo servant = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_servant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResServantEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResServantEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResServantEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResServantEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundServantInfo servant = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::servant(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResServantEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResServantEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResServantEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mapV2.RoundServantInfo servant = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::servant(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResServantEnterView)
  return target;
}

size_t ResServantEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResServantEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .mapV2.RoundServantInfo servant = 1;
  if (has_servant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servant_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResServantEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResServantEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResServantEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResServantEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResServantEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResServantEnterView)
    MergeFrom(*source);
  }
}

void ResServantEnterView::MergeFrom(const ResServantEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResServantEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_servant()) {
    mutable_servant()->::mapV2::RoundServantInfo::MergeFrom(from.servant());
  }
}

void ResServantEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResServantEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResServantEnterView::CopyFrom(const ResServantEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResServantEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResServantEnterView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResServantEnterView::Swap(ResServantEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResServantEnterView::InternalSwap(ResServantEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(servant_, other->servant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResServantEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResMapObjectExitView::InitAsDefaultInstance() {
}
class ResMapObjectExitView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResMapObjectExitView>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResMapObjectExitView::kLidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResMapObjectExitView::ResMapObjectExitView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResMapObjectExitView)
}
ResMapObjectExitView::ResMapObjectExitView(const ResMapObjectExitView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lid_ = from.lid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResMapObjectExitView)
}

void ResMapObjectExitView::SharedCtor() {
  lid_ = PROTOBUF_LONGLONG(0);
}

ResMapObjectExitView::~ResMapObjectExitView() {
  // @@protoc_insertion_point(destructor:mapV2.ResMapObjectExitView)
  SharedDtor();
}

void ResMapObjectExitView::SharedDtor() {
}

void ResMapObjectExitView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResMapObjectExitView& ResMapObjectExitView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResMapObjectExitView_map_2eproto.base);
  return *internal_default_instance();
}


void ResMapObjectExitView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResMapObjectExitView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResMapObjectExitView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResMapObjectExitView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResMapObjectExitView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResMapObjectExitView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResMapObjectExitView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResMapObjectExitView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResMapObjectExitView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResMapObjectExitView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResMapObjectExitView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResMapObjectExitView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResMapObjectExitView)
  return target;
}

size_t ResMapObjectExitView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResMapObjectExitView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 lid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResMapObjectExitView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResMapObjectExitView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResMapObjectExitView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResMapObjectExitView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResMapObjectExitView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResMapObjectExitView)
    MergeFrom(*source);
  }
}

void ResMapObjectExitView::MergeFrom(const ResMapObjectExitView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResMapObjectExitView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lid()) {
    set_lid(from.lid());
  }
}

void ResMapObjectExitView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResMapObjectExitView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResMapObjectExitView::CopyFrom(const ResMapObjectExitView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResMapObjectExitView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResMapObjectExitView::IsInitialized() const {
  return true;
}

void ResMapObjectExitView::Swap(ResMapObjectExitView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResMapObjectExitView::InternalSwap(ResMapObjectExitView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResMapObjectExitView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerEnterMap::InitAsDefaultInstance() {
}
class ResPlayerEnterMap::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerEnterMap>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerEnterMap::kLidFieldNumber;
const int ResPlayerEnterMap::kXFieldNumber;
const int ResPlayerEnterMap::kYFieldNumber;
const int ResPlayerEnterMap::kZFieldNumber;
const int ResPlayerEnterMap::kDirFieldNumber;
const int ResPlayerEnterMap::kHpFieldNumber;
const int ResPlayerEnterMap::kMpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerEnterMap::ResPlayerEnterMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerEnterMap)
}
ResPlayerEnterMap::ResPlayerEnterMap(const ResPlayerEnterMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mp_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(mp_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerEnterMap)
}

void ResPlayerEnterMap::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mp_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(mp_));
}

ResPlayerEnterMap::~ResPlayerEnterMap() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerEnterMap)
  SharedDtor();
}

void ResPlayerEnterMap::SharedDtor() {
}

void ResPlayerEnterMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerEnterMap& ResPlayerEnterMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerEnterMap_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerEnterMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(mp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerEnterMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerEnterMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerEnterMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_mp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerEnterMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerEnterMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerEnterMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional float dir = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->dir(), output);
  }

  // optional int32 hp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 mp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerEnterMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerEnterMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional float dir = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->dir(), target);
  }

  // optional int32 hp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // optional int32 mp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerEnterMap)
  return target;
}

size_t ResPlayerEnterMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerEnterMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float dir = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 hp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerEnterMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerEnterMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerEnterMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerEnterMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerEnterMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerEnterMap)
    MergeFrom(*source);
  }
}

void ResPlayerEnterMap::MergeFrom(const ResPlayerEnterMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerEnterMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000020u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000040u) {
      mp_ = from.mp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerEnterMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerEnterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerEnterMap::CopyFrom(const ResPlayerEnterMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerEnterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerEnterMap::IsInitialized() const {
  return true;
}

void ResPlayerEnterMap::Swap(ResPlayerEnterMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerEnterMap::InternalSwap(ResPlayerEnterMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(dir_, other->dir_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerEnterMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerChangeMap::InitAsDefaultInstance() {
}
class ResPlayerChangeMap::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerChangeMap>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerChangeMap::kMidFieldNumber;
const int ResPlayerChangeMap::kLineFieldNumber;
const int ResPlayerChangeMap::kXFieldNumber;
const int ResPlayerChangeMap::kYFieldNumber;
const int ResPlayerChangeMap::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerChangeMap::ResPlayerChangeMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerChangeMap)
}
ResPlayerChangeMap::ResPlayerChangeMap(const ResPlayerChangeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerChangeMap)
}

void ResPlayerChangeMap::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(z_));
}

ResPlayerChangeMap::~ResPlayerChangeMap() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerChangeMap)
  SharedDtor();
}

void ResPlayerChangeMap::SharedDtor() {
}

void ResPlayerChangeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerChangeMap& ResPlayerChangeMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerChangeMap_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerChangeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerChangeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerChangeMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerChangeMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_line(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerChangeMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerChangeMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerChangeMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // optional int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerChangeMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerChangeMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // optional int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerChangeMap)
  return target;
}

size_t ResPlayerChangeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerChangeMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 line = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerChangeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerChangeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerChangeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerChangeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerChangeMap)
    MergeFrom(*source);
  }
}

void ResPlayerChangeMap::MergeFrom(const ResPlayerChangeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      line_ = from.line_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerChangeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerChangeMap::CopyFrom(const ResPlayerChangeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerChangeMap::IsInitialized() const {
  return true;
}

void ResPlayerChangeMap::Swap(ResPlayerChangeMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerChangeMap::InternalSwap(ResPlayerChangeMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mid_, other->mid_);
  swap(line_, other->line_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerChangeMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResChangePos::InitAsDefaultInstance() {
}
class ResChangePos::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResChangePos>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_waiguacanmovetime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResChangePos::kLidFieldNumber;
const int ResChangePos::kXFieldNumber;
const int ResChangePos::kYFieldNumber;
const int ResChangePos::kZFieldNumber;
const int ResChangePos::kReasonFieldNumber;
const int ResChangePos::kWaiGuaCanMoveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResChangePos::ResChangePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResChangePos)
}
ResChangePos::ResChangePos(const ResChangePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&waiguacanmovetime_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(waiguacanmovetime_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResChangePos)
}

void ResChangePos::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waiguacanmovetime_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(waiguacanmovetime_));
}

ResChangePos::~ResChangePos() {
  // @@protoc_insertion_point(destructor:mapV2.ResChangePos)
  SharedDtor();
}

void ResChangePos::SharedDtor() {
}

void ResChangePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResChangePos& ResChangePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResChangePos_map_2eproto.base);
  return *internal_default_instance();
}


void ResChangePos::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResChangePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&waiguacanmovetime_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(waiguacanmovetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResChangePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 waiGuaCanMoveTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_waiguacanmovetime(&has_bits);
          waiguacanmovetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResChangePos::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResChangePos)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reason = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_reason(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 waiGuaCanMoveTime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_waiguacanmovetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &waiguacanmovetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResChangePos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResChangePos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResChangePos::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResChangePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // optional int32 reason = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->reason(), output);
  }

  // optional int32 waiGuaCanMoveTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->waiguacanmovetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResChangePos)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResChangePos::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResChangePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // optional int32 reason = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->reason(), target);
  }

  // optional int32 waiGuaCanMoveTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->waiguacanmovetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResChangePos)
  return target;
}

size_t ResChangePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResChangePos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 reason = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 waiGuaCanMoveTime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->waiguacanmovetime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResChangePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResChangePos)
  GOOGLE_DCHECK_NE(&from, this);
  const ResChangePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResChangePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResChangePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResChangePos)
    MergeFrom(*source);
  }
}

void ResChangePos::MergeFrom(const ResChangePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResChangePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      waiguacanmovetime_ = from.waiguacanmovetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResChangePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResChangePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChangePos::CopyFrom(const ResChangePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResChangePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangePos::IsInitialized() const {
  return true;
}

void ResChangePos::Swap(ResChangePos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResChangePos::InternalSwap(ResChangePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(reason_, other->reason_);
  swap(waiguacanmovetime_, other->waiguacanmovetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResChangePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResObjectMove::InitAsDefaultInstance() {
}
class ResObjectMove::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResObjectMove>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResObjectMove::kLidFieldNumber;
const int ResObjectMove::kXFieldNumber;
const int ResObjectMove::kYFieldNumber;
const int ResObjectMove::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResObjectMove::ResObjectMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResObjectMove)
}
ResObjectMove::ResObjectMove(const ResObjectMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResObjectMove)
}

void ResObjectMove::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(z_));
}

ResObjectMove::~ResObjectMove() {
  // @@protoc_insertion_point(destructor:mapV2.ResObjectMove)
  SharedDtor();
}

void ResObjectMove::SharedDtor() {
}

void ResObjectMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResObjectMove& ResObjectMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResObjectMove_map_2eproto.base);
  return *internal_default_instance();
}


void ResObjectMove::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResObjectMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResObjectMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResObjectMove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResObjectMove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResObjectMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResObjectMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResObjectMove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResObjectMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResObjectMove)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResObjectMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResObjectMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResObjectMove)
  return target;
}

size_t ResObjectMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResObjectMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResObjectMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResObjectMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ResObjectMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResObjectMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResObjectMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResObjectMove)
    MergeFrom(*source);
  }
}

void ResObjectMove::MergeFrom(const ResObjectMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResObjectMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResObjectMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResObjectMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResObjectMove::CopyFrom(const ResObjectMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResObjectMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResObjectMove::IsInitialized() const {
  return true;
}

void ResObjectMove::Swap(ResObjectMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResObjectMove::InternalSwap(ResObjectMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResObjectMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResEventEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResEventEnterView_default_instance_._instance.get_mutable()->info_ = const_cast< ::mapV2::RoundEventInfo*>(
      ::mapV2::RoundEventInfo::internal_default_instance());
}
class ResEventEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResEventEnterView>()._has_bits_);
  static const ::mapV2::RoundEventInfo& info(const ResEventEnterView* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundEventInfo&
ResEventEnterView::HasBitSetters::info(const ResEventEnterView* msg) {
  return *msg->info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResEventEnterView::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResEventEnterView::ResEventEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResEventEnterView)
}
ResEventEnterView::ResEventEnterView(const ResEventEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::mapV2::RoundEventInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResEventEnterView)
}

void ResEventEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResEventEnterView_map_2eproto.base);
  info_ = nullptr;
}

ResEventEnterView::~ResEventEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResEventEnterView)
  SharedDtor();
}

void ResEventEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ResEventEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResEventEnterView& ResEventEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResEventEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResEventEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResEventEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResEventEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mapV2.RoundEventInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResEventEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResEventEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mapV2.RoundEventInfo info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResEventEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResEventEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResEventEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResEventEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mapV2.RoundEventInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResEventEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResEventEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResEventEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mapV2.RoundEventInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResEventEnterView)
  return target;
}

size_t ResEventEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResEventEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mapV2.RoundEventInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResEventEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResEventEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResEventEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResEventEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResEventEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResEventEnterView)
    MergeFrom(*source);
  }
}

void ResEventEnterView::MergeFrom(const ResEventEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResEventEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::mapV2::RoundEventInfo::MergeFrom(from.info());
  }
}

void ResEventEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResEventEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResEventEnterView::CopyFrom(const ResEventEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResEventEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResEventEnterView::IsInitialized() const {
  return true;
}

void ResEventEnterView::Swap(ResEventEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResEventEnterView::InternalSwap(ResEventEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResEventEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResRelive::InitAsDefaultInstance() {
}
class ResRelive::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResRelive>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inner(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResRelive::kLidFieldNumber;
const int ResRelive::kHpFieldNumber;
const int ResRelive::kMpFieldNumber;
const int ResRelive::kInnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResRelive::ResRelive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResRelive)
}
ResRelive::ResRelive(const ResRelive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inner_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResRelive)
}

void ResRelive::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
}

ResRelive::~ResRelive() {
  // @@protoc_insertion_point(destructor:mapV2.ResRelive)
  SharedDtor();
}

void ResRelive::SharedDtor() {
}

void ResRelive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResRelive& ResRelive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResRelive_map_2eproto.base);
  return *internal_default_instance();
}


void ResRelive::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResRelive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inner_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResRelive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_inner(&has_bits);
          inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResRelive::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResRelive)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_mp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inner = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_inner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResRelive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResRelive)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResRelive::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResRelive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }

  // optional int32 mp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // optional int32 inner = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->inner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResRelive)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResRelive::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResRelive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }

  // optional int32 mp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // optional int32 inner = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->inner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResRelive)
  return target;
}

size_t ResRelive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResRelive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int64 hp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int32 mp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 inner = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->inner());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResRelive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResRelive)
  GOOGLE_DCHECK_NE(&from, this);
  const ResRelive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResRelive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResRelive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResRelive)
    MergeFrom(*source);
  }
}

void ResRelive::MergeFrom(const ResRelive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResRelive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00000008u) {
      inner_ = from.inner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResRelive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResRelive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResRelive::CopyFrom(const ResRelive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResRelive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResRelive::IsInitialized() const {
  return true;
}

void ResRelive::Swap(ResRelive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResRelive::InternalSwap(ResRelive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(hp_, other->hp_);
  swap(mp_, other->mp_);
  swap(inner_, other->inner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResRelive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResItemEnterView::InitAsDefaultInstance() {
  ::mapV2::_ResItemEnterView_default_instance_._instance.get_mutable()->info_ = const_cast< ::mapV2::RoundItemInfo*>(
      ::mapV2::RoundItemInfo::internal_default_instance());
}
class ResItemEnterView::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResItemEnterView>()._has_bits_);
  static const ::mapV2::RoundItemInfo& info(const ResItemEnterView* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::RoundItemInfo&
ResItemEnterView::HasBitSetters::info(const ResItemEnterView* msg) {
  return *msg->info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResItemEnterView::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResItemEnterView::ResItemEnterView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResItemEnterView)
}
ResItemEnterView::ResItemEnterView(const ResItemEnterView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::mapV2::RoundItemInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mapV2.ResItemEnterView)
}

void ResItemEnterView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResItemEnterView_map_2eproto.base);
  info_ = nullptr;
}

ResItemEnterView::~ResItemEnterView() {
  // @@protoc_insertion_point(destructor:mapV2.ResItemEnterView)
  SharedDtor();
}

void ResItemEnterView::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ResItemEnterView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResItemEnterView& ResItemEnterView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResItemEnterView_map_2eproto.base);
  return *internal_default_instance();
}


void ResItemEnterView::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResItemEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResItemEnterView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mapV2.RoundItemInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResItemEnterView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResItemEnterView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mapV2.RoundItemInfo info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResItemEnterView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResItemEnterView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResItemEnterView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResItemEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mapV2.RoundItemInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResItemEnterView)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResItemEnterView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResItemEnterView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mapV2.RoundItemInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResItemEnterView)
  return target;
}

size_t ResItemEnterView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResItemEnterView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mapV2.RoundItemInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResItemEnterView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResItemEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  const ResItemEnterView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResItemEnterView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResItemEnterView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResItemEnterView)
    MergeFrom(*source);
  }
}

void ResItemEnterView::MergeFrom(const ResItemEnterView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResItemEnterView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::mapV2::RoundItemInfo::MergeFrom(from.info());
  }
}

void ResItemEnterView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResItemEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResItemEnterView::CopyFrom(const ResItemEnterView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResItemEnterView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResItemEnterView::IsInitialized() const {
  return true;
}

void ResItemEnterView::Swap(ResItemEnterView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResItemEnterView::InternalSwap(ResItemEnterView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResItemEnterView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResUpdateEquip::InitAsDefaultInstance() {
  ::mapV2::_ResUpdateEquip_default_instance_._instance.get_mutable()->equip_ = const_cast< ::mapV2::PerformerEquipBean*>(
      ::mapV2::PerformerEquipBean::internal_default_instance());
}
class ResUpdateEquip::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResUpdateEquip>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mapV2::PerformerEquipBean& equip(const ResUpdateEquip* msg);
  static void set_has_equip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mapV2::PerformerEquipBean&
ResUpdateEquip::HasBitSetters::equip(const ResUpdateEquip* msg) {
  return *msg->equip_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResUpdateEquip::kLidFieldNumber;
const int ResUpdateEquip::kEquipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResUpdateEquip::ResUpdateEquip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResUpdateEquip)
}
ResUpdateEquip::ResUpdateEquip(const ResUpdateEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equip()) {
    equip_ = new ::mapV2::PerformerEquipBean(*from.equip_);
  } else {
    equip_ = nullptr;
  }
  lid_ = from.lid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResUpdateEquip)
}

void ResUpdateEquip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResUpdateEquip_map_2eproto.base);
  ::memset(&equip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lid_) -
      reinterpret_cast<char*>(&equip_)) + sizeof(lid_));
}

ResUpdateEquip::~ResUpdateEquip() {
  // @@protoc_insertion_point(destructor:mapV2.ResUpdateEquip)
  SharedDtor();
}

void ResUpdateEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equip_;
}

void ResUpdateEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResUpdateEquip& ResUpdateEquip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResUpdateEquip_map_2eproto.base);
  return *internal_default_instance();
}


void ResUpdateEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResUpdateEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equip_ != nullptr);
    equip_->Clear();
  }
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResUpdateEquip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mapV2.PerformerEquipBean equip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_equip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResUpdateEquip::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResUpdateEquip)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mapV2.PerformerEquipBean equip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResUpdateEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResUpdateEquip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResUpdateEquip::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResUpdateEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional .mapV2.PerformerEquipBean equip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::equip(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResUpdateEquip)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResUpdateEquip::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResUpdateEquip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional .mapV2.PerformerEquipBean equip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::equip(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResUpdateEquip)
  return target;
}

size_t ResUpdateEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResUpdateEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mapV2.PerformerEquipBean equip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equip_);
    }

    // optional int64 lid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResUpdateEquip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResUpdateEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ResUpdateEquip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResUpdateEquip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResUpdateEquip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResUpdateEquip)
    MergeFrom(*source);
  }
}

void ResUpdateEquip::MergeFrom(const ResUpdateEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResUpdateEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equip()->::mapV2::PerformerEquipBean::MergeFrom(from.equip());
    }
    if (cached_has_bits & 0x00000002u) {
      lid_ = from.lid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResUpdateEquip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResUpdateEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUpdateEquip::CopyFrom(const ResUpdateEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResUpdateEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUpdateEquip::IsInitialized() const {
  return true;
}

void ResUpdateEquip::Swap(ResUpdateEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResUpdateEquip::InternalSwap(ResUpdateEquip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(equip_, other->equip_);
  swap(lid_, other->lid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResUpdateEquip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TryEnterMapRequest::InitAsDefaultInstance() {
}
class TryEnterMapRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TryEnterMapRequest>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TryEnterMapRequest::kMidFieldNumber;
const int TryEnterMapRequest::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TryEnterMapRequest::TryEnterMapRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.TryEnterMapRequest)
}
TryEnterMapRequest::TryEnterMapRequest(const TryEnterMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:mapV2.TryEnterMapRequest)
}

void TryEnterMapRequest::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(line_));
}

TryEnterMapRequest::~TryEnterMapRequest() {
  // @@protoc_insertion_point(destructor:mapV2.TryEnterMapRequest)
  SharedDtor();
}

void TryEnterMapRequest::SharedDtor() {
}

void TryEnterMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TryEnterMapRequest& TryEnterMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TryEnterMapRequest_map_2eproto.base);
  return *internal_default_instance();
}


void TryEnterMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.TryEnterMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&line_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(line_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TryEnterMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TryEnterMapRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.TryEnterMapRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_line(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.TryEnterMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.TryEnterMapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TryEnterMapRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.TryEnterMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // required int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.TryEnterMapRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TryEnterMapRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.TryEnterMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // required int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.TryEnterMapRequest)
  return target;
}

size_t TryEnterMapRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.TryEnterMapRequest)
  size_t total_size = 0;

  if (has_mid()) {
    // required int32 mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  if (has_line()) {
    // required int32 line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());
  }

  return total_size;
}
size_t TryEnterMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.TryEnterMapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mid());

    // required int32 line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TryEnterMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.TryEnterMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TryEnterMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TryEnterMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.TryEnterMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.TryEnterMapRequest)
    MergeFrom(*source);
  }
}

void TryEnterMapRequest::MergeFrom(const TryEnterMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.TryEnterMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      line_ = from.line_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TryEnterMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.TryEnterMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryEnterMapRequest::CopyFrom(const TryEnterMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.TryEnterMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryEnterMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TryEnterMapRequest::Swap(TryEnterMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TryEnterMapRequest::InternalSwap(TryEnterMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mid_, other->mid_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TryEnterMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResTryEnterMap::InitAsDefaultInstance() {
}
class ResTryEnterMap::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResTryEnterMap>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResTryEnterMap::kMidFieldNumber;
const int ResTryEnterMap::kLineFieldNumber;
const int ResTryEnterMap::kReconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResTryEnterMap::ResTryEnterMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResTryEnterMap)
}
ResTryEnterMap::ResTryEnterMap(const ResTryEnterMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reconnect_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(reconnect_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResTryEnterMap)
}

void ResTryEnterMap::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(reconnect_));
}

ResTryEnterMap::~ResTryEnterMap() {
  // @@protoc_insertion_point(destructor:mapV2.ResTryEnterMap)
  SharedDtor();
}

void ResTryEnterMap::SharedDtor() {
}

void ResTryEnterMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResTryEnterMap& ResTryEnterMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResTryEnterMap_map_2eproto.base);
  return *internal_default_instance();
}


void ResTryEnterMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResTryEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reconnect_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(reconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResTryEnterMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reconnect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_reconnect(&has_bits);
          reconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResTryEnterMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResTryEnterMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_mid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_line(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reconnect = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_reconnect(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResTryEnterMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResTryEnterMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResTryEnterMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResTryEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // required int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // optional bool reconnect = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->reconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResTryEnterMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResTryEnterMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResTryEnterMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // required int32 line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // optional bool reconnect = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->reconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResTryEnterMap)
  return target;
}

size_t ResTryEnterMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResTryEnterMap)
  size_t total_size = 0;

  if (has_mid()) {
    // required int32 mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mid());
  }

  if (has_line()) {
    // required int32 line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());
  }

  return total_size;
}
size_t ResTryEnterMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResTryEnterMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 mid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mid());

    // required int32 line = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool reconnect = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResTryEnterMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResTryEnterMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ResTryEnterMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResTryEnterMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResTryEnterMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResTryEnterMap)
    MergeFrom(*source);
  }
}

void ResTryEnterMap::MergeFrom(const ResTryEnterMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResTryEnterMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      line_ = from.line_;
    }
    if (cached_has_bits & 0x00000004u) {
      reconnect_ = from.reconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResTryEnterMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResTryEnterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResTryEnterMap::CopyFrom(const ResTryEnterMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResTryEnterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResTryEnterMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResTryEnterMap::Swap(ResTryEnterMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResTryEnterMap::InternalSwap(ResTryEnterMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mid_, other->mid_);
  swap(line_, other->line_);
  swap(reconnect_, other->reconnect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResTryEnterMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResChangePlayer::InitAsDefaultInstance() {
}
class ResChangePlayer::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResChangePlayer>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResChangePlayer::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResChangePlayer::ResChangePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResChangePlayer)
}
ResChangePlayer::ResChangePlayer(const ResChangePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResChangePlayer)
}

void ResChangePlayer::SharedCtor() {
  playerid_ = PROTOBUF_LONGLONG(0);
}

ResChangePlayer::~ResChangePlayer() {
  // @@protoc_insertion_point(destructor:mapV2.ResChangePlayer)
  SharedDtor();
}

void ResChangePlayer::SharedDtor() {
}

void ResChangePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResChangePlayer& ResChangePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResChangePlayer_map_2eproto.base);
  return *internal_default_instance();
}


void ResChangePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResChangePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResChangePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResChangePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResChangePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 playerId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResChangePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResChangePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResChangePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResChangePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResChangePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResChangePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResChangePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResChangePlayer)
  return target;
}

size_t ResChangePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResChangePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 playerId = 1;
  if (has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResChangePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResChangePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ResChangePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResChangePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResChangePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResChangePlayer)
    MergeFrom(*source);
  }
}

void ResChangePlayer::MergeFrom(const ResChangePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResChangePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerid()) {
    set_playerid(from.playerid());
  }
}

void ResChangePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResChangePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChangePlayer::CopyFrom(const ResChangePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResChangePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChangePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResChangePlayer::Swap(ResChangePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResChangePlayer::InternalSwap(ResChangePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResChangePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResReplacePlayer::InitAsDefaultInstance() {
}
class ResReplacePlayer::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResReplacePlayer>()._has_bits_);
  static void set_has_oldid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResReplacePlayer::kOldIdFieldNumber;
const int ResReplacePlayer::kNewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResReplacePlayer::ResReplacePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResReplacePlayer)
}
ResReplacePlayer::ResReplacePlayer(const ResReplacePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oldid_, &from.oldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newid_) -
    reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResReplacePlayer)
}

void ResReplacePlayer::SharedCtor() {
  ::memset(&oldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newid_) -
      reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
}

ResReplacePlayer::~ResReplacePlayer() {
  // @@protoc_insertion_point(destructor:mapV2.ResReplacePlayer)
  SharedDtor();
}

void ResReplacePlayer::SharedDtor() {
}

void ResReplacePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResReplacePlayer& ResReplacePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResReplacePlayer_map_2eproto.base);
  return *internal_default_instance();
}


void ResReplacePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResReplacePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&oldid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newid_) -
        reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResReplacePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 oldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_oldid(&has_bits);
          oldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 newId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_newid(&has_bits);
          newid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResReplacePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResReplacePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 oldId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_oldid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &oldid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &newid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResReplacePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResReplacePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResReplacePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResReplacePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 oldId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->oldid(), output);
  }

  // required int64 newId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->newid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResReplacePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResReplacePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResReplacePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 oldId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->oldid(), target);
  }

  // required int64 newId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->newid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResReplacePlayer)
  return target;
}

size_t ResReplacePlayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResReplacePlayer)
  size_t total_size = 0;

  if (has_oldid()) {
    // required int64 oldId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->oldid());
  }

  if (has_newid()) {
    // required int64 newId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->newid());
  }

  return total_size;
}
size_t ResReplacePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResReplacePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 oldId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->oldid());

    // required int64 newId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->newid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResReplacePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResReplacePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ResReplacePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResReplacePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResReplacePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResReplacePlayer)
    MergeFrom(*source);
  }
}

void ResReplacePlayer::MergeFrom(const ResReplacePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResReplacePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oldid_ = from.oldid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newid_ = from.newid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResReplacePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResReplacePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResReplacePlayer::CopyFrom(const ResReplacePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResReplacePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResReplacePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResReplacePlayer::Swap(ResReplacePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResReplacePlayer::InternalSwap(ResReplacePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oldid_, other->oldid_);
  swap(newid_, other->newid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResReplacePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResBossOwner::InitAsDefaultInstance() {
}
class ResBossOwner::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResBossOwner>()._has_bits_);
  static void set_has_bossid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unionid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unionname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResBossOwner::kBossIdFieldNumber;
const int ResBossOwner::kLidFieldNumber;
const int ResBossOwner::kNameFieldNumber;
const int ResBossOwner::kUnionIdFieldNumber;
const int ResBossOwner::kUnionNameFieldNumber;
const int ResBossOwner::kSexFieldNumber;
const int ResBossOwner::kCareerFieldNumber;
const int ResBossOwner::kXFieldNumber;
const int ResBossOwner::kYFieldNumber;
const int ResBossOwner::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResBossOwner::ResBossOwner()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResBossOwner)
}
ResBossOwner::ResBossOwner(const ResBossOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unionname()) {
    unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
  }
  ::memcpy(&bossid_, &from.bossid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&bossid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResBossOwner)
}

void ResBossOwner::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResBossOwner_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bossid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&bossid_)) + sizeof(z_));
}

ResBossOwner::~ResBossOwner() {
  // @@protoc_insertion_point(destructor:mapV2.ResBossOwner)
  SharedDtor();
}

void ResBossOwner::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResBossOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResBossOwner& ResBossOwner::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResBossOwner_map_2eproto.base);
  return *internal_default_instance();
}


void ResBossOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResBossOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unionname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&bossid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_) -
        reinterpret_cast<char*>(&bossid_)) + sizeof(x_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&y_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResBossOwner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 bossId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bossid(&has_bits);
          bossid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "mapV2.ResBossOwner.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 unionId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_unionid(&has_bits);
          unionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unionName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unionname(), ptr, ctx, "mapV2.ResBossOwner.unionName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_sex(&has_bits);
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 career = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResBossOwner::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResBossOwner)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bossId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bossid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.ResBossOwner.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 unionId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_unionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unionName = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unionname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionname().data(), static_cast<int>(this->unionname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.ResBossOwner.unionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_sex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 career = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_career(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResBossOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResBossOwner)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResBossOwner::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResBossOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bossId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  // optional int64 lid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->lid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResBossOwner.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int64 unionId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->unionid(), output);
  }

  // optional string unionName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResBossOwner.unionName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unionname(), output);
  }

  // optional int32 sex = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional int32 career = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->career(), output);
  }

  // optional float x = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->x(), output);
  }

  // optional float y = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->y(), output);
  }

  // optional float z = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResBossOwner)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResBossOwner::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResBossOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bossId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  // optional int64 lid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->lid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResBossOwner.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 unionId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->unionid(), target);
  }

  // optional string unionName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResBossOwner.unionName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->unionname(), target);
  }

  // optional int32 sex = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional int32 career = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->career(), target);
  }

  // optional float x = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->x(), target);
  }

  // optional float y = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->y(), target);
  }

  // optional float z = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResBossOwner)
  return target;
}

size_t ResBossOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResBossOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string unionName = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unionname());
    }

    // optional int64 bossId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 lid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional int64 unionId = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->unionid());
    }

    // optional int32 sex = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 career = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional float x = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float y = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float z = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResBossOwner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResBossOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const ResBossOwner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResBossOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResBossOwner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResBossOwner)
    MergeFrom(*source);
  }
}

void ResBossOwner::MergeFrom(const ResBossOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResBossOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
    }
    if (cached_has_bits & 0x00000004u) {
      bossid_ = from.bossid_;
    }
    if (cached_has_bits & 0x00000008u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000010u) {
      unionid_ = from.unionid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000040u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000080u) {
      x_ = from.x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000200u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResBossOwner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResBossOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBossOwner::CopyFrom(const ResBossOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResBossOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBossOwner::IsInitialized() const {
  return true;
}

void ResBossOwner::Swap(ResBossOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResBossOwner::InternalSwap(ResBossOwner* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unionname_.Swap(&other->unionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bossid_, other->bossid_);
  swap(lid_, other->lid_);
  swap(unionid_, other->unionid_);
  swap(sex_, other->sex_);
  swap(career_, other->career_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResBossOwner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerWingChange::InitAsDefaultInstance() {
}
class ResPlayerWingChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerWingChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerWingChange::kLidFieldNumber;
const int ResPlayerWingChange::kWingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerWingChange::ResPlayerWingChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerWingChange)
}
ResPlayerWingChange::ResPlayerWingChange(const ResPlayerWingChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&wing_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(wing_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerWingChange)
}

void ResPlayerWingChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wing_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(wing_));
}

ResPlayerWingChange::~ResPlayerWingChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerWingChange)
  SharedDtor();
}

void ResPlayerWingChange::SharedDtor() {
}

void ResPlayerWingChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerWingChange& ResPlayerWingChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerWingChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerWingChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerWingChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wing_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(wing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerWingChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 wing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_wing(&has_bits);
          wing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerWingChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerWingChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 wing = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_wing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerWingChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerWingChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerWingChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerWingChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int32 wing = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->wing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerWingChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerWingChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerWingChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int32 wing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->wing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerWingChange)
  return target;
}

size_t ResPlayerWingChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerWingChange)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_wing()) {
    // required int32 wing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wing());
  }

  return total_size;
}
size_t ResPlayerWingChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerWingChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 wing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wing());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerWingChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerWingChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerWingChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerWingChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerWingChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerWingChange)
    MergeFrom(*source);
  }
}

void ResPlayerWingChange::MergeFrom(const ResPlayerWingChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerWingChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      wing_ = from.wing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerWingChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerWingChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerWingChange::CopyFrom(const ResPlayerWingChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerWingChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerWingChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResPlayerWingChange::Swap(ResPlayerWingChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerWingChange::InternalSwap(ResPlayerWingChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(wing_, other->wing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerWingChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerUnionChange::InitAsDefaultInstance() {
}
class ResPlayerUnionChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerUnionChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerUnionChange::kLidFieldNumber;
const int ResPlayerUnionChange::kUnionIdFieldNumber;
const int ResPlayerUnionChange::kUnionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerUnionChange::ResPlayerUnionChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerUnionChange)
}
ResPlayerUnionChange::ResPlayerUnionChange(const ResPlayerUnionChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unionname()) {
    unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
  }
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unionid_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(unionid_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerUnionChange)
}

void ResPlayerUnionChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResPlayerUnionChange_map_2eproto.base);
  unionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unionid_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(unionid_));
}

ResPlayerUnionChange::~ResPlayerUnionChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerUnionChange)
  SharedDtor();
}

void ResPlayerUnionChange::SharedDtor() {
  unionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResPlayerUnionChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerUnionChange& ResPlayerUnionChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerUnionChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerUnionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerUnionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unionname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unionid_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(unionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerUnionChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 unionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_unionid(&has_bits);
          unionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string unionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unionname(), ptr, ctx, "mapV2.ResPlayerUnionChange.unionName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerUnionChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerUnionChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 unionId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_unionid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string unionName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unionname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionname().data(), static_cast<int>(this->unionname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.ResPlayerUnionChange.unionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerUnionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerUnionChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerUnionChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerUnionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int64 unionId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->unionid(), output);
  }

  // required string unionName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResPlayerUnionChange.unionName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unionname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerUnionChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerUnionChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerUnionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int64 unionId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->unionid(), target);
  }

  // required string unionName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionname().data(), static_cast<int>(this->unionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResPlayerUnionChange.unionName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->unionname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerUnionChange)
  return target;
}

size_t ResPlayerUnionChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerUnionChange)
  size_t total_size = 0;

  if (has_unionname()) {
    // required string unionName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->unionname());
  }

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_unionid()) {
    // required int64 unionId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unionid());
  }

  return total_size;
}
size_t ResPlayerUnionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerUnionChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string unionName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->unionname());

    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int64 unionId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerUnionChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerUnionChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerUnionChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerUnionChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerUnionChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerUnionChange)
    MergeFrom(*source);
  }
}

void ResPlayerUnionChange::MergeFrom(const ResPlayerUnionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerUnionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unionname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unionname_);
    }
    if (cached_has_bits & 0x00000002u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000004u) {
      unionid_ = from.unionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerUnionChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerUnionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerUnionChange::CopyFrom(const ResPlayerUnionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerUnionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerUnionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResPlayerUnionChange::Swap(ResPlayerUnionChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerUnionChange::InternalSwap(ResPlayerUnionChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unionname_.Swap(&other->unionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lid_, other->lid_);
  swap(unionid_, other->unionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerUnionChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerReliveRequest::InitAsDefaultInstance() {
}
class PlayerReliveRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<PlayerReliveRequest>()._has_bits_);
  static void set_has_relivetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerReliveRequest::kReliveTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerReliveRequest::PlayerReliveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.PlayerReliveRequest)
}
PlayerReliveRequest::PlayerReliveRequest(const PlayerReliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relivetype_ = from.relivetype_;
  // @@protoc_insertion_point(copy_constructor:mapV2.PlayerReliveRequest)
}

void PlayerReliveRequest::SharedCtor() {
  relivetype_ = 0;
}

PlayerReliveRequest::~PlayerReliveRequest() {
  // @@protoc_insertion_point(destructor:mapV2.PlayerReliveRequest)
  SharedDtor();
}

void PlayerReliveRequest::SharedDtor() {
}

void PlayerReliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerReliveRequest& PlayerReliveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerReliveRequest_map_2eproto.base);
  return *internal_default_instance();
}


void PlayerReliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.PlayerReliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relivetype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerReliveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 reliveType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_relivetype(&has_bits);
          relivetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerReliveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.PlayerReliveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reliveType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_relivetype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.PlayerReliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.PlayerReliveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerReliveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.PlayerReliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 reliveType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->relivetype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.PlayerReliveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerReliveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.PlayerReliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 reliveType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->relivetype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.PlayerReliveRequest)
  return target;
}

size_t PlayerReliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.PlayerReliveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 reliveType = 1;
  if (has_relivetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->relivetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerReliveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.PlayerReliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerReliveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerReliveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.PlayerReliveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.PlayerReliveRequest)
    MergeFrom(*source);
  }
}

void PlayerReliveRequest::MergeFrom(const PlayerReliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.PlayerReliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relivetype()) {
    set_relivetype(from.relivetype());
  }
}

void PlayerReliveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.PlayerReliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveRequest::CopyFrom(const PlayerReliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.PlayerReliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PlayerReliveRequest::Swap(PlayerReliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerReliveRequest::InternalSwap(PlayerReliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relivetype_, other->relivetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReliveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerReliveInfo::InitAsDefaultInstance() {
}
class ResPlayerReliveInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerReliveInfo>()._has_bits_);
  static void set_has_diecount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autorelivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerReliveInfo::kDieCountFieldNumber;
const int ResPlayerReliveInfo::kAutoReliveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerReliveInfo::ResPlayerReliveInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerReliveInfo)
}
ResPlayerReliveInfo::ResPlayerReliveInfo(const ResPlayerReliveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&diecount_, &from.diecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&autorelivetime_) -
    reinterpret_cast<char*>(&diecount_)) + sizeof(autorelivetime_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerReliveInfo)
}

void ResPlayerReliveInfo::SharedCtor() {
  ::memset(&diecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autorelivetime_) -
      reinterpret_cast<char*>(&diecount_)) + sizeof(autorelivetime_));
}

ResPlayerReliveInfo::~ResPlayerReliveInfo() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerReliveInfo)
  SharedDtor();
}

void ResPlayerReliveInfo::SharedDtor() {
}

void ResPlayerReliveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerReliveInfo& ResPlayerReliveInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerReliveInfo_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerReliveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerReliveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&diecount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autorelivetime_) -
        reinterpret_cast<char*>(&diecount_)) + sizeof(autorelivetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerReliveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 dieCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_diecount(&has_bits);
          diecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 autoReliveTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_autorelivetime(&has_bits);
          autorelivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerReliveInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerReliveInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dieCount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_diecount(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &diecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 autoReliveTime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_autorelivetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorelivetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerReliveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerReliveInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerReliveInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerReliveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 dieCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->diecount(), output);
  }

  // required int32 autoReliveTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->autorelivetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerReliveInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerReliveInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerReliveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 dieCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->diecount(), target);
  }

  // required int32 autoReliveTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->autorelivetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerReliveInfo)
  return target;
}

size_t ResPlayerReliveInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerReliveInfo)
  size_t total_size = 0;

  if (has_diecount()) {
    // required int32 dieCount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->diecount());
  }

  if (has_autorelivetime()) {
    // required int32 autoReliveTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->autorelivetime());
  }

  return total_size;
}
size_t ResPlayerReliveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerReliveInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 dieCount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->diecount());

    // required int32 autoReliveTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->autorelivetime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerReliveInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerReliveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerReliveInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerReliveInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerReliveInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerReliveInfo)
    MergeFrom(*source);
  }
}

void ResPlayerReliveInfo::MergeFrom(const ResPlayerReliveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerReliveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      diecount_ = from.diecount_;
    }
    if (cached_has_bits & 0x00000002u) {
      autorelivetime_ = from.autorelivetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerReliveInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerReliveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerReliveInfo::CopyFrom(const ResPlayerReliveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerReliveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerReliveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResPlayerReliveInfo::Swap(ResPlayerReliveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerReliveInfo::InternalSwap(ResPlayerReliveInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(diecount_, other->diecount_);
  swap(autorelivetime_, other->autorelivetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerReliveInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerFashionChange::InitAsDefaultInstance() {
}
class ResPlayerFashionChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerFashionChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fashiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerFashionChange::kLidFieldNumber;
const int ResPlayerFashionChange::kFashionTypeFieldNumber;
const int ResPlayerFashionChange::kInt32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerFashionChange::ResPlayerFashionChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerFashionChange)
}
ResPlayerFashionChange::ResPlayerFashionChange(const ResPlayerFashionChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&int32_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(int32_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerFashionChange)
}

void ResPlayerFashionChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int32_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(int32_));
}

ResPlayerFashionChange::~ResPlayerFashionChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerFashionChange)
  SharedDtor();
}

void ResPlayerFashionChange::SharedDtor() {
}

void ResPlayerFashionChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerFashionChange& ResPlayerFashionChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerFashionChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerFashionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerFashionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int32_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(int32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerFashionChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 fashionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_fashiontype(&has_bits);
          fashiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_int32(&has_bits);
          int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerFashionChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerFashionChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fashionType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fashiontype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 int32 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_int32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerFashionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerFashionChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerFashionChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerFashionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int32 fashionType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->fashiontype(), output);
  }

  // required int32 int32 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->int32(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerFashionChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerFashionChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerFashionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int32 fashionType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->fashiontype(), target);
  }

  // required int32 int32 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->int32(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerFashionChange)
  return target;
}

size_t ResPlayerFashionChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerFashionChange)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_fashiontype()) {
    // required int32 fashionType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fashiontype());
  }

  if (has_int32()) {
    // required int32 int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->int32());
  }

  return total_size;
}
size_t ResPlayerFashionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerFashionChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 fashionType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fashiontype());

    // required int32 int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->int32());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerFashionChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerFashionChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerFashionChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerFashionChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerFashionChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerFashionChange)
    MergeFrom(*source);
  }
}

void ResPlayerFashionChange::MergeFrom(const ResPlayerFashionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerFashionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fashiontype_ = from.fashiontype_;
    }
    if (cached_has_bits & 0x00000004u) {
      int32_ = from.int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerFashionChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerFashionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerFashionChange::CopyFrom(const ResPlayerFashionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerFashionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerFashionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResPlayerFashionChange::Swap(ResPlayerFashionChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerFashionChange::InternalSwap(ResPlayerFashionChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(fashiontype_, other->fashiontype_);
  swap(int32_, other->int32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerFashionChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerJunxianChange::InitAsDefaultInstance() {
}
class ResPlayerJunxianChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerJunxianChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_junxianlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerJunxianChange::kLidFieldNumber;
const int ResPlayerJunxianChange::kJunxianLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerJunxianChange::ResPlayerJunxianChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerJunxianChange)
}
ResPlayerJunxianChange::ResPlayerJunxianChange(const ResPlayerJunxianChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&junxianlevel_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(junxianlevel_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerJunxianChange)
}

void ResPlayerJunxianChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&junxianlevel_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(junxianlevel_));
}

ResPlayerJunxianChange::~ResPlayerJunxianChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerJunxianChange)
  SharedDtor();
}

void ResPlayerJunxianChange::SharedDtor() {
}

void ResPlayerJunxianChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerJunxianChange& ResPlayerJunxianChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerJunxianChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerJunxianChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerJunxianChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&junxianlevel_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(junxianlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerJunxianChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 junxianLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_junxianlevel(&has_bits);
          junxianlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerJunxianChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerJunxianChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 junxianLevel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_junxianlevel(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &junxianlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerJunxianChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerJunxianChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerJunxianChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerJunxianChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int32 junxianLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->junxianlevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerJunxianChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerJunxianChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerJunxianChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int32 junxianLevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->junxianlevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerJunxianChange)
  return target;
}

size_t ResPlayerJunxianChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerJunxianChange)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_junxianlevel()) {
    // required int32 junxianLevel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->junxianlevel());
  }

  return total_size;
}
size_t ResPlayerJunxianChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerJunxianChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 junxianLevel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->junxianlevel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerJunxianChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerJunxianChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerJunxianChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerJunxianChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerJunxianChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerJunxianChange)
    MergeFrom(*source);
  }
}

void ResPlayerJunxianChange::MergeFrom(const ResPlayerJunxianChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerJunxianChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      junxianlevel_ = from.junxianlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerJunxianChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerJunxianChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerJunxianChange::CopyFrom(const ResPlayerJunxianChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerJunxianChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerJunxianChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResPlayerJunxianChange::Swap(ResPlayerJunxianChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerJunxianChange::InternalSwap(ResPlayerJunxianChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(junxianlevel_, other->junxianlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerJunxianChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwitchFightModelRequest::InitAsDefaultInstance() {
}
class SwitchFightModelRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SwitchFightModelRequest>()._has_bits_);
  static void set_has_fightmodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchFightModelRequest::kFightModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchFightModelRequest::SwitchFightModelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.SwitchFightModelRequest)
}
SwitchFightModelRequest::SwitchFightModelRequest(const SwitchFightModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fightmodel_ = from.fightmodel_;
  // @@protoc_insertion_point(copy_constructor:mapV2.SwitchFightModelRequest)
}

void SwitchFightModelRequest::SharedCtor() {
  fightmodel_ = 0;
}

SwitchFightModelRequest::~SwitchFightModelRequest() {
  // @@protoc_insertion_point(destructor:mapV2.SwitchFightModelRequest)
  SharedDtor();
}

void SwitchFightModelRequest::SharedDtor() {
}

void SwitchFightModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchFightModelRequest& SwitchFightModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchFightModelRequest_map_2eproto.base);
  return *internal_default_instance();
}


void SwitchFightModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.SwitchFightModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fightmodel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SwitchFightModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 fightModel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_fightmodel(&has_bits);
          fightmodel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SwitchFightModelRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.SwitchFightModelRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fightModel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fightmodel(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightmodel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.SwitchFightModelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.SwitchFightModelRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SwitchFightModelRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.SwitchFightModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fightModel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fightmodel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.SwitchFightModelRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchFightModelRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.SwitchFightModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fightModel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->fightmodel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.SwitchFightModelRequest)
  return target;
}

size_t SwitchFightModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.SwitchFightModelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 fightModel = 1;
  if (has_fightmodel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fightmodel());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchFightModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.SwitchFightModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchFightModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchFightModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.SwitchFightModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.SwitchFightModelRequest)
    MergeFrom(*source);
  }
}

void SwitchFightModelRequest::MergeFrom(const SwitchFightModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.SwitchFightModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fightmodel()) {
    set_fightmodel(from.fightmodel());
  }
}

void SwitchFightModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.SwitchFightModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchFightModelRequest::CopyFrom(const SwitchFightModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.SwitchFightModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchFightModelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SwitchFightModelRequest::Swap(SwitchFightModelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchFightModelRequest::InternalSwap(SwitchFightModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fightmodel_, other->fightmodel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchFightModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResSwitchFightModel::InitAsDefaultInstance() {
}
class ResSwitchFightModel::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResSwitchFightModel>()._has_bits_);
  static void set_has_fightmodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResSwitchFightModel::kFightModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResSwitchFightModel::ResSwitchFightModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResSwitchFightModel)
}
ResSwitchFightModel::ResSwitchFightModel(const ResSwitchFightModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fightmodel_ = from.fightmodel_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResSwitchFightModel)
}

void ResSwitchFightModel::SharedCtor() {
  fightmodel_ = 0;
}

ResSwitchFightModel::~ResSwitchFightModel() {
  // @@protoc_insertion_point(destructor:mapV2.ResSwitchFightModel)
  SharedDtor();
}

void ResSwitchFightModel::SharedDtor() {
}

void ResSwitchFightModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResSwitchFightModel& ResSwitchFightModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResSwitchFightModel_map_2eproto.base);
  return *internal_default_instance();
}


void ResSwitchFightModel::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResSwitchFightModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fightmodel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResSwitchFightModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 fightModel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_fightmodel(&has_bits);
          fightmodel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResSwitchFightModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResSwitchFightModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fightModel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fightmodel(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightmodel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResSwitchFightModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResSwitchFightModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResSwitchFightModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResSwitchFightModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fightModel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fightmodel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResSwitchFightModel)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResSwitchFightModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResSwitchFightModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fightModel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->fightmodel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResSwitchFightModel)
  return target;
}

size_t ResSwitchFightModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResSwitchFightModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 fightModel = 1;
  if (has_fightmodel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fightmodel());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResSwitchFightModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResSwitchFightModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ResSwitchFightModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResSwitchFightModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResSwitchFightModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResSwitchFightModel)
    MergeFrom(*source);
  }
}

void ResSwitchFightModel::MergeFrom(const ResSwitchFightModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResSwitchFightModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fightmodel()) {
    set_fightmodel(from.fightmodel());
  }
}

void ResSwitchFightModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResSwitchFightModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSwitchFightModel::CopyFrom(const ResSwitchFightModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResSwitchFightModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSwitchFightModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResSwitchFightModel::Swap(ResSwitchFightModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResSwitchFightModel::InternalSwap(ResSwitchFightModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fightmodel_, other->fightmodel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResSwitchFightModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PickUpMapItemRequest::InitAsDefaultInstance() {
}
class PickUpMapItemRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<PickUpMapItemRequest>()._has_bits_);
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PickUpMapItemRequest::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PickUpMapItemRequest::PickUpMapItemRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.PickUpMapItemRequest)
}
PickUpMapItemRequest::PickUpMapItemRequest(const PickUpMapItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  objid_ = from.objid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.PickUpMapItemRequest)
}

void PickUpMapItemRequest::SharedCtor() {
  objid_ = PROTOBUF_LONGLONG(0);
}

PickUpMapItemRequest::~PickUpMapItemRequest() {
  // @@protoc_insertion_point(destructor:mapV2.PickUpMapItemRequest)
  SharedDtor();
}

void PickUpMapItemRequest::SharedDtor() {
}

void PickUpMapItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PickUpMapItemRequest& PickUpMapItemRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PickUpMapItemRequest_map_2eproto.base);
  return *internal_default_instance();
}


void PickUpMapItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.PickUpMapItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PickUpMapItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 objId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PickUpMapItemRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.PickUpMapItemRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 objId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_objid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.PickUpMapItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.PickUpMapItemRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PickUpMapItemRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.PickUpMapItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 objId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.PickUpMapItemRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PickUpMapItemRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.PickUpMapItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 objId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.PickUpMapItemRequest)
  return target;
}

size_t PickUpMapItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.PickUpMapItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 objId = 1;
  if (has_objid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->objid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PickUpMapItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.PickUpMapItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PickUpMapItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PickUpMapItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.PickUpMapItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.PickUpMapItemRequest)
    MergeFrom(*source);
  }
}

void PickUpMapItemRequest::MergeFrom(const PickUpMapItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.PickUpMapItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objid()) {
    set_objid(from.objid());
  }
}

void PickUpMapItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.PickUpMapItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickUpMapItemRequest::CopyFrom(const PickUpMapItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.PickUpMapItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickUpMapItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PickUpMapItemRequest::Swap(PickUpMapItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PickUpMapItemRequest::InternalSwap(PickUpMapItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objid_, other->objid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PickUpMapItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResNoticeViewTypeInfo::InitAsDefaultInstance() {
}
class ResNoticeViewTypeInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResNoticeViewTypeInfo>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResNoticeViewTypeInfo::kLidFieldNumber;
const int ResNoticeViewTypeInfo::kUpdateListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResNoticeViewTypeInfo::ResNoticeViewTypeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResNoticeViewTypeInfo)
}
ResNoticeViewTypeInfo::ResNoticeViewTypeInfo(const ResNoticeViewTypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updatelist_(from.updatelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lid_ = from.lid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResNoticeViewTypeInfo)
}

void ResNoticeViewTypeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResNoticeViewTypeInfo_map_2eproto.base);
  lid_ = PROTOBUF_LONGLONG(0);
}

ResNoticeViewTypeInfo::~ResNoticeViewTypeInfo() {
  // @@protoc_insertion_point(destructor:mapV2.ResNoticeViewTypeInfo)
  SharedDtor();
}

void ResNoticeViewTypeInfo::SharedDtor() {
}

void ResNoticeViewTypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResNoticeViewTypeInfo& ResNoticeViewTypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResNoticeViewTypeInfo_map_2eproto.base);
  return *internal_default_instance();
}


void ResNoticeViewTypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResNoticeViewTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updatelist_.Clear();
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResNoticeViewTypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mapV2.NoticeBean updateList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_updatelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResNoticeViewTypeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResNoticeViewTypeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapV2.NoticeBean updateList = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_updatelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResNoticeViewTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResNoticeViewTypeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResNoticeViewTypeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResNoticeViewTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // repeated .mapV2.NoticeBean updateList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updatelist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->updatelist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResNoticeViewTypeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResNoticeViewTypeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResNoticeViewTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // repeated .mapV2.NoticeBean updateList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updatelist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->updatelist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResNoticeViewTypeInfo)
  return target;
}

size_t ResNoticeViewTypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResNoticeViewTypeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 lid = 1;
  if (has_lid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mapV2.NoticeBean updateList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->updatelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->updatelist(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResNoticeViewTypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResNoticeViewTypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResNoticeViewTypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResNoticeViewTypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResNoticeViewTypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResNoticeViewTypeInfo)
    MergeFrom(*source);
  }
}

void ResNoticeViewTypeInfo::MergeFrom(const ResNoticeViewTypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResNoticeViewTypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updatelist_.MergeFrom(from.updatelist_);
  if (from.has_lid()) {
    set_lid(from.lid());
  }
}

void ResNoticeViewTypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResNoticeViewTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNoticeViewTypeInfo::CopyFrom(const ResNoticeViewTypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResNoticeViewTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNoticeViewTypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResNoticeViewTypeInfo::Swap(ResNoticeViewTypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResNoticeViewTypeInfo::InternalSwap(ResNoticeViewTypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&updatelist_)->InternalSwap(CastToBase(&other->updatelist_));
  swap(lid_, other->lid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResNoticeViewTypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResAllPerformerTotalHp::InitAsDefaultInstance() {
}
class ResAllPerformerTotalHp::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResAllPerformerTotalHp>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResAllPerformerTotalHp::kMapBossListFieldNumber;
const int ResAllPerformerTotalHp::kPlayerIdFieldNumber;
const int ResAllPerformerTotalHp::kPercentFieldNumber;
const int ResAllPerformerTotalHp::kPercentIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResAllPerformerTotalHp::ResAllPerformerTotalHp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResAllPerformerTotalHp)
}
ResAllPerformerTotalHp::ResAllPerformerTotalHp(const ResAllPerformerTotalHp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mapbosslist_(from.mapbosslist_),
      playerid_(from.playerid_),
      percent_(from.percent_),
      percentip_(from.percentip_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mapV2.ResAllPerformerTotalHp)
}

void ResAllPerformerTotalHp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResAllPerformerTotalHp_map_2eproto.base);
}

ResAllPerformerTotalHp::~ResAllPerformerTotalHp() {
  // @@protoc_insertion_point(destructor:mapV2.ResAllPerformerTotalHp)
  SharedDtor();
}

void ResAllPerformerTotalHp::SharedDtor() {
}

void ResAllPerformerTotalHp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResAllPerformerTotalHp& ResAllPerformerTotalHp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResAllPerformerTotalHp_map_2eproto.base);
  return *internal_default_instance();
}


void ResAllPerformerTotalHp::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResAllPerformerTotalHp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapbosslist_.Clear();
  playerid_.Clear();
  percent_.Clear();
  percentip_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResAllPerformerTotalHp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mapV2.MapBoss mapBossList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mapbosslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated int64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_playerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_playerid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_percent(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes percentIp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_percentip(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResAllPerformerTotalHp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResAllPerformerTotalHp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mapV2.MapBoss mapBossList = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mapbosslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 playerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_playerid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes percent = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes percentIp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_percentip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResAllPerformerTotalHp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResAllPerformerTotalHp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResAllPerformerTotalHp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResAllPerformerTotalHp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.MapBoss mapBossList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mapbosslist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mapbosslist(static_cast<int>(i)),
      output);
  }

  // repeated int64 playerId = 2;
  for (int i = 0, n = this->playerid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->playerid(i), output);
  }

  // repeated bytes percent = 3;
  for (int i = 0, n = this->percent_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->percent(i), output);
  }

  // repeated bytes percentIp = 4;
  for (int i = 0, n = this->percentip_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->percentip(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResAllPerformerTotalHp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResAllPerformerTotalHp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResAllPerformerTotalHp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.MapBoss mapBossList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mapbosslist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mapbosslist(static_cast<int>(i)), target);
  }

  // repeated int64 playerId = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt64ToArray(2, this->playerid_, target);

  // repeated bytes percent = 3;
  for (int i = 0, n = this->percent_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->percent(i), target);
  }

  // repeated bytes percentIp = 4;
  for (int i = 0, n = this->percentip_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->percentip(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResAllPerformerTotalHp)
  return target;
}

size_t ResAllPerformerTotalHp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResAllPerformerTotalHp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mapV2.MapBoss mapBossList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mapbosslist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mapbosslist(static_cast<int>(i)));
    }
  }

  // repeated int64 playerId = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->playerid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->playerid_size());
    total_size += data_size;
  }

  // repeated bytes percent = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->percent_size());
  for (int i = 0, n = this->percent_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->percent(i));
  }

  // repeated bytes percentIp = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->percentip_size());
  for (int i = 0, n = this->percentip_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->percentip(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResAllPerformerTotalHp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResAllPerformerTotalHp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResAllPerformerTotalHp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResAllPerformerTotalHp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResAllPerformerTotalHp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResAllPerformerTotalHp)
    MergeFrom(*source);
  }
}

void ResAllPerformerTotalHp::MergeFrom(const ResAllPerformerTotalHp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResAllPerformerTotalHp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapbosslist_.MergeFrom(from.mapbosslist_);
  playerid_.MergeFrom(from.playerid_);
  percent_.MergeFrom(from.percent_);
  percentip_.MergeFrom(from.percentip_);
}

void ResAllPerformerTotalHp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResAllPerformerTotalHp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAllPerformerTotalHp::CopyFrom(const ResAllPerformerTotalHp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResAllPerformerTotalHp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAllPerformerTotalHp::IsInitialized() const {
  return true;
}

void ResAllPerformerTotalHp::Swap(ResAllPerformerTotalHp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResAllPerformerTotalHp::InternalSwap(ResAllPerformerTotalHp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&mapbosslist_)->InternalSwap(CastToBase(&other->mapbosslist_));
  playerid_.InternalSwap(&other->playerid_);
  percent_.InternalSwap(CastToBase(&other->percent_));
  percentip_.InternalSwap(CastToBase(&other->percentip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResAllPerformerTotalHp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPressureValue::InitAsDefaultInstance() {
}
class ResPressureValue::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPressureValue>()._has_bits_);
  static void set_has_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPressureValue::kPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPressureValue::ResPressureValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPressureValue)
}
ResPressureValue::ResPressureValue(const ResPressureValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pressure_ = from.pressure_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPressureValue)
}

void ResPressureValue::SharedCtor() {
  pressure_ = 0;
}

ResPressureValue::~ResPressureValue() {
  // @@protoc_insertion_point(destructor:mapV2.ResPressureValue)
  SharedDtor();
}

void ResPressureValue::SharedDtor() {
}

void ResPressureValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPressureValue& ResPressureValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPressureValue_map_2eproto.base);
  return *internal_default_instance();
}


void ResPressureValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPressureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pressure_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPressureValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 pressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_pressure(&has_bits);
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPressureValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPressureValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pressure = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pressure(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPressureValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPressureValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPressureValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPressureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pressure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPressureValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPressureValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPressureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pressure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->pressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPressureValue)
  return target;
}

size_t ResPressureValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPressureValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 pressure = 1;
  if (has_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pressure());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPressureValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPressureValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPressureValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPressureValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPressureValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPressureValue)
    MergeFrom(*source);
  }
}

void ResPressureValue::MergeFrom(const ResPressureValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPressureValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pressure()) {
    set_pressure(from.pressure());
  }
}

void ResPressureValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPressureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPressureValue::CopyFrom(const ResPressureValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPressureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPressureValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResPressureValue::Swap(ResPressureValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPressureValue::InternalSwap(ResPressureValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pressure_, other->pressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPressureValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BossOwnerRequest::InitAsDefaultInstance() {
}
class BossOwnerRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<BossOwnerRequest>()._has_bits_);
  static void set_has_bossid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BossOwnerRequest::kBossIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BossOwnerRequest::BossOwnerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.BossOwnerRequest)
}
BossOwnerRequest::BossOwnerRequest(const BossOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bossid_ = from.bossid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.BossOwnerRequest)
}

void BossOwnerRequest::SharedCtor() {
  bossid_ = PROTOBUF_LONGLONG(0);
}

BossOwnerRequest::~BossOwnerRequest() {
  // @@protoc_insertion_point(destructor:mapV2.BossOwnerRequest)
  SharedDtor();
}

void BossOwnerRequest::SharedDtor() {
}

void BossOwnerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BossOwnerRequest& BossOwnerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BossOwnerRequest_map_2eproto.base);
  return *internal_default_instance();
}


void BossOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.BossOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bossid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BossOwnerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 bossId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bossid(&has_bits);
          bossid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BossOwnerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.BossOwnerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bossId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bossid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.BossOwnerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.BossOwnerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BossOwnerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.BossOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.BossOwnerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BossOwnerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.BossOwnerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.BossOwnerRequest)
  return target;
}

size_t BossOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.BossOwnerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 bossId = 1;
  if (has_bossid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bossid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BossOwnerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.BossOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BossOwnerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BossOwnerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.BossOwnerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.BossOwnerRequest)
    MergeFrom(*source);
  }
}

void BossOwnerRequest::MergeFrom(const BossOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.BossOwnerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bossid()) {
    set_bossid(from.bossid());
  }
}

void BossOwnerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.BossOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossOwnerRequest::CopyFrom(const BossOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.BossOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossOwnerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BossOwnerRequest::Swap(BossOwnerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BossOwnerRequest::InternalSwap(BossOwnerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bossid_, other->bossid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BossOwnerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BossReliveTime::InitAsDefaultInstance() {
}
class BossReliveTime::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<BossReliveTime>()._has_bits_);
  static void set_has_bossid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BossReliveTime::kBossIdFieldNumber;
const int BossReliveTime::kReliveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BossReliveTime::BossReliveTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.BossReliveTime)
}
BossReliveTime::BossReliveTime(const BossReliveTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bossid_, &from.bossid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relivetime_) -
    reinterpret_cast<char*>(&bossid_)) + sizeof(relivetime_));
  // @@protoc_insertion_point(copy_constructor:mapV2.BossReliveTime)
}

void BossReliveTime::SharedCtor() {
  ::memset(&bossid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relivetime_) -
      reinterpret_cast<char*>(&bossid_)) + sizeof(relivetime_));
}

BossReliveTime::~BossReliveTime() {
  // @@protoc_insertion_point(destructor:mapV2.BossReliveTime)
  SharedDtor();
}

void BossReliveTime::SharedDtor() {
}

void BossReliveTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BossReliveTime& BossReliveTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BossReliveTime_map_2eproto.base);
  return *internal_default_instance();
}


void BossReliveTime::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.BossReliveTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&bossid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relivetime_) -
        reinterpret_cast<char*>(&bossid_)) + sizeof(relivetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BossReliveTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 bossId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bossid(&has_bits);
          bossid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 reliveTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_relivetime(&has_bits);
          relivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BossReliveTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.BossReliveTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bossId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bossid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 reliveTime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_relivetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.BossReliveTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.BossReliveTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BossReliveTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.BossReliveTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  // required int32 reliveTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->relivetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.BossReliveTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* BossReliveTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.BossReliveTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 bossId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  // required int32 reliveTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->relivetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.BossReliveTime)
  return target;
}

size_t BossReliveTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.BossReliveTime)
  size_t total_size = 0;

  if (has_bossid()) {
    // required int64 bossId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bossid());
  }

  if (has_relivetime()) {
    // required int32 reliveTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->relivetime());
  }

  return total_size;
}
size_t BossReliveTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.BossReliveTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 bossId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bossid());

    // required int32 reliveTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->relivetime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BossReliveTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.BossReliveTime)
  GOOGLE_DCHECK_NE(&from, this);
  const BossReliveTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BossReliveTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.BossReliveTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.BossReliveTime)
    MergeFrom(*source);
  }
}

void BossReliveTime::MergeFrom(const BossReliveTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.BossReliveTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bossid_ = from.bossid_;
    }
    if (cached_has_bits & 0x00000002u) {
      relivetime_ = from.relivetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BossReliveTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.BossReliveTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossReliveTime::CopyFrom(const BossReliveTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.BossReliveTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossReliveTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BossReliveTime::Swap(BossReliveTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BossReliveTime::InternalSwap(BossReliveTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bossid_, other->bossid_);
  swap(relivetime_, other->relivetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BossReliveTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerSzSuitChange::InitAsDefaultInstance() {
}
class ResPlayerSzSuitChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerSzSuitChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerSzSuitChange::kLidFieldNumber;
const int ResPlayerSzSuitChange::kSuitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerSzSuitChange::ResPlayerSzSuitChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerSzSuitChange)
}
ResPlayerSzSuitChange::ResPlayerSzSuitChange(const ResPlayerSzSuitChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&suit_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(suit_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerSzSuitChange)
}

void ResPlayerSzSuitChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suit_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(suit_));
}

ResPlayerSzSuitChange::~ResPlayerSzSuitChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerSzSuitChange)
  SharedDtor();
}

void ResPlayerSzSuitChange::SharedDtor() {
}

void ResPlayerSzSuitChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerSzSuitChange& ResPlayerSzSuitChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerSzSuitChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerSzSuitChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerSzSuitChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suit_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(suit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerSzSuitChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 suit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_suit(&has_bits);
          suit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerSzSuitChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerSzSuitChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 suit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_suit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerSzSuitChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerSzSuitChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerSzSuitChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerSzSuitChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int32 suit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->suit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerSzSuitChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerSzSuitChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerSzSuitChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int32 suit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->suit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerSzSuitChange)
  return target;
}

size_t ResPlayerSzSuitChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerSzSuitChange)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_suit()) {
    // required int32 suit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->suit());
  }

  return total_size;
}
size_t ResPlayerSzSuitChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerSzSuitChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 suit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->suit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerSzSuitChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerSzSuitChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerSzSuitChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerSzSuitChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerSzSuitChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerSzSuitChange)
    MergeFrom(*source);
  }
}

void ResPlayerSzSuitChange::MergeFrom(const ResPlayerSzSuitChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerSzSuitChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      suit_ = from.suit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerSzSuitChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerSzSuitChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerSzSuitChange::CopyFrom(const ResPlayerSzSuitChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerSzSuitChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerSzSuitChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResPlayerSzSuitChange::Swap(ResPlayerSzSuitChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerSzSuitChange::InternalSwap(ResPlayerSzSuitChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(suit_, other->suit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerSzSuitChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerLegendChange::InitAsDefaultInstance() {
}
class ResPlayerLegendChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerLegendChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legendlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerLegendChange::kLidFieldNumber;
const int ResPlayerLegendChange::kTypeFieldNumber;
const int ResPlayerLegendChange::kLegendLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerLegendChange::ResPlayerLegendChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResPlayerLegendChange)
}
ResPlayerLegendChange::ResPlayerLegendChange(const ResPlayerLegendChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&legendlevel_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(legendlevel_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResPlayerLegendChange)
}

void ResPlayerLegendChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legendlevel_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(legendlevel_));
}

ResPlayerLegendChange::~ResPlayerLegendChange() {
  // @@protoc_insertion_point(destructor:mapV2.ResPlayerLegendChange)
  SharedDtor();
}

void ResPlayerLegendChange::SharedDtor() {
}

void ResPlayerLegendChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerLegendChange& ResPlayerLegendChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerLegendChange_map_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerLegendChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResPlayerLegendChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legendlevel_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(legendlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerLegendChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 legendLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_legendlevel(&has_bits);
          legendlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerLegendChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResPlayerLegendChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 legendLevel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_legendlevel(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &legendlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResPlayerLegendChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResPlayerLegendChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerLegendChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResPlayerLegendChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 legendLevel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->legendlevel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResPlayerLegendChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerLegendChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResPlayerLegendChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 legendLevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->legendlevel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResPlayerLegendChange)
  return target;
}

size_t ResPlayerLegendChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.ResPlayerLegendChange)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_legendlevel()) {
    // required int32 legendLevel = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->legendlevel());
  }

  return total_size;
}
size_t ResPlayerLegendChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResPlayerLegendChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 legendLevel = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->legendlevel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerLegendChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResPlayerLegendChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerLegendChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerLegendChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResPlayerLegendChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResPlayerLegendChange)
    MergeFrom(*source);
  }
}

void ResPlayerLegendChange::MergeFrom(const ResPlayerLegendChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResPlayerLegendChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      legendlevel_ = from.legendlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResPlayerLegendChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResPlayerLegendChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerLegendChange::CopyFrom(const ResPlayerLegendChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResPlayerLegendChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerLegendChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResPlayerLegendChange::Swap(ResPlayerLegendChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerLegendChange::InternalSwap(ResPlayerLegendChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(type_, other->type_);
  swap(legendlevel_, other->legendlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerLegendChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCartMove::InitAsDefaultInstance() {
}
class ResCartMove::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResCartMove>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResCartMove::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResCartMove::ResCartMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResCartMove)
}
ResCartMove::ResCartMove(const ResCartMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ResCartMove)
}

void ResCartMove::SharedCtor() {
  state_ = 0;
}

ResCartMove::~ResCartMove() {
  // @@protoc_insertion_point(destructor:mapV2.ResCartMove)
  SharedDtor();
}

void ResCartMove::SharedDtor() {
}

void ResCartMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCartMove& ResCartMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCartMove_map_2eproto.base);
  return *internal_default_instance();
}


void ResCartMove::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResCartMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCartMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCartMove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResCartMove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResCartMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResCartMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCartMove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResCartMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResCartMove)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCartMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResCartMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResCartMove)
  return target;
}

size_t ResCartMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResCartMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->state());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCartMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResCartMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCartMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCartMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResCartMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResCartMove)
    MergeFrom(*source);
  }
}

void ResCartMove::MergeFrom(const ResCartMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResCartMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void ResCartMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResCartMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCartMove::CopyFrom(const ResCartMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResCartMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCartMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResCartMove::Swap(ResCartMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResCartMove::InternalSwap(ResCartMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCartMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResTombInfo::InitAsDefaultInstance() {
}
class ResTombInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResTombInfo>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResTombInfo::kTombInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResTombInfo::ResTombInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResTombInfo)
}
ResTombInfo::ResTombInfo(const ResTombInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tombinfos_(from.tombinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mapV2.ResTombInfo)
}

void ResTombInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResTombInfo_map_2eproto.base);
}

ResTombInfo::~ResTombInfo() {
  // @@protoc_insertion_point(destructor:mapV2.ResTombInfo)
  SharedDtor();
}

void ResTombInfo::SharedDtor() {
}

void ResTombInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResTombInfo& ResTombInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResTombInfo_map_2eproto.base);
  return *internal_default_instance();
}


void ResTombInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResTombInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tombinfos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResTombInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mapV2.MonsterTomb tombInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tombinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResTombInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResTombInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mapV2.MonsterTomb tombInfos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tombinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResTombInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResTombInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResTombInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResTombInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.MonsterTomb tombInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tombinfos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tombinfos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResTombInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResTombInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResTombInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mapV2.MonsterTomb tombInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tombinfos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tombinfos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResTombInfo)
  return target;
}

size_t ResTombInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResTombInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mapV2.MonsterTomb tombInfos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tombinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tombinfos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResTombInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResTombInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResTombInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResTombInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResTombInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResTombInfo)
    MergeFrom(*source);
  }
}

void ResTombInfo::MergeFrom(const ResTombInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResTombInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tombinfos_.MergeFrom(from.tombinfos_);
}

void ResTombInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResTombInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResTombInfo::CopyFrom(const ResTombInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResTombInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResTombInfo::IsInitialized() const {
  return true;
}

void ResTombInfo::Swap(ResTombInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResTombInfo::InternalSwap(ResTombInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tombinfos_)->InternalSwap(CastToBase(&other->tombinfos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResTombInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatherOperatorRequest::InitAsDefaultInstance() {
}
class GatherOperatorRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<GatherOperatorRequest>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GatherOperatorRequest::kTypeFieldNumber;
const int GatherOperatorRequest::kLidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GatherOperatorRequest::GatherOperatorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.GatherOperatorRequest)
}
GatherOperatorRequest::GatherOperatorRequest(const GatherOperatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mapV2.GatherOperatorRequest)
}

void GatherOperatorRequest::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(type_));
}

GatherOperatorRequest::~GatherOperatorRequest() {
  // @@protoc_insertion_point(destructor:mapV2.GatherOperatorRequest)
  SharedDtor();
}

void GatherOperatorRequest::SharedDtor() {
}

void GatherOperatorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatherOperatorRequest& GatherOperatorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatherOperatorRequest_map_2eproto.base);
  return *internal_default_instance();
}


void GatherOperatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.GatherOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GatherOperatorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 lid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GatherOperatorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.GatherOperatorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.GatherOperatorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.GatherOperatorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GatherOperatorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.GatherOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 lid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->lid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.GatherOperatorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GatherOperatorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.GatherOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 lid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->lid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.GatherOperatorRequest)
  return target;
}

size_t GatherOperatorRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mapV2.GatherOperatorRequest)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t GatherOperatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.GatherOperatorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatherOperatorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.GatherOperatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GatherOperatorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatherOperatorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.GatherOperatorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.GatherOperatorRequest)
    MergeFrom(*source);
  }
}

void GatherOperatorRequest::MergeFrom(const GatherOperatorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.GatherOperatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GatherOperatorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.GatherOperatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherOperatorRequest::CopyFrom(const GatherOperatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.GatherOperatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherOperatorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GatherOperatorRequest::Swap(GatherOperatorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GatherOperatorRequest::InternalSwap(GatherOperatorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatherOperatorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResGatherState::InitAsDefaultInstance() {
}
class ResGatherState::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResGatherState>()._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ismonster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deadtime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ownerid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResGatherState::kRoleIdFieldNumber;
const int ResGatherState::kTypeFieldNumber;
const int ResGatherState::kTimeFieldNumber;
const int ResGatherState::kStateFieldNumber;
const int ResGatherState::kIsMonsterFieldNumber;
const int ResGatherState::kXFieldNumber;
const int ResGatherState::kYFieldNumber;
const int ResGatherState::kZFieldNumber;
const int ResGatherState::kDeadTimeFieldNumber;
const int ResGatherState::kOwnerIdFieldNumber;
const int ResGatherState::kLidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResGatherState::ResGatherState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResGatherState)
}
ResGatherState::ResGatherState(const ResGatherState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResGatherState)
}

void ResGatherState::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(z_));
}

ResGatherState::~ResGatherState() {
  // @@protoc_insertion_point(destructor:mapV2.ResGatherState)
  SharedDtor();
}

void ResGatherState::SharedDtor() {
}

void ResGatherState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResGatherState& ResGatherState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResGatherState_map_2eproto.base);
  return *internal_default_instance();
}


void ResGatherState::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResGatherState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadtime_) -
        reinterpret_cast<char*>(&roleid_)) + sizeof(deadtime_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&ownerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&ownerid_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResGatherState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_roleid(&has_bits);
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isMonster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_ismonster(&has_bits);
          ismonster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 deadTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_deadtime(&has_bits);
          deadtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ownerId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_ownerid(&has_bits);
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResGatherState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResGatherState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_roleid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isMonster = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ismonster(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismonster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadTime = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_deadtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ownerId = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_ownerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lid = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResGatherState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResGatherState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResGatherState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResGatherState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 roleId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional bool isMonster = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->ismonster(), output);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  // optional float z = 8;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->z(), output);
  }

  // optional int64 deadTime = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->deadtime(), output);
  }

  // optional int64 ownerId = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->ownerid(), output);
  }

  // optional int64 lid = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->lid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResGatherState)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResGatherState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResGatherState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 roleId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional bool isMonster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->ismonster(), target);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  // optional float z = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->z(), target);
  }

  // optional int64 deadTime = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->deadtime(), target);
  }

  // optional int64 ownerId = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->ownerid(), target);
  }

  // optional int64 lid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->lid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResGatherState)
  return target;
}

size_t ResGatherState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResGatherState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 roleId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // optional int32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional bool isMonster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int64 deadTime = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 ownerId = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ownerid());
    }

    // optional int64 lid = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lid());
    }

    // optional float z = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResGatherState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResGatherState)
  GOOGLE_DCHECK_NE(&from, this);
  const ResGatherState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResGatherState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResGatherState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResGatherState)
    MergeFrom(*source);
  }
}

void ResGatherState::MergeFrom(const ResGatherState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResGatherState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      roleid_ = from.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      ismonster_ = from.ismonster_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      deadtime_ = from.deadtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000200u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000400u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResGatherState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResGatherState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGatherState::CopyFrom(const ResGatherState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResGatherState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGatherState::IsInitialized() const {
  return true;
}

void ResGatherState::Swap(ResGatherState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResGatherState::InternalSwap(ResGatherState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roleid_, other->roleid_);
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(state_, other->state_);
  swap(ismonster_, other->ismonster_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(deadtime_, other->deadtime_);
  swap(ownerid_, other->ownerid_);
  swap(lid_, other->lid_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResGatherState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqClickEvent::InitAsDefaultInstance() {
}
class ReqClickEvent::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ReqClickEvent>()._has_bits_);
  static void set_has_groundeventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqClickEvent::kGroundEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqClickEvent::ReqClickEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ReqClickEvent)
}
ReqClickEvent::ReqClickEvent(const ReqClickEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groundeventid_ = from.groundeventid_;
  // @@protoc_insertion_point(copy_constructor:mapV2.ReqClickEvent)
}

void ReqClickEvent::SharedCtor() {
  groundeventid_ = PROTOBUF_LONGLONG(0);
}

ReqClickEvent::~ReqClickEvent() {
  // @@protoc_insertion_point(destructor:mapV2.ReqClickEvent)
  SharedDtor();
}

void ReqClickEvent::SharedDtor() {
}

void ReqClickEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqClickEvent& ReqClickEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqClickEvent_map_2eproto.base);
  return *internal_default_instance();
}


void ReqClickEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ReqClickEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groundeventid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqClickEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 groundEventId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_groundeventid(&has_bits);
          groundeventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqClickEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ReqClickEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 groundEventId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_groundeventid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &groundeventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ReqClickEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ReqClickEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqClickEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ReqClickEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 groundEventId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->groundeventid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ReqClickEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqClickEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ReqClickEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 groundEventId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->groundeventid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ReqClickEvent)
  return target;
}

size_t ReqClickEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ReqClickEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 groundEventId = 1;
  if (has_groundeventid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->groundeventid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqClickEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ReqClickEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqClickEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqClickEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ReqClickEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ReqClickEvent)
    MergeFrom(*source);
  }
}

void ReqClickEvent::MergeFrom(const ReqClickEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ReqClickEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_groundeventid()) {
    set_groundeventid(from.groundeventid());
  }
}

void ReqClickEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ReqClickEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClickEvent::CopyFrom(const ReqClickEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ReqClickEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClickEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqClickEvent::Swap(ReqClickEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqClickEvent::InternalSwap(ReqClickEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(groundeventid_, other->groundeventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqClickEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResObjectDeadTime::InitAsDefaultInstance() {
}
class ResObjectDeadTime::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResObjectDeadTime>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deadtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResObjectDeadTime::kIdFieldNumber;
const int ResObjectDeadTime::kKillidFieldNumber;
const int ResObjectDeadTime::kKillNameFieldNumber;
const int ResObjectDeadTime::kDeadTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResObjectDeadTime::ResObjectDeadTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapV2.ResObjectDeadTime)
}
ResObjectDeadTime::ResObjectDeadTime(const ResObjectDeadTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  killname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_killname()) {
    killname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.killname_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deadtime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(deadtime_));
  // @@protoc_insertion_point(copy_constructor:mapV2.ResObjectDeadTime)
}

void ResObjectDeadTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResObjectDeadTime_map_2eproto.base);
  killname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadtime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(deadtime_));
}

ResObjectDeadTime::~ResObjectDeadTime() {
  // @@protoc_insertion_point(destructor:mapV2.ResObjectDeadTime)
  SharedDtor();
}

void ResObjectDeadTime::SharedDtor() {
  killname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResObjectDeadTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResObjectDeadTime& ResObjectDeadTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResObjectDeadTime_map_2eproto.base);
  return *internal_default_instance();
}


void ResObjectDeadTime::Clear() {
// @@protoc_insertion_point(message_clear_start:mapV2.ResObjectDeadTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    killname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deadtime_) -
        reinterpret_cast<char*>(&id_)) + sizeof(deadtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResObjectDeadTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 killid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_killid(&has_bits);
          killid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string killName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_killname(), ptr, ctx, "mapV2.ResObjectDeadTime.killName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deadTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_deadtime(&has_bits);
          deadtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResObjectDeadTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapV2.ResObjectDeadTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 killid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_killid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &killid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string killName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_killname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->killname().data(), static_cast<int>(this->killname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mapV2.ResObjectDeadTime.killName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deadTime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_deadtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapV2.ResObjectDeadTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapV2.ResObjectDeadTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResObjectDeadTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapV2.ResObjectDeadTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 killid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->killid(), output);
  }

  // optional string killName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killname().data(), static_cast<int>(this->killname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResObjectDeadTime.killName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->killname(), output);
  }

  // optional int64 deadTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->deadtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mapV2.ResObjectDeadTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResObjectDeadTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mapV2.ResObjectDeadTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 killid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->killid(), target);
  }

  // optional string killName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->killname().data(), static_cast<int>(this->killname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mapV2.ResObjectDeadTime.killName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->killname(), target);
  }

  // optional int64 deadTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->deadtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapV2.ResObjectDeadTime)
  return target;
}

size_t ResObjectDeadTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapV2.ResObjectDeadTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string killName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->killname());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 killid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->killid());
    }

    // optional int64 deadTime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResObjectDeadTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapV2.ResObjectDeadTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ResObjectDeadTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResObjectDeadTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapV2.ResObjectDeadTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapV2.ResObjectDeadTime)
    MergeFrom(*source);
  }
}

void ResObjectDeadTime::MergeFrom(const ResObjectDeadTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapV2.ResObjectDeadTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      killname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.killname_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      killid_ = from.killid_;
    }
    if (cached_has_bits & 0x00000008u) {
      deadtime_ = from.deadtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResObjectDeadTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapV2.ResObjectDeadTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResObjectDeadTime::CopyFrom(const ResObjectDeadTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapV2.ResObjectDeadTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResObjectDeadTime::IsInitialized() const {
  return true;
}

void ResObjectDeadTime::Swap(ResObjectDeadTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResObjectDeadTime::InternalSwap(ResObjectDeadTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  killname_.Swap(&other->killname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(killid_, other->killid_);
  swap(deadtime_, other->deadtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResObjectDeadTime::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mapV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mapV2::PerformerEquipBean* Arena::CreateMaybeMessage< ::mapV2::PerformerEquipBean >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::PerformerEquipBean >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::PerformerFashionBean* Arena::CreateMaybeMessage< ::mapV2::PerformerFashionBean >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::PerformerFashionBean >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundItemInfo* Arena::CreateMaybeMessage< ::mapV2::RoundItemInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::NoticeBean* Arena::CreateMaybeMessage< ::mapV2::NoticeBean >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::NoticeBean >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundEventInfo* Arena::CreateMaybeMessage< ::mapV2::RoundEventInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundBufferInfo* Arena::CreateMaybeMessage< ::mapV2::RoundBufferInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundBufferInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundPlayerInfo* Arena::CreateMaybeMessage< ::mapV2::RoundPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundMonsterInfo* Arena::CreateMaybeMessage< ::mapV2::RoundMonsterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundMonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundNpcInfo* Arena::CreateMaybeMessage< ::mapV2::RoundNpcInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundNpcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundPetInfo* Arena::CreateMaybeMessage< ::mapV2::RoundPetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundPetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundHeroInfo* Arena::CreateMaybeMessage< ::mapV2::RoundHeroInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundHeroInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundServantInfo* Arena::CreateMaybeMessage< ::mapV2::RoundServantInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundServantInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::RoundCollectPoint* Arena::CreateMaybeMessage< ::mapV2::RoundCollectPoint >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::RoundCollectPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::MapBoss* Arena::CreateMaybeMessage< ::mapV2::MapBoss >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::MapBoss >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::MonsterTomb* Arena::CreateMaybeMessage< ::mapV2::MonsterTomb >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::MonsterTomb >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResUpdateView* Arena::CreateMaybeMessage< ::mapV2::ResUpdateView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResUpdateView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerEnterView* Arena::CreateMaybeMessage< ::mapV2::ResPlayerEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResCollectEnterView* Arena::CreateMaybeMessage< ::mapV2::ResCollectEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResCollectEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResBufferEnterView* Arena::CreateMaybeMessage< ::mapV2::ResBufferEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResBufferEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResMonsterEnterView* Arena::CreateMaybeMessage< ::mapV2::ResMonsterEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResMonsterEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResNpcEnterView* Arena::CreateMaybeMessage< ::mapV2::ResNpcEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResNpcEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPetEnterView* Arena::CreateMaybeMessage< ::mapV2::ResPetEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPetEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResHeroEnterView* Arena::CreateMaybeMessage< ::mapV2::ResHeroEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResHeroEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResServantEnterView* Arena::CreateMaybeMessage< ::mapV2::ResServantEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResServantEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResMapObjectExitView* Arena::CreateMaybeMessage< ::mapV2::ResMapObjectExitView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResMapObjectExitView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerEnterMap* Arena::CreateMaybeMessage< ::mapV2::ResPlayerEnterMap >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerEnterMap >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerChangeMap* Arena::CreateMaybeMessage< ::mapV2::ResPlayerChangeMap >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerChangeMap >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResChangePos* Arena::CreateMaybeMessage< ::mapV2::ResChangePos >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResChangePos >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResObjectMove* Arena::CreateMaybeMessage< ::mapV2::ResObjectMove >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResObjectMove >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResEventEnterView* Arena::CreateMaybeMessage< ::mapV2::ResEventEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResEventEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResRelive* Arena::CreateMaybeMessage< ::mapV2::ResRelive >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResRelive >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResItemEnterView* Arena::CreateMaybeMessage< ::mapV2::ResItemEnterView >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResItemEnterView >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResUpdateEquip* Arena::CreateMaybeMessage< ::mapV2::ResUpdateEquip >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResUpdateEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::TryEnterMapRequest* Arena::CreateMaybeMessage< ::mapV2::TryEnterMapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::TryEnterMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResTryEnterMap* Arena::CreateMaybeMessage< ::mapV2::ResTryEnterMap >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResTryEnterMap >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResChangePlayer* Arena::CreateMaybeMessage< ::mapV2::ResChangePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResChangePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResReplacePlayer* Arena::CreateMaybeMessage< ::mapV2::ResReplacePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResReplacePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResBossOwner* Arena::CreateMaybeMessage< ::mapV2::ResBossOwner >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResBossOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerWingChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerWingChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerWingChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerUnionChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerUnionChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerUnionChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::PlayerReliveRequest* Arena::CreateMaybeMessage< ::mapV2::PlayerReliveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::PlayerReliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerReliveInfo* Arena::CreateMaybeMessage< ::mapV2::ResPlayerReliveInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerReliveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerFashionChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerFashionChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerFashionChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerJunxianChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerJunxianChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerJunxianChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::SwitchFightModelRequest* Arena::CreateMaybeMessage< ::mapV2::SwitchFightModelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::SwitchFightModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResSwitchFightModel* Arena::CreateMaybeMessage< ::mapV2::ResSwitchFightModel >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResSwitchFightModel >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::PickUpMapItemRequest* Arena::CreateMaybeMessage< ::mapV2::PickUpMapItemRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::PickUpMapItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResNoticeViewTypeInfo* Arena::CreateMaybeMessage< ::mapV2::ResNoticeViewTypeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResNoticeViewTypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResAllPerformerTotalHp* Arena::CreateMaybeMessage< ::mapV2::ResAllPerformerTotalHp >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResAllPerformerTotalHp >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPressureValue* Arena::CreateMaybeMessage< ::mapV2::ResPressureValue >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPressureValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::BossOwnerRequest* Arena::CreateMaybeMessage< ::mapV2::BossOwnerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::BossOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::BossReliveTime* Arena::CreateMaybeMessage< ::mapV2::BossReliveTime >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::BossReliveTime >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerSzSuitChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerSzSuitChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerSzSuitChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResPlayerLegendChange* Arena::CreateMaybeMessage< ::mapV2::ResPlayerLegendChange >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResPlayerLegendChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResCartMove* Arena::CreateMaybeMessage< ::mapV2::ResCartMove >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResCartMove >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResTombInfo* Arena::CreateMaybeMessage< ::mapV2::ResTombInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResTombInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::GatherOperatorRequest* Arena::CreateMaybeMessage< ::mapV2::GatherOperatorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::GatherOperatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResGatherState* Arena::CreateMaybeMessage< ::mapV2::ResGatherState >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResGatherState >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ReqClickEvent* Arena::CreateMaybeMessage< ::mapV2::ReqClickEvent >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ReqClickEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::mapV2::ResObjectDeadTime* Arena::CreateMaybeMessage< ::mapV2::ResObjectDeadTime >(Arena* arena) {
  return Arena::CreateInternal< ::mapV2::ResObjectDeadTime >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
