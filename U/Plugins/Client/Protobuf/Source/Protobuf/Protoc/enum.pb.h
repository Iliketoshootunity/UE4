// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enum_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_enum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum c2s_PROTOCOL : int {
  c2s_ping = 0,
  c2s_login = 1001,
  c2s_PROTOCOL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  c2s_PROTOCOL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
PROTOBUF_API bool c2s_PROTOCOL_IsValid(int value);
constexpr c2s_PROTOCOL c2s_PROTOCOL_MIN = c2s_ping;
constexpr c2s_PROTOCOL c2s_PROTOCOL_MAX = c2s_login;
constexpr int c2s_PROTOCOL_ARRAYSIZE = c2s_PROTOCOL_MAX + 1;

PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* c2s_PROTOCOL_descriptor();
template<typename T>
inline const std::string& c2s_PROTOCOL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, c2s_PROTOCOL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function c2s_PROTOCOL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    c2s_PROTOCOL_descriptor(), enum_t_value);
}
inline bool c2s_PROTOCOL_Parse(
    const std::string& name, c2s_PROTOCOL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<c2s_PROTOCOL>(
    c2s_PROTOCOL_descriptor(), name, value);
}
enum s2c_PROTOCOL : int {
  s2c_ping = 0,
  s2c_login = 1007,
  s2c_PROTOCOL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  s2c_PROTOCOL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
PROTOBUF_API bool s2c_PROTOCOL_IsValid(int value);
constexpr s2c_PROTOCOL s2c_PROTOCOL_MIN = s2c_ping;
constexpr s2c_PROTOCOL s2c_PROTOCOL_MAX = s2c_login;
constexpr int s2c_PROTOCOL_ARRAYSIZE = s2c_PROTOCOL_MAX + 1;

PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* s2c_PROTOCOL_descriptor();
template<typename T>
inline const std::string& s2c_PROTOCOL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, s2c_PROTOCOL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function s2c_PROTOCOL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    s2c_PROTOCOL_descriptor(), enum_t_value);
}
inline bool s2c_PROTOCOL_Parse(
    const std::string& name, s2c_PROTOCOL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<s2c_PROTOCOL>(
    s2c_PROTOCOL_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::c2s_PROTOCOL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c2s_PROTOCOL>() {
  return ::c2s_PROTOCOL_descriptor();
}
template <> struct is_proto_enum< ::s2c_PROTOCOL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::s2c_PROTOCOL>() {
  return ::s2c_PROTOCOL_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enum_2eproto
