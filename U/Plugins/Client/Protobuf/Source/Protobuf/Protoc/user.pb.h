// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace userV2 {
class DisconnectResponse;
class DisconnectResponseDefaultTypeInternal;
PROTOBUF_API extern DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
class ReqCreateRole;
class ReqCreateRoleDefaultTypeInternal;
PROTOBUF_API extern ReqCreateRoleDefaultTypeInternal _ReqCreateRole_default_instance_;
class ReqDeleteRole;
class ReqDeleteRoleDefaultTypeInternal;
PROTOBUF_API extern ReqDeleteRoleDefaultTypeInternal _ReqDeleteRole_default_instance_;
class ReqHeart;
class ReqHeartDefaultTypeInternal;
PROTOBUF_API extern ReqHeartDefaultTypeInternal _ReqHeart_default_instance_;
class ReqLogin;
class ReqLoginDefaultTypeInternal;
PROTOBUF_API extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class ReqRandomName;
class ReqRandomNameDefaultTypeInternal;
PROTOBUF_API extern ReqRandomNameDefaultTypeInternal _ReqRandomName_default_instance_;
class ReqReconnect;
class ReqReconnectDefaultTypeInternal;
PROTOBUF_API extern ReqReconnectDefaultTypeInternal _ReqReconnect_default_instance_;
class ReqRoleId;
class ReqRoleIdDefaultTypeInternal;
PROTOBUF_API extern ReqRoleIdDefaultTypeInternal _ReqRoleId_default_instance_;
class ResCreateRole;
class ResCreateRoleDefaultTypeInternal;
PROTOBUF_API extern ResCreateRoleDefaultTypeInternal _ResCreateRole_default_instance_;
class ResDeleteRole;
class ResDeleteRoleDefaultTypeInternal;
PROTOBUF_API extern ResDeleteRoleDefaultTypeInternal _ResDeleteRole_default_instance_;
class ResDisconnectInfo;
class ResDisconnectInfoDefaultTypeInternal;
PROTOBUF_API extern ResDisconnectInfoDefaultTypeInternal _ResDisconnectInfo_default_instance_;
class ResEnterGame;
class ResEnterGameDefaultTypeInternal;
PROTOBUF_API extern ResEnterGameDefaultTypeInternal _ResEnterGame_default_instance_;
class ResHeart;
class ResHeartDefaultTypeInternal;
PROTOBUF_API extern ResHeartDefaultTypeInternal _ResHeart_default_instance_;
class ResLogin;
class ResLoginDefaultTypeInternal;
PROTOBUF_API extern ResLoginDefaultTypeInternal _ResLogin_default_instance_;
class ResLoginInfo;
class ResLoginInfoDefaultTypeInternal;
PROTOBUF_API extern ResLoginInfoDefaultTypeInternal _ResLoginInfo_default_instance_;
class ResOtherLogin;
class ResOtherLoginDefaultTypeInternal;
PROTOBUF_API extern ResOtherLoginDefaultTypeInternal _ResOtherLogin_default_instance_;
class ResRandomName;
class ResRandomNameDefaultTypeInternal;
PROTOBUF_API extern ResRandomNameDefaultTypeInternal _ResRandomName_default_instance_;
class ResRobotGM;
class ResRobotGMDefaultTypeInternal;
PROTOBUF_API extern ResRobotGMDefaultTypeInternal _ResRobotGM_default_instance_;
class ResRoleName;
class ResRoleNameDefaultTypeInternal;
PROTOBUF_API extern ResRoleNameDefaultTypeInternal _ResRoleName_default_instance_;
class ResUserIdInfo;
class ResUserIdInfoDefaultTypeInternal;
PROTOBUF_API extern ResUserIdInfoDefaultTypeInternal _ResUserIdInfo_default_instance_;
class ResVersionError;
class ResVersionErrorDefaultTypeInternal;
PROTOBUF_API extern ResVersionErrorDefaultTypeInternal _ResVersionError_default_instance_;
}  // namespace userV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_API ::userV2::DisconnectResponse* Arena::CreateMaybeMessage<::userV2::DisconnectResponse>(Arena*);
template<> PROTOBUF_API ::userV2::ReqCreateRole* Arena::CreateMaybeMessage<::userV2::ReqCreateRole>(Arena*);
template<> PROTOBUF_API ::userV2::ReqDeleteRole* Arena::CreateMaybeMessage<::userV2::ReqDeleteRole>(Arena*);
template<> PROTOBUF_API ::userV2::ReqHeart* Arena::CreateMaybeMessage<::userV2::ReqHeart>(Arena*);
template<> PROTOBUF_API ::userV2::ReqLogin* Arena::CreateMaybeMessage<::userV2::ReqLogin>(Arena*);
template<> PROTOBUF_API ::userV2::ReqRandomName* Arena::CreateMaybeMessage<::userV2::ReqRandomName>(Arena*);
template<> PROTOBUF_API ::userV2::ReqReconnect* Arena::CreateMaybeMessage<::userV2::ReqReconnect>(Arena*);
template<> PROTOBUF_API ::userV2::ReqRoleId* Arena::CreateMaybeMessage<::userV2::ReqRoleId>(Arena*);
template<> PROTOBUF_API ::userV2::ResCreateRole* Arena::CreateMaybeMessage<::userV2::ResCreateRole>(Arena*);
template<> PROTOBUF_API ::userV2::ResDeleteRole* Arena::CreateMaybeMessage<::userV2::ResDeleteRole>(Arena*);
template<> PROTOBUF_API ::userV2::ResDisconnectInfo* Arena::CreateMaybeMessage<::userV2::ResDisconnectInfo>(Arena*);
template<> PROTOBUF_API ::userV2::ResEnterGame* Arena::CreateMaybeMessage<::userV2::ResEnterGame>(Arena*);
template<> PROTOBUF_API ::userV2::ResHeart* Arena::CreateMaybeMessage<::userV2::ResHeart>(Arena*);
template<> PROTOBUF_API ::userV2::ResLogin* Arena::CreateMaybeMessage<::userV2::ResLogin>(Arena*);
template<> PROTOBUF_API ::userV2::ResLoginInfo* Arena::CreateMaybeMessage<::userV2::ResLoginInfo>(Arena*);
template<> PROTOBUF_API ::userV2::ResOtherLogin* Arena::CreateMaybeMessage<::userV2::ResOtherLogin>(Arena*);
template<> PROTOBUF_API ::userV2::ResRandomName* Arena::CreateMaybeMessage<::userV2::ResRandomName>(Arena*);
template<> PROTOBUF_API ::userV2::ResRobotGM* Arena::CreateMaybeMessage<::userV2::ResRobotGM>(Arena*);
template<> PROTOBUF_API ::userV2::ResRoleName* Arena::CreateMaybeMessage<::userV2::ResRoleName>(Arena*);
template<> PROTOBUF_API ::userV2::ResUserIdInfo* Arena::CreateMaybeMessage<::userV2::ResUserIdInfo>(Arena*);
template<> PROTOBUF_API ::userV2::ResVersionError* Arena::CreateMaybeMessage<::userV2::ResVersionError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userV2 {

// ===================================================================

class PROTOBUF_API ReqLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqLogin) */ {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);
  ReqLogin(ReqLogin&& from) noexcept
    : ReqLogin() {
    *this = ::std::move(from);
  }

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
               &_ReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqLogin* other);
  friend void swap(ReqLogin& a, ReqLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const final {
    return CreateMaybeMessage<ReqLogin>(nullptr);
  }

  ReqLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string loginName = 1;
  bool has_loginname() const;
  void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);

  // optional string IDNumber = 5;
  bool has_idnumber() const;
  void clear_idnumber();
  static const int kIDNumberFieldNumber = 5;
  const std::string& idnumber() const;
  void set_idnumber(const std::string& value);
  void set_idnumber(std::string&& value);
  void set_idnumber(const char* value);
  void set_idnumber(const char* value, size_t size);
  std::string* mutable_idnumber();
  std::string* release_idnumber();
  void set_allocated_idnumber(std::string* idnumber);

  // optional string sign = 11;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 11;
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);

  // optional int32 sid = 2;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 platformId = 3;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid() const;
  void set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 client = 4;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version = 7;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 time = 10;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResLogin) */ {
 public:
  ResLogin();
  virtual ~ResLogin();

  ResLogin(const ResLogin& from);
  ResLogin(ResLogin&& from) noexcept
    : ResLogin() {
    *this = ::std::move(from);
  }

  inline ResLogin& operator=(const ResLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResLogin& operator=(ResLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResLogin* internal_default_instance() {
    return reinterpret_cast<const ResLogin*>(
               &_ResLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResLogin* other);
  friend void swap(ResLogin& a, ResLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResLogin* New() const final {
    return CreateMaybeMessage<ResLogin>(nullptr);
  }

  ResLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResLogin& from);
  void MergeFrom(const ResLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResCreateRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResCreateRole) */ {
 public:
  ResCreateRole();
  virtual ~ResCreateRole();

  ResCreateRole(const ResCreateRole& from);
  ResCreateRole(ResCreateRole&& from) noexcept
    : ResCreateRole() {
    *this = ::std::move(from);
  }

  inline ResCreateRole& operator=(const ResCreateRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCreateRole& operator=(ResCreateRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCreateRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCreateRole* internal_default_instance() {
    return reinterpret_cast<const ResCreateRole*>(
               &_ResCreateRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResCreateRole* other);
  friend void swap(ResCreateRole& a, ResCreateRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResCreateRole* New() const final {
    return CreateMaybeMessage<ResCreateRole>(nullptr);
  }

  ResCreateRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCreateRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCreateRole& from);
  void MergeFrom(const ResCreateRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCreateRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResCreateRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string randomRoleName = 2;
  bool has_randomrolename() const;
  void clear_randomrolename();
  static const int kRandomRoleNameFieldNumber = 2;
  const std::string& randomrolename() const;
  void set_randomrolename(const std::string& value);
  void set_randomrolename(std::string&& value);
  void set_randomrolename(const char* value);
  void set_randomrolename(const char* value, size_t size);
  std::string* mutable_randomrolename();
  std::string* release_randomrolename();
  void set_allocated_randomrolename(std::string* randomrolename);

  // optional int64 uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResCreateRole)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randomrolename_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqCreateRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqCreateRole) */ {
 public:
  ReqCreateRole();
  virtual ~ReqCreateRole();

  ReqCreateRole(const ReqCreateRole& from);
  ReqCreateRole(ReqCreateRole&& from) noexcept
    : ReqCreateRole() {
    *this = ::std::move(from);
  }

  inline ReqCreateRole& operator=(const ReqCreateRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateRole& operator=(ReqCreateRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCreateRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCreateRole* internal_default_instance() {
    return reinterpret_cast<const ReqCreateRole*>(
               &_ReqCreateRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReqCreateRole* other);
  friend void swap(ReqCreateRole& a, ReqCreateRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateRole* New() const final {
    return CreateMaybeMessage<ReqCreateRole>(nullptr);
  }

  ReqCreateRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateRole& from);
  void MergeFrom(const ReqCreateRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqCreateRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roleName = 1;
  bool has_rolename() const;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);

  // optional int32 sex = 2;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 career = 3;
  bool has_career() const;
  void clear_career();
  static const int kCareerFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqCreateRole)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqRandomName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqRandomName) */ {
 public:
  ReqRandomName();
  virtual ~ReqRandomName();

  ReqRandomName(const ReqRandomName& from);
  ReqRandomName(ReqRandomName&& from) noexcept
    : ReqRandomName() {
    *this = ::std::move(from);
  }

  inline ReqRandomName& operator=(const ReqRandomName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRandomName& operator=(ReqRandomName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRandomName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRandomName* internal_default_instance() {
    return reinterpret_cast<const ReqRandomName*>(
               &_ReqRandomName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqRandomName* other);
  friend void swap(ReqRandomName& a, ReqRandomName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRandomName* New() const final {
    return CreateMaybeMessage<ReqRandomName>(nullptr);
  }

  ReqRandomName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRandomName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRandomName& from);
  void MergeFrom(const ReqRandomName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRandomName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqRandomName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sex = 1;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqRandomName)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResRandomName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResRandomName) */ {
 public:
  ResRandomName();
  virtual ~ResRandomName();

  ResRandomName(const ResRandomName& from);
  ResRandomName(ResRandomName&& from) noexcept
    : ResRandomName() {
    *this = ::std::move(from);
  }

  inline ResRandomName& operator=(const ResRandomName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResRandomName& operator=(ResRandomName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResRandomName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResRandomName* internal_default_instance() {
    return reinterpret_cast<const ResRandomName*>(
               &_ResRandomName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResRandomName* other);
  friend void swap(ResRandomName& a, ResRandomName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResRandomName* New() const final {
    return CreateMaybeMessage<ResRandomName>(nullptr);
  }

  ResRandomName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResRandomName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResRandomName& from);
  void MergeFrom(const ResRandomName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResRandomName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResRandomName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roleName = 1;
  bool has_rolename() const;
  void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);

  // @@protoc_insertion_point(class_scope:userV2.ResRandomName)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResRoleName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResRoleName) */ {
 public:
  ResRoleName();
  virtual ~ResRoleName();

  ResRoleName(const ResRoleName& from);
  ResRoleName(ResRoleName&& from) noexcept
    : ResRoleName() {
    *this = ::std::move(from);
  }

  inline ResRoleName& operator=(const ResRoleName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResRoleName& operator=(ResRoleName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResRoleName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResRoleName* internal_default_instance() {
    return reinterpret_cast<const ResRoleName*>(
               &_ResRoleName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResRoleName* other);
  friend void swap(ResRoleName& a, ResRoleName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResRoleName* New() const final {
    return CreateMaybeMessage<ResRoleName>(nullptr);
  }

  ResRoleName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResRoleName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResRoleName& from);
  void MergeFrom(const ResRoleName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResRoleName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResRoleName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:userV2.ResRoleName)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResEnterGame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResEnterGame) */ {
 public:
  ResEnterGame();
  virtual ~ResEnterGame();

  ResEnterGame(const ResEnterGame& from);
  ResEnterGame(ResEnterGame&& from) noexcept
    : ResEnterGame() {
    *this = ::std::move(from);
  }

  inline ResEnterGame& operator=(const ResEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResEnterGame& operator=(ResEnterGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResEnterGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResEnterGame* internal_default_instance() {
    return reinterpret_cast<const ResEnterGame*>(
               &_ResEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResEnterGame* other);
  friend void swap(ResEnterGame& a, ResEnterGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResEnterGame* New() const final {
    return CreateMaybeMessage<ResEnterGame>(nullptr);
  }

  ResEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResEnterGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResEnterGame& from);
  void MergeFrom(const ResEnterGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResEnterGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResEnterGame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uidStr = 2;
  bool has_uidstr() const;
  void clear_uidstr();
  static const int kUidStrFieldNumber = 2;
  const std::string& uidstr() const;
  void set_uidstr(const std::string& value);
  void set_uidstr(std::string&& value);
  void set_uidstr(const char* value);
  void set_uidstr(const char* value, size_t size);
  std::string* mutable_uidstr();
  std::string* release_uidstr();
  void set_allocated_uidstr(std::string* uidstr);

  // optional int64 uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 serverTime = 3;
  bool has_servertime() const;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResEnterGame)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uidstr_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqHeart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqHeart) */ {
 public:
  ReqHeart();
  virtual ~ReqHeart();

  ReqHeart(const ReqHeart& from);
  ReqHeart(ReqHeart&& from) noexcept
    : ReqHeart() {
    *this = ::std::move(from);
  }

  inline ReqHeart& operator=(const ReqHeart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeart& operator=(ReqHeart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqHeart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHeart* internal_default_instance() {
    return reinterpret_cast<const ReqHeart*>(
               &_ReqHeart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqHeart* other);
  friend void swap(ReqHeart& a, ReqHeart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqHeart* New() const final {
    return CreateMaybeMessage<ReqHeart>(nullptr);
  }

  ReqHeart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqHeart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqHeart& from);
  void MergeFrom(const ReqHeart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHeart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqHeart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 clientTime = 1;
  bool has_clienttime() const;
  void clear_clienttime();
  static const int kClientTimeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 clienttime() const;
  void set_clienttime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqHeart)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 clienttime_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResHeart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResHeart) */ {
 public:
  ResHeart();
  virtual ~ResHeart();

  ResHeart(const ResHeart& from);
  ResHeart(ResHeart&& from) noexcept
    : ResHeart() {
    *this = ::std::move(from);
  }

  inline ResHeart& operator=(const ResHeart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHeart& operator=(ResHeart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResHeart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResHeart* internal_default_instance() {
    return reinterpret_cast<const ResHeart*>(
               &_ResHeart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ResHeart* other);
  friend void swap(ResHeart& a, ResHeart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResHeart* New() const final {
    return CreateMaybeMessage<ResHeart>(nullptr);
  }

  ResHeart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResHeart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResHeart& from);
  void MergeFrom(const ResHeart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHeart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResHeart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 nowTime = 1;
  bool has_nowtime() const;
  void clear_nowtime();
  static const int kNowTimeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 nowtime() const;
  void set_nowtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 clientTime = 2;
  bool has_clienttime() const;
  void clear_clienttime();
  static const int kClientTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 clienttime() const;
  void set_clienttime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResHeart)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 nowtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 clienttime_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqRoleId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqRoleId) */ {
 public:
  ReqRoleId();
  virtual ~ReqRoleId();

  ReqRoleId(const ReqRoleId& from);
  ReqRoleId(ReqRoleId&& from) noexcept
    : ReqRoleId() {
    *this = ::std::move(from);
  }

  inline ReqRoleId& operator=(const ReqRoleId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRoleId& operator=(ReqRoleId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqRoleId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRoleId* internal_default_instance() {
    return reinterpret_cast<const ReqRoleId*>(
               &_ReqRoleId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReqRoleId* other);
  friend void swap(ReqRoleId& a, ReqRoleId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRoleId* New() const final {
    return CreateMaybeMessage<ReqRoleId>(nullptr);
  }

  ReqRoleId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRoleId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRoleId& from);
  void MergeFrom(const ReqRoleId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRoleId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqRoleId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqRoleId)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResUserIdInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResUserIdInfo) */ {
 public:
  ResUserIdInfo();
  virtual ~ResUserIdInfo();

  ResUserIdInfo(const ResUserIdInfo& from);
  ResUserIdInfo(ResUserIdInfo&& from) noexcept
    : ResUserIdInfo() {
    *this = ::std::move(from);
  }

  inline ResUserIdInfo& operator=(const ResUserIdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResUserIdInfo& operator=(ResUserIdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResUserIdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResUserIdInfo* internal_default_instance() {
    return reinterpret_cast<const ResUserIdInfo*>(
               &_ResUserIdInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ResUserIdInfo* other);
  friend void swap(ResUserIdInfo& a, ResUserIdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResUserIdInfo* New() const final {
    return CreateMaybeMessage<ResUserIdInfo>(nullptr);
  }

  ResUserIdInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResUserIdInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResUserIdInfo& from);
  void MergeFrom(const ResUserIdInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResUserIdInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResUserIdInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResUserIdInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResVersionError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResVersionError) */ {
 public:
  ResVersionError();
  virtual ~ResVersionError();

  ResVersionError(const ResVersionError& from);
  ResVersionError(ResVersionError&& from) noexcept
    : ResVersionError() {
    *this = ::std::move(from);
  }

  inline ResVersionError& operator=(const ResVersionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResVersionError& operator=(ResVersionError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResVersionError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResVersionError* internal_default_instance() {
    return reinterpret_cast<const ResVersionError*>(
               &_ResVersionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ResVersionError* other);
  friend void swap(ResVersionError& a, ResVersionError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResVersionError* New() const final {
    return CreateMaybeMessage<ResVersionError>(nullptr);
  }

  ResVersionError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResVersionError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResVersionError& from);
  void MergeFrom(const ResVersionError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResVersionError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResVersionError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userV2.ResVersionError)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API DisconnectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.DisconnectResponse) */ {
 public:
  DisconnectResponse();
  virtual ~DisconnectResponse();

  DisconnectResponse(const DisconnectResponse& from);
  DisconnectResponse(DisconnectResponse&& from) noexcept
    : DisconnectResponse() {
    *this = ::std::move(from);
  }

  inline DisconnectResponse& operator=(const DisconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectResponse& operator=(DisconnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectResponse* internal_default_instance() {
    return reinterpret_cast<const DisconnectResponse*>(
               &_DisconnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DisconnectResponse* other);
  friend void swap(DisconnectResponse& a, DisconnectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectResponse* New() const final {
    return CreateMaybeMessage<DisconnectResponse>(nullptr);
  }

  DisconnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectResponse& from);
  void MergeFrom(const DisconnectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.DisconnectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reason = 1;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userV2.DisconnectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResDeleteRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResDeleteRole) */ {
 public:
  ResDeleteRole();
  virtual ~ResDeleteRole();

  ResDeleteRole(const ResDeleteRole& from);
  ResDeleteRole(ResDeleteRole&& from) noexcept
    : ResDeleteRole() {
    *this = ::std::move(from);
  }

  inline ResDeleteRole& operator=(const ResDeleteRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDeleteRole& operator=(ResDeleteRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResDeleteRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResDeleteRole* internal_default_instance() {
    return reinterpret_cast<const ResDeleteRole*>(
               &_ResDeleteRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ResDeleteRole* other);
  friend void swap(ResDeleteRole& a, ResDeleteRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResDeleteRole* New() const final {
    return CreateMaybeMessage<ResDeleteRole>(nullptr);
  }

  ResDeleteRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResDeleteRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResDeleteRole& from);
  void MergeFrom(const ResDeleteRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDeleteRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResDeleteRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResDeleteRole)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqDeleteRole :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqDeleteRole) */ {
 public:
  ReqDeleteRole();
  virtual ~ReqDeleteRole();

  ReqDeleteRole(const ReqDeleteRole& from);
  ReqDeleteRole(ReqDeleteRole&& from) noexcept
    : ReqDeleteRole() {
    *this = ::std::move(from);
  }

  inline ReqDeleteRole& operator=(const ReqDeleteRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteRole& operator=(ReqDeleteRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqDeleteRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteRole* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteRole*>(
               &_ReqDeleteRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ReqDeleteRole* other);
  friend void swap(ReqDeleteRole& a, ReqDeleteRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteRole* New() const final {
    return CreateMaybeMessage<ReqDeleteRole>(nullptr);
  }

  ReqDeleteRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteRole& from);
  void MergeFrom(const ReqDeleteRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqDeleteRole";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqDeleteRole)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqReconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ReqReconnect) */ {
 public:
  ReqReconnect();
  virtual ~ReqReconnect();

  ReqReconnect(const ReqReconnect& from);
  ReqReconnect(ReqReconnect&& from) noexcept
    : ReqReconnect() {
    *this = ::std::move(from);
  }

  inline ReqReconnect& operator=(const ReqReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReconnect& operator=(ReqReconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqReconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqReconnect* internal_default_instance() {
    return reinterpret_cast<const ReqReconnect*>(
               &_ReqReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ReqReconnect* other);
  friend void swap(ReqReconnect& a, ReqReconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqReconnect* New() const final {
    return CreateMaybeMessage<ReqReconnect>(nullptr);
  }

  ReqReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReconnect& from);
  void MergeFrom(const ReqReconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ReqReconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loginName = 1;
  bool has_loginname() const;
  void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);

  // optional string sign = 12;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 12;
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);

  // optional int32 sid = 2;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 platformId = 3;
  bool has_platformid() const;
  void clear_platformid();
  static const int kPlatformIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid() const;
  void set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 client = 4;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version = 7;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 roleId = 10;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 time = 11;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ReqReconnect)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResRobotGM :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResRobotGM) */ {
 public:
  ResRobotGM();
  virtual ~ResRobotGM();

  ResRobotGM(const ResRobotGM& from);
  ResRobotGM(ResRobotGM&& from) noexcept
    : ResRobotGM() {
    *this = ::std::move(from);
  }

  inline ResRobotGM& operator=(const ResRobotGM& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResRobotGM& operator=(ResRobotGM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResRobotGM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResRobotGM* internal_default_instance() {
    return reinterpret_cast<const ResRobotGM*>(
               &_ResRobotGM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ResRobotGM* other);
  friend void swap(ResRobotGM& a, ResRobotGM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResRobotGM* New() const final {
    return CreateMaybeMessage<ResRobotGM>(nullptr);
  }

  ResRobotGM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResRobotGM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResRobotGM& from);
  void MergeFrom(const ResRobotGM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResRobotGM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResRobotGM";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mapId = 2;
  bool has_mapid() const;
  void clear_mapid();
  static const int kMapIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 line = 3;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // optional bool isUseSkill = 7;
  bool has_isuseskill() const;
  void clear_isuseskill();
  static const int kIsUseSkillFieldNumber = 7;
  bool isuseskill() const;
  void set_isuseskill(bool value);

  // optional bool isClear = 8;
  bool has_isclear() const;
  void clear_isclear();
  static const int kIsClearFieldNumber = 8;
  bool isclear() const;
  void set_isclear(bool value);

  // optional int32 addCount = 9;
  bool has_addcount() const;
  void clear_addcount();
  static const int kAddCountFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 addcount() const;
  void set_addcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userV2.ResRobotGM)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  float x_;
  float y_;
  float z_;
  bool isuseskill_;
  bool isclear_;
  ::PROTOBUF_NAMESPACE_ID::int32 addcount_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResOtherLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResOtherLogin) */ {
 public:
  ResOtherLogin();
  virtual ~ResOtherLogin();

  ResOtherLogin(const ResOtherLogin& from);
  ResOtherLogin(ResOtherLogin&& from) noexcept
    : ResOtherLogin() {
    *this = ::std::move(from);
  }

  inline ResOtherLogin& operator=(const ResOtherLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResOtherLogin& operator=(ResOtherLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResOtherLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResOtherLogin* internal_default_instance() {
    return reinterpret_cast<const ResOtherLogin*>(
               &_ResOtherLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ResOtherLogin* other);
  friend void swap(ResOtherLogin& a, ResOtherLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResOtherLogin* New() const final {
    return CreateMaybeMessage<ResOtherLogin>(nullptr);
  }

  ResOtherLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResOtherLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResOtherLogin& from);
  void MergeFrom(const ResOtherLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResOtherLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResOtherLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResOtherLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResLoginInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResLoginInfo) */ {
 public:
  ResLoginInfo();
  virtual ~ResLoginInfo();

  ResLoginInfo(const ResLoginInfo& from);
  ResLoginInfo(ResLoginInfo&& from) noexcept
    : ResLoginInfo() {
    *this = ::std::move(from);
  }

  inline ResLoginInfo& operator=(const ResLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResLoginInfo& operator=(ResLoginInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResLoginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResLoginInfo* internal_default_instance() {
    return reinterpret_cast<const ResLoginInfo*>(
               &_ResLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ResLoginInfo* other);
  friend void swap(ResLoginInfo& a, ResLoginInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResLoginInfo* New() const final {
    return CreateMaybeMessage<ResLoginInfo>(nullptr);
  }

  ResLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResLoginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResLoginInfo& from);
  void MergeFrom(const ResLoginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResLoginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResLoginInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 userId = 1;
  int userid_size() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 userid(int index) const;
  void set_userid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      userid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_userid();

  // @@protoc_insertion_point(class_scope:userV2.ResLoginInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > userid_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResDisconnectInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userV2.ResDisconnectInfo) */ {
 public:
  ResDisconnectInfo();
  virtual ~ResDisconnectInfo();

  ResDisconnectInfo(const ResDisconnectInfo& from);
  ResDisconnectInfo(ResDisconnectInfo&& from) noexcept
    : ResDisconnectInfo() {
    *this = ::std::move(from);
  }

  inline ResDisconnectInfo& operator=(const ResDisconnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResDisconnectInfo& operator=(ResDisconnectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResDisconnectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResDisconnectInfo* internal_default_instance() {
    return reinterpret_cast<const ResDisconnectInfo*>(
               &_ResDisconnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ResDisconnectInfo* other);
  friend void swap(ResDisconnectInfo& a, ResDisconnectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResDisconnectInfo* New() const final {
    return CreateMaybeMessage<ResDisconnectInfo>(nullptr);
  }

  ResDisconnectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResDisconnectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResDisconnectInfo& from);
  void MergeFrom(const ResDisconnectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResDisconnectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userV2.ResDisconnectInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:userV2.ResDisconnectInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqLogin

// required string loginName = 1;
inline bool ReqLogin::has_loginname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogin::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqLogin::loginname() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.loginName)
  return loginname_.GetNoArena();
}
inline void ReqLogin::set_loginname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.loginName)
}
inline void ReqLogin::set_loginname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqLogin.loginName)
}
inline void ReqLogin::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqLogin.loginName)
}
inline void ReqLogin::set_loginname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqLogin.loginName)
}
inline std::string* ReqLogin::mutable_loginname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqLogin.loginName)
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqLogin::release_loginname() {
  // @@protoc_insertion_point(field_release:userV2.ReqLogin.loginName)
  if (!has_loginname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return loginname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqLogin.loginName)
}

// optional int32 sid = 2;
inline bool ReqLogin::has_sid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqLogin::clear_sid() {
  sid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::sid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.sid)
  return sid_;
}
inline void ReqLogin::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  sid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.sid)
}

// optional int32 platformId = 3;
inline bool ReqLogin::has_platformid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqLogin::clear_platformid() {
  platformid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::platformid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.platformId)
  return platformid_;
}
inline void ReqLogin::set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  platformid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.platformId)
}

// optional int32 client = 4;
inline bool ReqLogin::has_client() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqLogin::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::client() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.client)
  return client_;
}
inline void ReqLogin::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  client_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.client)
}

// optional string IDNumber = 5;
inline bool ReqLogin::has_idnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogin::clear_idnumber() {
  idnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReqLogin::idnumber() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.IDNumber)
  return idnumber_.GetNoArena();
}
inline void ReqLogin::set_idnumber(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.IDNumber)
}
inline void ReqLogin::set_idnumber(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  idnumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqLogin.IDNumber)
}
inline void ReqLogin::set_idnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqLogin.IDNumber)
}
inline void ReqLogin::set_idnumber(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqLogin.IDNumber)
}
inline std::string* ReqLogin::mutable_idnumber() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqLogin.IDNumber)
  return idnumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqLogin::release_idnumber() {
  // @@protoc_insertion_point(field_release:userV2.ReqLogin.IDNumber)
  if (!has_idnumber()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return idnumber_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_idnumber(std::string* idnumber) {
  if (idnumber != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  idnumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idnumber);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqLogin.IDNumber)
}

// optional int32 version = 7;
inline bool ReqLogin::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqLogin::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::version() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.version)
  return version_;
}
inline void ReqLogin::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  version_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.version)
}

// optional int64 time = 10;
inline bool ReqLogin::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqLogin::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqLogin::time() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.time)
  return time_;
}
inline void ReqLogin::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  time_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.time)
}

// optional string sign = 11;
inline bool ReqLogin::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqLogin::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReqLogin::sign() const {
  // @@protoc_insertion_point(field_get:userV2.ReqLogin.sign)
  return sign_.GetNoArena();
}
inline void ReqLogin::set_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqLogin.sign)
}
inline void ReqLogin::set_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqLogin.sign)
}
inline void ReqLogin::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqLogin.sign)
}
inline void ReqLogin::set_sign(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqLogin.sign)
}
inline std::string* ReqLogin::mutable_sign() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqLogin.sign)
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqLogin::release_sign() {
  // @@protoc_insertion_point(field_release:userV2.ReqLogin.sign)
  if (!has_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sign_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqLogin.sign)
}

// -------------------------------------------------------------------

// ResLogin

// optional int64 userId = 1;
inline bool ResLogin::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResLogin::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResLogin::userid() const {
  // @@protoc_insertion_point(field_get:userV2.ResLogin.userId)
  return userid_;
}
inline void ResLogin::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResLogin.userId)
}

// -------------------------------------------------------------------

// ResCreateRole

// optional int64 uid = 1;
inline bool ResCreateRole::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResCreateRole::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResCreateRole::uid() const {
  // @@protoc_insertion_point(field_get:userV2.ResCreateRole.uid)
  return uid_;
}
inline void ResCreateRole::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResCreateRole.uid)
}

// optional string randomRoleName = 2;
inline bool ResCreateRole::has_randomrolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResCreateRole::clear_randomrolename() {
  randomrolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResCreateRole::randomrolename() const {
  // @@protoc_insertion_point(field_get:userV2.ResCreateRole.randomRoleName)
  return randomrolename_.GetNoArena();
}
inline void ResCreateRole::set_randomrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  randomrolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ResCreateRole.randomRoleName)
}
inline void ResCreateRole::set_randomrolename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  randomrolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ResCreateRole.randomRoleName)
}
inline void ResCreateRole::set_randomrolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  randomrolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ResCreateRole.randomRoleName)
}
inline void ResCreateRole::set_randomrolename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  randomrolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ResCreateRole.randomRoleName)
}
inline std::string* ResCreateRole::mutable_randomrolename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ResCreateRole.randomRoleName)
  return randomrolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResCreateRole::release_randomrolename() {
  // @@protoc_insertion_point(field_release:userV2.ResCreateRole.randomRoleName)
  if (!has_randomrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return randomrolename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResCreateRole::set_allocated_randomrolename(std::string* randomrolename) {
  if (randomrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  randomrolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randomrolename);
  // @@protoc_insertion_point(field_set_allocated:userV2.ResCreateRole.randomRoleName)
}

// -------------------------------------------------------------------

// ReqCreateRole

// optional string roleName = 1;
inline bool ReqCreateRole::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCreateRole::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqCreateRole::rolename() const {
  // @@protoc_insertion_point(field_get:userV2.ReqCreateRole.roleName)
  return rolename_.GetNoArena();
}
inline void ReqCreateRole::set_rolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqCreateRole.roleName)
}
inline void ReqCreateRole::set_rolename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqCreateRole.roleName)
}
inline void ReqCreateRole::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqCreateRole.roleName)
}
inline void ReqCreateRole::set_rolename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqCreateRole.roleName)
}
inline std::string* ReqCreateRole::mutable_rolename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqCreateRole.roleName)
  return rolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqCreateRole::release_rolename() {
  // @@protoc_insertion_point(field_release:userV2.ReqCreateRole.roleName)
  if (!has_rolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rolename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCreateRole::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqCreateRole.roleName)
}

// optional int32 sex = 2;
inline bool ReqCreateRole::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCreateRole::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateRole::sex() const {
  // @@protoc_insertion_point(field_get:userV2.ReqCreateRole.sex)
  return sex_;
}
inline void ReqCreateRole::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqCreateRole.sex)
}

// optional int32 career = 3;
inline bool ReqCreateRole::has_career() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCreateRole::clear_career() {
  career_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateRole::career() const {
  // @@protoc_insertion_point(field_get:userV2.ReqCreateRole.career)
  return career_;
}
inline void ReqCreateRole::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  career_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqCreateRole.career)
}

// -------------------------------------------------------------------

// ReqRandomName

// optional int32 sex = 1;
inline bool ReqRandomName::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRandomName::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRandomName::sex() const {
  // @@protoc_insertion_point(field_get:userV2.ReqRandomName.sex)
  return sex_;
}
inline void ReqRandomName::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqRandomName.sex)
}

// -------------------------------------------------------------------

// ResRandomName

// optional string roleName = 1;
inline bool ResRandomName::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResRandomName::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResRandomName::rolename() const {
  // @@protoc_insertion_point(field_get:userV2.ResRandomName.roleName)
  return rolename_.GetNoArena();
}
inline void ResRandomName::set_rolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ResRandomName.roleName)
}
inline void ResRandomName::set_rolename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ResRandomName.roleName)
}
inline void ResRandomName::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ResRandomName.roleName)
}
inline void ResRandomName::set_rolename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ResRandomName.roleName)
}
inline std::string* ResRandomName::mutable_rolename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ResRandomName.roleName)
  return rolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResRandomName::release_rolename() {
  // @@protoc_insertion_point(field_release:userV2.ResRandomName.roleName)
  if (!has_rolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rolename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResRandomName::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:userV2.ResRandomName.roleName)
}

// -------------------------------------------------------------------

// ResRoleName

// optional string name = 1;
inline bool ResRoleName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResRoleName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResRoleName::name() const {
  // @@protoc_insertion_point(field_get:userV2.ResRoleName.name)
  return name_.GetNoArena();
}
inline void ResRoleName::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ResRoleName.name)
}
inline void ResRoleName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ResRoleName.name)
}
inline void ResRoleName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ResRoleName.name)
}
inline void ResRoleName::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ResRoleName.name)
}
inline std::string* ResRoleName::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ResRoleName.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResRoleName::release_name() {
  // @@protoc_insertion_point(field_release:userV2.ResRoleName.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResRoleName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userV2.ResRoleName.name)
}

// -------------------------------------------------------------------

// ResEnterGame

// optional int64 uid = 1;
inline bool ResEnterGame::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResEnterGame::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResEnterGame::uid() const {
  // @@protoc_insertion_point(field_get:userV2.ResEnterGame.uid)
  return uid_;
}
inline void ResEnterGame::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResEnterGame.uid)
}

// optional string uidStr = 2;
inline bool ResEnterGame::has_uidstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResEnterGame::clear_uidstr() {
  uidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResEnterGame::uidstr() const {
  // @@protoc_insertion_point(field_get:userV2.ResEnterGame.uidStr)
  return uidstr_.GetNoArena();
}
inline void ResEnterGame::set_uidstr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ResEnterGame.uidStr)
}
inline void ResEnterGame::set_uidstr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uidstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ResEnterGame.uidStr)
}
inline void ResEnterGame::set_uidstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ResEnterGame.uidStr)
}
inline void ResEnterGame::set_uidstr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ResEnterGame.uidStr)
}
inline std::string* ResEnterGame::mutable_uidstr() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ResEnterGame.uidStr)
  return uidstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResEnterGame::release_uidstr() {
  // @@protoc_insertion_point(field_release:userV2.ResEnterGame.uidStr)
  if (!has_uidstr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uidstr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResEnterGame::set_allocated_uidstr(std::string* uidstr) {
  if (uidstr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uidstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uidstr);
  // @@protoc_insertion_point(field_set_allocated:userV2.ResEnterGame.uidStr)
}

// optional int64 serverTime = 3;
inline bool ResEnterGame::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResEnterGame::clear_servertime() {
  servertime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResEnterGame::servertime() const {
  // @@protoc_insertion_point(field_get:userV2.ResEnterGame.serverTime)
  return servertime_;
}
inline void ResEnterGame::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  servertime_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResEnterGame.serverTime)
}

// -------------------------------------------------------------------

// ReqHeart

// optional int64 clientTime = 1;
inline bool ReqHeart::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqHeart::clear_clienttime() {
  clienttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqHeart::clienttime() const {
  // @@protoc_insertion_point(field_get:userV2.ReqHeart.clientTime)
  return clienttime_;
}
inline void ReqHeart::set_clienttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqHeart.clientTime)
}

// -------------------------------------------------------------------

// ResHeart

// optional int64 nowTime = 1;
inline bool ResHeart::has_nowtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResHeart::clear_nowtime() {
  nowtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResHeart::nowtime() const {
  // @@protoc_insertion_point(field_get:userV2.ResHeart.nowTime)
  return nowtime_;
}
inline void ResHeart::set_nowtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  nowtime_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResHeart.nowTime)
}

// optional int64 clientTime = 2;
inline bool ResHeart::has_clienttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResHeart::clear_clienttime() {
  clienttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResHeart::clienttime() const {
  // @@protoc_insertion_point(field_get:userV2.ResHeart.clientTime)
  return clienttime_;
}
inline void ResHeart::set_clienttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResHeart.clientTime)
}

// -------------------------------------------------------------------

// ReqRoleId

// optional int64 roleId = 1;
inline bool ReqRoleId::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRoleId::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqRoleId::roleid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqRoleId.roleId)
  return roleid_;
}
inline void ReqRoleId::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqRoleId.roleId)
}

// -------------------------------------------------------------------

// ResUserIdInfo

// optional int64 userId = 1;
inline bool ResUserIdInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResUserIdInfo::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResUserIdInfo::userid() const {
  // @@protoc_insertion_point(field_get:userV2.ResUserIdInfo.userId)
  return userid_;
}
inline void ResUserIdInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResUserIdInfo.userId)
}

// -------------------------------------------------------------------

// ResVersionError

// optional int32 version = 1;
inline bool ResVersionError::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResVersionError::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResVersionError::version() const {
  // @@protoc_insertion_point(field_get:userV2.ResVersionError.version)
  return version_;
}
inline void ResVersionError::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResVersionError.version)
}

// -------------------------------------------------------------------

// DisconnectResponse

// optional int32 reason = 1;
inline bool DisconnectResponse::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisconnectResponse::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisconnectResponse::reason() const {
  // @@protoc_insertion_point(field_get:userV2.DisconnectResponse.reason)
  return reason_;
}
inline void DisconnectResponse::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  reason_ = value;
  // @@protoc_insertion_point(field_set:userV2.DisconnectResponse.reason)
}

// -------------------------------------------------------------------

// ResDeleteRole

// optional int64 roleId = 1;
inline bool ResDeleteRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResDeleteRole::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResDeleteRole::roleid() const {
  // @@protoc_insertion_point(field_get:userV2.ResDeleteRole.roleId)
  return roleid_;
}
inline void ResDeleteRole::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResDeleteRole.roleId)
}

// -------------------------------------------------------------------

// ReqDeleteRole

// optional int64 roleId = 1;
inline bool ReqDeleteRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDeleteRole::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqDeleteRole::roleid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqDeleteRole.roleId)
  return roleid_;
}
inline void ReqDeleteRole::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqDeleteRole.roleId)
}

// -------------------------------------------------------------------

// ReqReconnect

// optional string loginName = 1;
inline bool ReqReconnect::has_loginname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqReconnect::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqReconnect::loginname() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.loginName)
  return loginname_.GetNoArena();
}
inline void ReqReconnect::set_loginname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.loginName)
}
inline void ReqReconnect::set_loginname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqReconnect.loginName)
}
inline void ReqReconnect::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqReconnect.loginName)
}
inline void ReqReconnect::set_loginname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqReconnect.loginName)
}
inline std::string* ReqReconnect::mutable_loginname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqReconnect.loginName)
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqReconnect::release_loginname() {
  // @@protoc_insertion_point(field_release:userV2.ReqReconnect.loginName)
  if (!has_loginname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return loginname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqReconnect::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqReconnect.loginName)
}

// optional int32 sid = 2;
inline bool ReqReconnect::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqReconnect::clear_sid() {
  sid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::sid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.sid)
  return sid_;
}
inline void ReqReconnect::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.sid)
}

// optional int32 platformId = 3;
inline bool ReqReconnect::has_platformid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqReconnect::clear_platformid() {
  platformid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::platformid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.platformId)
  return platformid_;
}
inline void ReqReconnect::set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  platformid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.platformId)
}

// optional int32 client = 4;
inline bool ReqReconnect::has_client() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqReconnect::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::client() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.client)
  return client_;
}
inline void ReqReconnect::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.client)
}

// optional int32 version = 7;
inline bool ReqReconnect::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqReconnect::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::version() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.version)
  return version_;
}
inline void ReqReconnect::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  version_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.version)
}

// optional int64 roleId = 10;
inline bool ReqReconnect::has_roleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqReconnect::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqReconnect::roleid() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.roleId)
  return roleid_;
}
inline void ReqReconnect::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.roleId)
}

// optional int64 time = 11;
inline bool ReqReconnect::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqReconnect::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqReconnect::time() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.time)
  return time_;
}
inline void ReqReconnect::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  time_ = value;
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.time)
}

// optional string sign = 12;
inline bool ReqReconnect::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqReconnect::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReqReconnect::sign() const {
  // @@protoc_insertion_point(field_get:userV2.ReqReconnect.sign)
  return sign_.GetNoArena();
}
inline void ReqReconnect::set_sign(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userV2.ReqReconnect.sign)
}
inline void ReqReconnect::set_sign(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userV2.ReqReconnect.sign)
}
inline void ReqReconnect::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userV2.ReqReconnect.sign)
}
inline void ReqReconnect::set_sign(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userV2.ReqReconnect.sign)
}
inline std::string* ReqReconnect::mutable_sign() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userV2.ReqReconnect.sign)
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqReconnect::release_sign() {
  // @@protoc_insertion_point(field_release:userV2.ReqReconnect.sign)
  if (!has_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sign_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqReconnect::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:userV2.ReqReconnect.sign)
}

// -------------------------------------------------------------------

// ResRobotGM

// optional int32 type = 1;
inline bool ResRobotGM::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResRobotGM::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRobotGM::type() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.type)
  return type_;
}
inline void ResRobotGM::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.type)
}

// optional int32 mapId = 2;
inline bool ResRobotGM::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResRobotGM::clear_mapid() {
  mapid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRobotGM::mapid() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.mapId)
  return mapid_;
}
inline void ResRobotGM::set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mapid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.mapId)
}

// optional int32 line = 3;
inline bool ResRobotGM::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResRobotGM::clear_line() {
  line_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRobotGM::line() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.line)
  return line_;
}
inline void ResRobotGM::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  line_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.line)
}

// optional float x = 4;
inline bool ResRobotGM::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResRobotGM::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResRobotGM::x() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.x)
  return x_;
}
inline void ResRobotGM::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.x)
}

// optional float y = 5;
inline bool ResRobotGM::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResRobotGM::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ResRobotGM::y() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.y)
  return y_;
}
inline void ResRobotGM::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.y)
}

// optional float z = 6;
inline bool ResRobotGM::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResRobotGM::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResRobotGM::z() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.z)
  return z_;
}
inline void ResRobotGM::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.z)
}

// optional bool isUseSkill = 7;
inline bool ResRobotGM::has_isuseskill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResRobotGM::clear_isuseskill() {
  isuseskill_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ResRobotGM::isuseskill() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.isUseSkill)
  return isuseskill_;
}
inline void ResRobotGM::set_isuseskill(bool value) {
  _has_bits_[0] |= 0x00000040u;
  isuseskill_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.isUseSkill)
}

// optional bool isClear = 8;
inline bool ResRobotGM::has_isclear() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResRobotGM::clear_isclear() {
  isclear_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ResRobotGM::isclear() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.isClear)
  return isclear_;
}
inline void ResRobotGM::set_isclear(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isclear_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.isClear)
}

// optional int32 addCount = 9;
inline bool ResRobotGM::has_addcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResRobotGM::clear_addcount() {
  addcount_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResRobotGM::addcount() const {
  // @@protoc_insertion_point(field_get:userV2.ResRobotGM.addCount)
  return addcount_;
}
inline void ResRobotGM::set_addcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  addcount_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResRobotGM.addCount)
}

// -------------------------------------------------------------------

// ResOtherLogin

// optional int64 userId = 1;
inline bool ResOtherLogin::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResOtherLogin::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResOtherLogin::userid() const {
  // @@protoc_insertion_point(field_get:userV2.ResOtherLogin.userId)
  return userid_;
}
inline void ResOtherLogin::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResOtherLogin.userId)
}

// -------------------------------------------------------------------

// ResLoginInfo

// repeated int64 userId = 1;
inline int ResLoginInfo::userid_size() const {
  return userid_.size();
}
inline void ResLoginInfo::clear_userid() {
  userid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResLoginInfo::userid(int index) const {
  // @@protoc_insertion_point(field_get:userV2.ResLoginInfo.userId)
  return userid_.Get(index);
}
inline void ResLoginInfo::set_userid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:userV2.ResLoginInfo.userId)
}
inline void ResLoginInfo::add_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  userid_.Add(value);
  // @@protoc_insertion_point(field_add:userV2.ResLoginInfo.userId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ResLoginInfo::userid() const {
  // @@protoc_insertion_point(field_list:userV2.ResLoginInfo.userId)
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ResLoginInfo::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:userV2.ResLoginInfo.userId)
  return &userid_;
}

// -------------------------------------------------------------------

// ResDisconnectInfo

// optional int64 userId = 1;
inline bool ResDisconnectInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResDisconnectInfo::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResDisconnectInfo::userid() const {
  // @@protoc_insertion_point(field_get:userV2.ResDisconnectInfo.userId)
  return userid_;
}
inline void ResDisconnectInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:userV2.ResDisconnectInfo.userId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userV2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
