// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c2s.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_c2s_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_c2s_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_c2s_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_c2s_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_c2s_2eproto;
class Common;
class CommonDefaultTypeInternal;
PROTOBUF_API extern CommonDefaultTypeInternal _Common_default_instance_;
class FLogin;
class FLoginDefaultTypeInternal;
PROTOBUF_API extern FLoginDefaultTypeInternal _FLogin_default_instance_;
class FPing;
class FPingDefaultTypeInternal;
PROTOBUF_API extern FPingDefaultTypeInternal _FPing_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
PROTOBUF_API extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class ReqComboNodeMessage;
class ReqComboNodeMessageDefaultTypeInternal;
PROTOBUF_API extern ReqComboNodeMessageDefaultTypeInternal _ReqComboNodeMessage_default_instance_;
class ReqComboPostionDifMessage;
class ReqComboPostionDifMessageDefaultTypeInternal;
PROTOBUF_API extern ReqComboPostionDifMessageDefaultTypeInternal _ReqComboPostionDifMessage_default_instance_;
class ReqLoginInfoMessage;
class ReqLoginInfoMessageDefaultTypeInternal;
PROTOBUF_API extern ReqLoginInfoMessageDefaultTypeInternal _ReqLoginInfoMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_API ::Common* Arena::CreateMaybeMessage<::Common>(Arena*);
template<> PROTOBUF_API ::FLogin* Arena::CreateMaybeMessage<::FLogin>(Arena*);
template<> PROTOBUF_API ::FPing* Arena::CreateMaybeMessage<::FPing>(Arena*);
template<> PROTOBUF_API ::LoginReq* Arena::CreateMaybeMessage<::LoginReq>(Arena*);
template<> PROTOBUF_API ::ReqComboNodeMessage* Arena::CreateMaybeMessage<::ReqComboNodeMessage>(Arena*);
template<> PROTOBUF_API ::ReqComboPostionDifMessage* Arena::CreateMaybeMessage<::ReqComboPostionDifMessage>(Arena*);
template<> PROTOBUF_API ::ReqLoginInfoMessage* Arena::CreateMaybeMessage<::ReqLoginInfoMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PROTOBUF_API FPing :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FPing) */ {
 public:
  FPing();
  virtual ~FPing();

  FPing(const FPing& from);
  FPing(FPing&& from) noexcept
    : FPing() {
    *this = ::std::move(from);
  }

  inline FPing& operator=(const FPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline FPing& operator=(FPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FPing* internal_default_instance() {
    return reinterpret_cast<const FPing*>(
               &_FPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FPing* other);
  friend void swap(FPing& a, FPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FPing* New() const final {
    return CreateMaybeMessage<FPing>(nullptr);
  }

  FPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FPing& from);
  void MergeFrom(const FPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FPing";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ctime = 1;
  void clear_ctime();
  static const int kCtimeFieldNumber = 1;
  float ctime() const;
  void set_ctime(float value);

  // @@protoc_insertion_point(class_scope:FPing)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ctime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API FLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLogin) */ {
 public:
  FLogin();
  virtual ~FLogin();

  FLogin(const FLogin& from);
  FLogin(FLogin&& from) noexcept
    : FLogin() {
    *this = ::std::move(from);
  }

  inline FLogin& operator=(const FLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline FLogin& operator=(FLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FLogin* internal_default_instance() {
    return reinterpret_cast<const FLogin*>(
               &_FLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FLogin* other);
  friend void swap(FLogin& a, FLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FLogin* New() const final {
    return CreateMaybeMessage<FLogin>(nullptr);
  }

  FLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FLogin& from);
  void MergeFrom(const FLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:FLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API Common :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common) */ {
 public:
  Common();
  virtual ~Common();

  Common(const Common& from);
  Common(Common&& from) noexcept
    : Common() {
    *this = ::std::move(from);
  }

  inline Common& operator=(const Common& from) {
    CopyFrom(from);
    return *this;
  }
  inline Common& operator=(Common&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Common& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Common* internal_default_instance() {
    return reinterpret_cast<const Common*>(
               &_Common_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Common* other);
  friend void swap(Common& a, Common& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Common* New() const final {
    return CreateMaybeMessage<Common>(nullptr);
  }

  Common* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Common>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Common& from);
  void MergeFrom(const Common& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Common* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes mark = 3;
  void clear_mark();
  static const int kMarkFieldNumber = 3;
  const std::string& mark() const;
  void set_mark(const std::string& value);
  void set_mark(std::string&& value);
  void set_mark(const char* value);
  void set_mark(const void* value, size_t size);
  std::string* mutable_mark();
  std::string* release_mark();
  void set_allocated_mark(std::string* mark);

  // string data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int32 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Common)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginReq* other);
  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loginName = 1;
  void clear_loginname();
  static const int kLoginNameFieldNumber = 1;
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);

  // string idNumber = 5;
  void clear_idnumber();
  static const int kIdNumberFieldNumber = 5;
  const std::string& idnumber() const;
  void set_idnumber(const std::string& value);
  void set_idnumber(std::string&& value);
  void set_idnumber(const char* value);
  void set_idnumber(const char* value, size_t size);
  std::string* mutable_idnumber();
  std::string* release_idnumber();
  void set_allocated_idnumber(std::string* idnumber);

  // string ip = 6;
  void clear_ip();
  static const int kIpFieldNumber = 6;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string channelId = 8;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 8;
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);

  // string qudao = 9;
  void clear_qudao();
  static const int kQudaoFieldNumber = 9;
  const std::string& qudao() const;
  void set_qudao(const std::string& value);
  void set_qudao(std::string&& value);
  void set_qudao(const char* value);
  void set_qudao(const char* value, size_t size);
  std::string* mutable_qudao();
  std::string* release_qudao();
  void set_allocated_qudao(std::string* qudao);

  // string token = 11;
  void clear_token();
  static const int kTokenFieldNumber = 11;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // int32 sid = 2;
  void clear_sid();
  static const int kSidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 pid = 3;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 client = 4;
  void clear_client();
  static const int kClientFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isAdult = 10;
  void clear_isadult();
  static const int kIsAdultFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 isadult() const;
  void set_isadult(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qudao_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 isadult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqLoginInfoMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqLoginInfoMessage) */ {
 public:
  ReqLoginInfoMessage();
  virtual ~ReqLoginInfoMessage();

  ReqLoginInfoMessage(const ReqLoginInfoMessage& from);
  ReqLoginInfoMessage(ReqLoginInfoMessage&& from) noexcept
    : ReqLoginInfoMessage() {
    *this = ::std::move(from);
  }

  inline ReqLoginInfoMessage& operator=(const ReqLoginInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLoginInfoMessage& operator=(ReqLoginInfoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLoginInfoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLoginInfoMessage* internal_default_instance() {
    return reinterpret_cast<const ReqLoginInfoMessage*>(
               &_ReqLoginInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqLoginInfoMessage* other);
  friend void swap(ReqLoginInfoMessage& a, ReqLoginInfoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLoginInfoMessage* New() const final {
    return CreateMaybeMessage<ReqLoginInfoMessage>(nullptr);
  }

  ReqLoginInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLoginInfoMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLoginInfoMessage& from);
  void MergeFrom(const ReqLoginInfoMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLoginInfoMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqLoginInfoMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ReqLoginInfoMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqComboNodeMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqComboNodeMessage) */ {
 public:
  ReqComboNodeMessage();
  virtual ~ReqComboNodeMessage();

  ReqComboNodeMessage(const ReqComboNodeMessage& from);
  ReqComboNodeMessage(ReqComboNodeMessage&& from) noexcept
    : ReqComboNodeMessage() {
    *this = ::std::move(from);
  }

  inline ReqComboNodeMessage& operator=(const ReqComboNodeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqComboNodeMessage& operator=(ReqComboNodeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqComboNodeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqComboNodeMessage* internal_default_instance() {
    return reinterpret_cast<const ReqComboNodeMessage*>(
               &_ReqComboNodeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReqComboNodeMessage* other);
  friend void swap(ReqComboNodeMessage& a, ReqComboNodeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqComboNodeMessage* New() const final {
    return CreateMaybeMessage<ReqComboNodeMessage>(nullptr);
  }

  ReqComboNodeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqComboNodeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqComboNodeMessage& from);
  void MergeFrom(const ReqComboNodeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqComboNodeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqComboNodeMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ComboNode = 1;
  void clear_combonode();
  static const int kComboNodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 combonode() const;
  void set_combonode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ReqComboNodeMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 combonode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqComboPostionDifMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqComboPostionDifMessage) */ {
 public:
  ReqComboPostionDifMessage();
  virtual ~ReqComboPostionDifMessage();

  ReqComboPostionDifMessage(const ReqComboPostionDifMessage& from);
  ReqComboPostionDifMessage(ReqComboPostionDifMessage&& from) noexcept
    : ReqComboPostionDifMessage() {
    *this = ::std::move(from);
  }

  inline ReqComboPostionDifMessage& operator=(const ReqComboPostionDifMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqComboPostionDifMessage& operator=(ReqComboPostionDifMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqComboPostionDifMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqComboPostionDifMessage* internal_default_instance() {
    return reinterpret_cast<const ReqComboPostionDifMessage*>(
               &_ReqComboPostionDifMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqComboPostionDifMessage* other);
  friend void swap(ReqComboPostionDifMessage& a, ReqComboPostionDifMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqComboPostionDifMessage* New() const final {
    return CreateMaybeMessage<ReqComboPostionDifMessage>(nullptr);
  }

  ReqComboPostionDifMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqComboPostionDifMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqComboPostionDifMessage& from);
  void MergeFrom(const ReqComboPostionDifMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqComboPostionDifMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqComboPostionDifMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_c2s_2eproto);
    return ::descriptor_table_c2s_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ReqComboPostionDifMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_c2s_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FPing

// float ctime = 1;
inline void FPing::clear_ctime() {
  ctime_ = 0;
}
inline float FPing::ctime() const {
  // @@protoc_insertion_point(field_get:FPing.ctime)
  return ctime_;
}
inline void FPing::set_ctime(float value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:FPing.ctime)
}

// -------------------------------------------------------------------

// FLogin

// string user = 1;
inline void FLogin::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FLogin::user() const {
  // @@protoc_insertion_point(field_get:FLogin.user)
  return user_.GetNoArena();
}
inline void FLogin::set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FLogin.user)
}
inline void FLogin::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FLogin.user)
}
inline void FLogin::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FLogin.user)
}
inline void FLogin::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FLogin.user)
}
inline std::string* FLogin::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:FLogin.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FLogin::release_user() {
  // @@protoc_insertion_point(field_release:FLogin.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FLogin::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:FLogin.user)
}

// string password = 2;
inline void FLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FLogin::password() const {
  // @@protoc_insertion_point(field_get:FLogin.password)
  return password_.GetNoArena();
}
inline void FLogin::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FLogin.password)
}
inline void FLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FLogin.password)
}
inline void FLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FLogin.password)
}
inline void FLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FLogin.password)
}
inline std::string* FLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:FLogin.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FLogin::release_password() {
  // @@protoc_insertion_point(field_release:FLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FLogin.password)
}

// -------------------------------------------------------------------

// Common

// int32 length = 1;
inline void Common::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Common::length() const {
  // @@protoc_insertion_point(field_get:Common.length)
  return length_;
}
inline void Common::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Common.length)
}

// int32 type = 2;
inline void Common::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Common::type() const {
  // @@protoc_insertion_point(field_get:Common.type)
  return type_;
}
inline void Common::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Common.type)
}

// bytes mark = 3;
inline void Common::clear_mark() {
  mark_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Common::mark() const {
  // @@protoc_insertion_point(field_get:Common.mark)
  return mark_.GetNoArena();
}
inline void Common::set_mark(const std::string& value) {
  
  mark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Common.mark)
}
inline void Common::set_mark(std::string&& value) {
  
  mark_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Common.mark)
}
inline void Common::set_mark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Common.mark)
}
inline void Common::set_mark(const void* value, size_t size) {
  
  mark_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Common.mark)
}
inline std::string* Common::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:Common.mark)
  return mark_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Common::release_mark() {
  // @@protoc_insertion_point(field_release:Common.mark)
  
  return mark_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Common::set_allocated_mark(std::string* mark) {
  if (mark != nullptr) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:Common.mark)
}

// string data = 4;
inline void Common::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Common::data() const {
  // @@protoc_insertion_point(field_get:Common.data)
  return data_.GetNoArena();
}
inline void Common::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Common.data)
}
inline void Common::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Common.data)
}
inline void Common::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Common.data)
}
inline void Common::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Common.data)
}
inline std::string* Common::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Common.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Common::release_data() {
  // @@protoc_insertion_point(field_release:Common.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Common::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Common.data)
}

// -------------------------------------------------------------------

// LoginReq

// string loginName = 1;
inline void LoginReq::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::loginname() const {
  // @@protoc_insertion_point(field_get:LoginReq.loginName)
  return loginname_.GetNoArena();
}
inline void LoginReq::set_loginname(const std::string& value) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.loginName)
}
inline void LoginReq::set_loginname(std::string&& value) {
  
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.loginName)
}
inline void LoginReq::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.loginName)
}
inline void LoginReq::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.loginName)
}
inline std::string* LoginReq::mutable_loginname() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.loginName)
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_loginname() {
  // @@protoc_insertion_point(field_release:LoginReq.loginName)
  
  return loginname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.loginName)
}

// int32 sid = 2;
inline void LoginReq::clear_sid() {
  sid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::sid() const {
  // @@protoc_insertion_point(field_get:LoginReq.sid)
  return sid_;
}
inline void LoginReq::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.sid)
}

// int32 pid = 3;
inline void LoginReq::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::pid() const {
  // @@protoc_insertion_point(field_get:LoginReq.pid)
  return pid_;
}
inline void LoginReq::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.pid)
}

// int32 client = 4;
inline void LoginReq::clear_client() {
  client_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::client() const {
  // @@protoc_insertion_point(field_get:LoginReq.client)
  return client_;
}
inline void LoginReq::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.client)
}

// string idNumber = 5;
inline void LoginReq::clear_idnumber() {
  idnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::idnumber() const {
  // @@protoc_insertion_point(field_get:LoginReq.idNumber)
  return idnumber_.GetNoArena();
}
inline void LoginReq::set_idnumber(const std::string& value) {
  
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.idNumber)
}
inline void LoginReq::set_idnumber(std::string&& value) {
  
  idnumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.idNumber)
}
inline void LoginReq::set_idnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.idNumber)
}
inline void LoginReq::set_idnumber(const char* value, size_t size) {
  
  idnumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.idNumber)
}
inline std::string* LoginReq::mutable_idnumber() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.idNumber)
  return idnumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_idnumber() {
  // @@protoc_insertion_point(field_release:LoginReq.idNumber)
  
  return idnumber_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_idnumber(std::string* idnumber) {
  if (idnumber != nullptr) {
    
  } else {
    
  }
  idnumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idnumber);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.idNumber)
}

// string ip = 6;
inline void LoginReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::ip() const {
  // @@protoc_insertion_point(field_get:LoginReq.ip)
  return ip_.GetNoArena();
}
inline void LoginReq::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.ip)
}
inline void LoginReq::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.ip)
}
inline void LoginReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.ip)
}
inline void LoginReq::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.ip)
}
inline std::string* LoginReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_ip() {
  // @@protoc_insertion_point(field_release:LoginReq.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.ip)
}

// int32 version = 7;
inline void LoginReq::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::version() const {
  // @@protoc_insertion_point(field_get:LoginReq.version)
  return version_;
}
inline void LoginReq::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.version)
}

// string channelId = 8;
inline void LoginReq::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::channelid() const {
  // @@protoc_insertion_point(field_get:LoginReq.channelId)
  return channelid_.GetNoArena();
}
inline void LoginReq::set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.channelId)
}
inline void LoginReq::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.channelId)
}
inline void LoginReq::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.channelId)
}
inline void LoginReq::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.channelId)
}
inline std::string* LoginReq::mutable_channelid() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.channelId)
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_channelid() {
  // @@protoc_insertion_point(field_release:LoginReq.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.channelId)
}

// string qudao = 9;
inline void LoginReq::clear_qudao() {
  qudao_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::qudao() const {
  // @@protoc_insertion_point(field_get:LoginReq.qudao)
  return qudao_.GetNoArena();
}
inline void LoginReq::set_qudao(const std::string& value) {
  
  qudao_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.qudao)
}
inline void LoginReq::set_qudao(std::string&& value) {
  
  qudao_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.qudao)
}
inline void LoginReq::set_qudao(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qudao_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.qudao)
}
inline void LoginReq::set_qudao(const char* value, size_t size) {
  
  qudao_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.qudao)
}
inline std::string* LoginReq::mutable_qudao() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.qudao)
  return qudao_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_qudao() {
  // @@protoc_insertion_point(field_release:LoginReq.qudao)
  
  return qudao_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_qudao(std::string* qudao) {
  if (qudao != nullptr) {
    
  } else {
    
  }
  qudao_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qudao);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.qudao)
}

// int32 isAdult = 10;
inline void LoginReq::clear_isadult() {
  isadult_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::isadult() const {
  // @@protoc_insertion_point(field_get:LoginReq.isAdult)
  return isadult_;
}
inline void LoginReq::set_isadult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isadult_ = value;
  // @@protoc_insertion_point(field_set:LoginReq.isAdult)
}

// string token = 11;
inline void LoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:LoginReq.token)
  return token_.GetNoArena();
}
inline void LoginReq::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginReq.token)
}
inline void LoginReq::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginReq.token)
}
inline void LoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginReq.token)
}
inline void LoginReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginReq.token)
}
inline std::string* LoginReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:LoginReq.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:LoginReq.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:LoginReq.token)
}

// -------------------------------------------------------------------

// ReqLoginInfoMessage

// -------------------------------------------------------------------

// ReqComboNodeMessage

// int32 ComboNode = 1;
inline void ReqComboNodeMessage::clear_combonode() {
  combonode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqComboNodeMessage::combonode() const {
  // @@protoc_insertion_point(field_get:ReqComboNodeMessage.ComboNode)
  return combonode_;
}
inline void ReqComboNodeMessage::set_combonode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  combonode_ = value;
  // @@protoc_insertion_point(field_set:ReqComboNodeMessage.ComboNode)
}

// -------------------------------------------------------------------

// ReqComboPostionDifMessage

// int32 X = 1;
inline void ReqComboPostionDifMessage::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqComboPostionDifMessage::x() const {
  // @@protoc_insertion_point(field_get:ReqComboPostionDifMessage.X)
  return x_;
}
inline void ReqComboPostionDifMessage::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ReqComboPostionDifMessage.X)
}

// int32 Y = 2;
inline void ReqComboPostionDifMessage::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqComboPostionDifMessage::y() const {
  // @@protoc_insertion_point(field_get:ReqComboPostionDifMessage.Y)
  return y_;
}
inline void ReqComboPostionDifMessage::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ReqComboPostionDifMessage.Y)
}

// int32 Z = 3;
inline void ReqComboPostionDifMessage::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqComboPostionDifMessage::z() const {
  // @@protoc_insertion_point(field_get:ReqComboPostionDifMessage.Z)
  return z_;
}
inline void ReqComboPostionDifMessage::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ReqComboPostionDifMessage.Z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_c2s_2eproto
