// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

#include "fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferInfo_fight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HurtTarget_fight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillMove_fight_2eproto;
namespace fightV2 {
class BufferInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BufferInfo> _instance;
} _BufferInfo_default_instance_;
class HurtTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HurtTarget> _instance;
} _HurtTarget_default_instance_;
class FightRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FightRequest> _instance;
} _FightRequest_default_instance_;
class FightTestContrllerNullDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FightTestContrllerNull> _instance;
} _FightTestContrllerNull_default_instance_;
class ResFightResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResFightResult> _instance;
} _ResFightResult_default_instance_;
class ResHpMpChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResHpMpChange> _instance;
} _ResHpMpChange_default_instance_;
class ResObjectDieDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResObjectDie> _instance;
} _ResObjectDie_default_instance_;
class ResPlayerTotalHpPercnetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerTotalHpPercnet> _instance;
} _ResPlayerTotalHpPercnet_default_instance_;
class ResInnerChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResInnerChange> _instance;
} _ResInnerChange_default_instance_;
class ResShouHuAttackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResShouHuAttack> _instance;
} _ResShouHuAttack_default_instance_;
class ResPlayerTotalMagicPercnetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResPlayerTotalMagicPercnet> _instance;
} _ResPlayerTotalMagicPercnet_default_instance_;
class ResBanCureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResBanCure> _instance;
} _ResBanCure_default_instance_;
class SkillMoveInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillMoveInfo> _instance;
} _SkillMoveInfo_default_instance_;
class SkillMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkillMove> _instance;
} _SkillMove_default_instance_;
class ComboNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComboNode> _instance;
} _ComboNode_default_instance_;
class ComboEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComboEnd> _instance;
} _ComboEnd_default_instance_;
}  // namespace fightV2
static void InitDefaultsscc_info_BufferInfo_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_BufferInfo_default_instance_;
    new (ptr) ::fightV2::BufferInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::BufferInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferInfo_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BufferInfo_fight_2eproto}, {}};

static void InitDefaultsscc_info_ComboEnd_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ComboEnd_default_instance_;
    new (ptr) ::fightV2::ComboEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ComboEnd::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComboEnd_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ComboEnd_fight_2eproto}, {}};

static void InitDefaultsscc_info_ComboNode_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ComboNode_default_instance_;
    new (ptr) ::fightV2::ComboNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ComboNode::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComboNode_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ComboNode_fight_2eproto}, {}};

static void InitDefaultsscc_info_FightRequest_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_FightRequest_default_instance_;
    new (ptr) ::fightV2::FightRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::FightRequest::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightRequest_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FightRequest_fight_2eproto}, {}};

static void InitDefaultsscc_info_FightTestContrllerNull_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_FightTestContrllerNull_default_instance_;
    new (ptr) ::fightV2::FightTestContrllerNull();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::FightTestContrllerNull::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightTestContrllerNull_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FightTestContrllerNull_fight_2eproto}, {}};

static void InitDefaultsscc_info_HurtTarget_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_HurtTarget_default_instance_;
    new (ptr) ::fightV2::HurtTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::HurtTarget::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HurtTarget_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HurtTarget_fight_2eproto}, {
      &scc_info_BufferInfo_fight_2eproto.base,}};

static void InitDefaultsscc_info_ResBanCure_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResBanCure_default_instance_;
    new (ptr) ::fightV2::ResBanCure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResBanCure::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResBanCure_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResBanCure_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResFightResult_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResFightResult_default_instance_;
    new (ptr) ::fightV2::ResFightResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResFightResult::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResFightResult_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResFightResult_fight_2eproto}, {
      &scc_info_HurtTarget_fight_2eproto.base,}};

static void InitDefaultsscc_info_ResHpMpChange_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResHpMpChange_default_instance_;
    new (ptr) ::fightV2::ResHpMpChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResHpMpChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResHpMpChange_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResHpMpChange_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResInnerChange_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResInnerChange_default_instance_;
    new (ptr) ::fightV2::ResInnerChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResInnerChange::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResInnerChange_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResInnerChange_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResObjectDie_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResObjectDie_default_instance_;
    new (ptr) ::fightV2::ResObjectDie();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResObjectDie::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResObjectDie_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResObjectDie_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerTotalHpPercnet_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResPlayerTotalHpPercnet_default_instance_;
    new (ptr) ::fightV2::ResPlayerTotalHpPercnet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResPlayerTotalHpPercnet::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerTotalHpPercnet_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerTotalHpPercnet_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResPlayerTotalMagicPercnet_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResPlayerTotalMagicPercnet_default_instance_;
    new (ptr) ::fightV2::ResPlayerTotalMagicPercnet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResPlayerTotalMagicPercnet::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResPlayerTotalMagicPercnet_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResPlayerTotalMagicPercnet_fight_2eproto}, {}};

static void InitDefaultsscc_info_ResShouHuAttack_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_ResShouHuAttack_default_instance_;
    new (ptr) ::fightV2::ResShouHuAttack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::ResShouHuAttack::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResShouHuAttack_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResShouHuAttack_fight_2eproto}, {}};

static void InitDefaultsscc_info_SkillMove_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_SkillMove_default_instance_;
    new (ptr) ::fightV2::SkillMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::SkillMove::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillMove_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SkillMove_fight_2eproto}, {}};

static void InitDefaultsscc_info_SkillMoveInfo_fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fightV2::_SkillMoveInfo_default_instance_;
    new (ptr) ::fightV2::SkillMoveInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fightV2::SkillMoveInfo::InitAsDefaultInstance();
}

PROTOBUF_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SkillMoveInfo_fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SkillMoveInfo_fight_2eproto}, {
      &scc_info_SkillMove_fight_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fight_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fight_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, bufferid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, bufferconfigid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, addtime_),
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, totaltime_),
  PROTOBUF_FIELD_OFFSET(::fightV2::BufferInfo, roleid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, targetid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, hp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, showhurt_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, inner_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, bufferlist_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, specatt_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, hurttype_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, effecttype_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, isdodge_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, iscritical_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, y_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, z_),
  PROTOBUF_FIELD_OFFSET(::fightV2::HurtTarget, targetdir_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, skillid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, targetid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, y_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, z_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, movex_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, movey_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, movez_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, targetx_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, targety_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, targetz_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, targetdir_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, comboid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, hitperformaceid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightRequest, controllerid_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  13,
  PROTOBUF_FIELD_OFFSET(::fightV2::FightTestContrllerNull, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::FightTestContrllerNull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::FightTestContrllerNull, targetid_),
  0,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, skillid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, attackerid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, targetid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, y_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, z_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, hurtlist_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, mp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, skillexp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, movex_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, movey_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, movez_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, comboid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, hitperformaceid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResFightResult, controllerid_),
  1,
  0,
  3,
  2,
  4,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, lid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, hp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, mp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, maxhp_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResHpMpChange, maxmp_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResObjectDie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResObjectDie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResObjectDie, lid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResObjectDie, killerid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalHpPercnet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalHpPercnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalHpPercnet, percent_),
  0,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResInnerChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResInnerChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResInnerChange, lid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResInnerChange, inner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResShouHuAttack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResShouHuAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResShouHuAttack, shouhuid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResShouHuAttack, ownerid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResShouHuAttack, buffid_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalMagicPercnet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalMagicPercnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResPlayerTotalMagicPercnet, percent_),
  0,
  PROTOBUF_FIELD_OFFSET(::fightV2::ResBanCure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ResBanCure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ResBanCure, targetid_),
  0,
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMoveInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMoveInfo, attackid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMoveInfo, type_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMoveInfo, moveinfo_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMove, targetid_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMove, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::SkillMove, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, combonode_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, id_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, dir_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, y_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, z_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, rockerx_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, rockery_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, controlleryaw_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, targetdir_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboNode, maxrotate_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, id_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, x_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, y_),
  PROTOBUF_FIELD_OFFSET(::fightV2::ComboEnd, z_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::fightV2::BufferInfo)},
  { 15, 34, sizeof(::fightV2::HurtTarget)},
  { 48, 68, sizeof(::fightV2::FightRequest)},
  { 83, 89, sizeof(::fightV2::FightTestContrllerNull)},
  { 90, 110, sizeof(::fightV2::ResFightResult)},
  { 125, 135, sizeof(::fightV2::ResHpMpChange)},
  { 140, 147, sizeof(::fightV2::ResObjectDie)},
  { 149, 155, sizeof(::fightV2::ResPlayerTotalHpPercnet)},
  { 156, 163, sizeof(::fightV2::ResInnerChange)},
  { 165, 173, sizeof(::fightV2::ResShouHuAttack)},
  { 176, 182, sizeof(::fightV2::ResPlayerTotalMagicPercnet)},
  { 183, 189, sizeof(::fightV2::ResBanCure)},
  { 190, 198, sizeof(::fightV2::SkillMoveInfo)},
  { 201, 209, sizeof(::fightV2::SkillMove)},
  { 212, 228, sizeof(::fightV2::ComboNode)},
  { 239, 248, sizeof(::fightV2::ComboEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_BufferInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_HurtTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_FightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_FightTestContrllerNull_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResFightResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResHpMpChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResObjectDie_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResPlayerTotalHpPercnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResInnerChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResShouHuAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResPlayerTotalMagicPercnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ResBanCure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_SkillMoveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_SkillMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ComboNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fightV2::_ComboEnd_default_instance_),
};

const char descriptor_table_protodef_fight_2eproto[] =
  "\n\013fight.proto\022\007fightV2\"j\n\nBufferInfo\022\020\n\010"
  "bufferId\030\001 \001(\005\022\026\n\016bufferConfigId\030\002 \001(\005\022\017"
  "\n\007addTime\030\003 \001(\003\022\021\n\ttotalTime\030\004 \001(\003\022\016\n\006ro"
  "leId\030\005 \001(\003\"\204\002\n\nHurtTarget\022\020\n\010targetId\030\001 "
  "\001(\003\022\n\n\002hp\030\002 \001(\003\022\020\n\010showHurt\030\003 \001(\003\022\r\n\005inn"
  "er\030\004 \001(\005\022\'\n\nbufferList\030\005 \003(\0132\023.fightV2.B"
  "ufferInfo\022\017\n\007specAtt\030\006 \001(\005\022\020\n\010hurtType\030\007"
  " \001(\005\022\022\n\neffectType\030\010 \001(\005\022\017\n\007isDodge\030\t \001("
  "\010\022\022\n\nisCritical\030\n \001(\010\022\t\n\001x\030\013 \001(\002\022\t\n\001y\030\014 "
  "\001(\002\022\t\n\001z\030\r \001(\002\022\021\n\ttargetDir\030\016 \001(\002\"\205\002\n\014Fi"
  "ghtRequest\022\017\n\007skillId\030\001 \002(\005\022\020\n\010targetId\030"
  "\002 \001(\003\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\r"
  "\n\005moveX\030\006 \001(\002\022\r\n\005moveY\030\007 \001(\002\022\r\n\005moveZ\030\010 "
  "\001(\002\022\017\n\007targetX\030\t \001(\002\022\017\n\007targetY\030\n \001(\002\022\017\n"
  "\007targetZ\030\013 \001(\002\022\021\n\ttargetDir\030\014 \001(\002\022\017\n\007com"
  "boId\030\r \001(\005\022\027\n\017hitPerformaceId\030\016 \001(\005\022\024\n\014c"
  "ontrollerId\030\017 \001(\003\"*\n\026FightTestContrllerN"
  "ull\022\020\n\010targetId\030\001 \001(\003\"\232\002\n\016ResFightResult"
  "\022\017\n\007skillId\030\001 \002(\005\022\022\n\nattackerId\030\002 \001(\003\022\020\n"
  "\010targetId\030\003 \001(\003\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n"
  "\001z\030\006 \001(\002\022%\n\010hurtList\030\007 \003(\0132\023.fightV2.Hur"
  "tTarget\022\n\n\002mp\030\010 \001(\005\022\020\n\010skillExp\030\t \001(\005\022\r\n"
  "\005moveX\030\n \001(\002\022\r\n\005moveY\030\013 \001(\002\022\r\n\005moveZ\030\014 \001"
  "(\002\022\017\n\007comboId\030\r \001(\005\022\027\n\017hitPerformaceId\030\016"
  " \001(\005\022\024\n\014controllerId\030\017 \001(\003\"R\n\rResHpMpCha"
  "nge\022\013\n\003lid\030\001 \002(\003\022\n\n\002hp\030\002 \001(\003\022\n\n\002mp\030\003 \001(\005"
  "\022\r\n\005maxHp\030\004 \001(\003\022\r\n\005maxMp\030\005 \001(\005\"-\n\014ResObj"
  "ectDie\022\013\n\003lid\030\001 \002(\003\022\020\n\010killerId\030\002 \002(\003\"*\n"
  "\027ResPlayerTotalHpPercnet\022\017\n\007percent\030\001 \002("
  "\014\",\n\016ResInnerChange\022\013\n\003lid\030\001 \002(\003\022\r\n\005inne"
  "r\030\002 \001(\003\"D\n\017ResShouHuAttack\022\020\n\010shouhuId\030\001"
  " \002(\005\022\017\n\007ownerId\030\002 \002(\003\022\016\n\006buffId\030\003 \001(\005\"-\n"
  "\032ResPlayerTotalMagicPercnet\022\017\n\007percent\030\001"
  " \002(\014\"\036\n\nResBanCure\022\020\n\010targetId\030\001 \002(\003\"U\n\r"
  "SkillMoveInfo\022\020\n\010attackId\030\001 \002(\003\022\014\n\004type\030"
  "\002 \001(\005\022$\n\010moveInfo\030\003 \003(\0132\022.fightV2.SkillM"
  "ove\"3\n\tSkillMove\022\020\n\010targetId\030\001 \002(\003\022\t\n\001x\030"
  "\002 \002(\005\022\t\n\001y\030\003 \002(\005\"\267\001\n\tComboNode\022\021\n\tcomboN"
  "ode\030\001 \002(\005\022\n\n\002id\030\002 \001(\003\022\013\n\003dir\030\003 \001(\002\022\t\n\001x\030"
  "\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022\017\n\007rockerX\030\007"
  " \001(\002\022\017\n\007rockerY\030\010 \001(\002\022\025\n\rcontrollerYaw\030\t"
  " \001(\002\022\021\n\ttargetDir\030\n \001(\002\022\021\n\tmaxRotate\030\013 \001"
  "(\002\"7\n\010ComboEnd\022\n\n\002id\030\001 \001(\003\022\t\n\001x\030\002 \001(\002\022\t\n"
  "\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002*\351\003\n\014PropertyType\022\t\n\005"
  "maxHp\020\001\022\t\n\005maxMp\020\002\022\021\n\rinnerPowerMax\020\003\022\020\n"
  "\014phyAttackMin\020\004\022\020\n\014phyAttackMax\020\005\022\022\n\016mag"
  "icAttackMin\020\006\022\022\n\016magicAttackMax\020\007\022\020\n\014tao"
  "AttackMin\020\010\022\020\n\014taoAttackMax\020\t\022\r\n\tphyDefM"
  "in\020\n\022\r\n\tphyDefMax\020\013\022\017\n\013magicDefMin\020\014\022\017\n\013"
  "magicDefMax\020\r\022\014\n\010critical\020\016\022\022\n\016criticalD"
  "amage\020\017\022\014\n\010accurate\020\020\022\t\n\005dodge\020\021\022\020\n\014heat"
  "hRecover\020\022\022\020\n\014magicRecover\020\023\022\025\n\021innerPow"
  "erRecover\020\024\022\010\n\004luck\020\025\022\022\n\016resistanceCrit\020"
  "\026\022\013\n\007hurtAdd\020\027\022\n\n\006relief\020\030\022\017\n\013innerRelie"
  "f\020\031\022\016\n\nholyAttack\020\032\022\017\n\013attackSpeed\020\033\022\t\n\005"
  "pkAtt\020\034\022\t\n\005pkDef\020\035\022\013\n\007nbValue\020\036B\037\n\021com.s"
  "h.game.protoB\nFightProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fight_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fight_2eproto_sccs[16] = {
  &scc_info_BufferInfo_fight_2eproto.base,
  &scc_info_ComboEnd_fight_2eproto.base,
  &scc_info_ComboNode_fight_2eproto.base,
  &scc_info_FightRequest_fight_2eproto.base,
  &scc_info_FightTestContrllerNull_fight_2eproto.base,
  &scc_info_HurtTarget_fight_2eproto.base,
  &scc_info_ResBanCure_fight_2eproto.base,
  &scc_info_ResFightResult_fight_2eproto.base,
  &scc_info_ResHpMpChange_fight_2eproto.base,
  &scc_info_ResInnerChange_fight_2eproto.base,
  &scc_info_ResObjectDie_fight_2eproto.base,
  &scc_info_ResPlayerTotalHpPercnet_fight_2eproto.base,
  &scc_info_ResPlayerTotalMagicPercnet_fight_2eproto.base,
  &scc_info_ResShouHuAttack_fight_2eproto.base,
  &scc_info_SkillMove_fight_2eproto.base,
  &scc_info_SkillMoveInfo_fight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fight_2eproto_once;
static bool descriptor_table_fight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fight_2eproto = {
  &descriptor_table_fight_2eproto_initialized, descriptor_table_protodef_fight_2eproto, "fight.proto", 2264,
  &descriptor_table_fight_2eproto_once, descriptor_table_fight_2eproto_sccs, descriptor_table_fight_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_fight_2eproto::offsets,
  file_level_metadata_fight_2eproto, 16, file_level_enum_descriptors_fight_2eproto, file_level_service_descriptors_fight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fight_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fight_2eproto), true);
namespace fightV2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fight_2eproto);
  return file_level_enum_descriptors_fight_2eproto[0];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BufferInfo::InitAsDefaultInstance() {
}
class BufferInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<BufferInfo>()._has_bits_);
  static void set_has_bufferid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bufferconfigid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totaltime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BufferInfo::kBufferIdFieldNumber;
const int BufferInfo::kBufferConfigIdFieldNumber;
const int BufferInfo::kAddTimeFieldNumber;
const int BufferInfo::kTotalTimeFieldNumber;
const int BufferInfo::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BufferInfo::BufferInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.BufferInfo)
}
BufferInfo::BufferInfo(const BufferInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bufferid_, &from.bufferid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&bufferid_)) + sizeof(roleid_));
  // @@protoc_insertion_point(copy_constructor:fightV2.BufferInfo)
}

void BufferInfo::SharedCtor() {
  ::memset(&bufferid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&bufferid_)) + sizeof(roleid_));
}

BufferInfo::~BufferInfo() {
  // @@protoc_insertion_point(destructor:fightV2.BufferInfo)
  SharedDtor();
}

void BufferInfo::SharedDtor() {
}

void BufferInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BufferInfo& BufferInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BufferInfo_fight_2eproto.base);
  return *internal_default_instance();
}


void BufferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.BufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bufferid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roleid_) -
        reinterpret_cast<char*>(&bufferid_)) + sizeof(roleid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BufferInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 bufferId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_bufferid(&has_bits);
          bufferid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bufferConfigId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_bufferconfigid(&has_bits);
          bufferconfigid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 addTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_addtime(&has_bits);
          addtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 totalTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_totaltime(&has_bits);
          totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 roleId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_roleid(&has_bits);
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BufferInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.BufferInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bufferId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bufferid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bufferConfigId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bufferconfigid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferconfigid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 addTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_addtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &addtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 totalTime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_totaltime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 roleId = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_roleid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.BufferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.BufferInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BufferInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.BufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bufferId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->bufferid(), output);
  }

  // optional int32 bufferConfigId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->bufferconfigid(), output);
  }

  // optional int64 addTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->addtime(), output);
  }

  // optional int64 totalTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->totaltime(), output);
  }

  // optional int64 roleId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->roleid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.BufferInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* BufferInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.BufferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bufferId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->bufferid(), target);
  }

  // optional int32 bufferConfigId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->bufferconfigid(), target);
  }

  // optional int64 addTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->addtime(), target);
  }

  // optional int64 totalTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->totaltime(), target);
  }

  // optional int64 roleId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->roleid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.BufferInfo)
  return target;
}

size_t BufferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.BufferInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 bufferId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bufferid());
    }

    // optional int32 bufferConfigId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bufferconfigid());
    }

    // optional int64 addTime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->addtime());
    }

    // optional int64 totalTime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->totaltime());
    }

    // optional int64 roleId = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BufferInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.BufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BufferInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BufferInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.BufferInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.BufferInfo)
    MergeFrom(*source);
  }
}

void BufferInfo::MergeFrom(const BufferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.BufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bufferid_ = from.bufferid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bufferconfigid_ = from.bufferconfigid_;
    }
    if (cached_has_bits & 0x00000004u) {
      addtime_ = from.addtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      totaltime_ = from.totaltime_;
    }
    if (cached_has_bits & 0x00000010u) {
      roleid_ = from.roleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BufferInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.BufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferInfo::CopyFrom(const BufferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.BufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferInfo::IsInitialized() const {
  return true;
}

void BufferInfo::Swap(BufferInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BufferInfo::InternalSwap(BufferInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bufferid_, other->bufferid_);
  swap(bufferconfigid_, other->bufferconfigid_);
  swap(addtime_, other->addtime_);
  swap(totaltime_, other->totaltime_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HurtTarget::InitAsDefaultInstance() {
}
class HurtTarget::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<HurtTarget>()._has_bits_);
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_showhurt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inner(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_specatt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hurttype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effecttype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isdodge(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_iscritical(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_targetdir(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HurtTarget::kTargetIdFieldNumber;
const int HurtTarget::kHpFieldNumber;
const int HurtTarget::kShowHurtFieldNumber;
const int HurtTarget::kInnerFieldNumber;
const int HurtTarget::kBufferListFieldNumber;
const int HurtTarget::kSpecAttFieldNumber;
const int HurtTarget::kHurtTypeFieldNumber;
const int HurtTarget::kEffectTypeFieldNumber;
const int HurtTarget::kIsDodgeFieldNumber;
const int HurtTarget::kIsCriticalFieldNumber;
const int HurtTarget::kXFieldNumber;
const int HurtTarget::kYFieldNumber;
const int HurtTarget::kZFieldNumber;
const int HurtTarget::kTargetDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HurtTarget::HurtTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.HurtTarget)
}
HurtTarget::HurtTarget(const HurtTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bufferlist_(from.bufferlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetid_, &from.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetdir_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(targetdir_));
  // @@protoc_insertion_point(copy_constructor:fightV2.HurtTarget)
}

void HurtTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HurtTarget_fight_2eproto.base);
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetdir_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(targetdir_));
}

HurtTarget::~HurtTarget() {
  // @@protoc_insertion_point(destructor:fightV2.HurtTarget)
  SharedDtor();
}

void HurtTarget::SharedDtor() {
}

void HurtTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HurtTarget& HurtTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HurtTarget_fight_2eproto.base);
  return *internal_default_instance();
}


void HurtTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.HurtTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bufferlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&targetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isdodge_) -
        reinterpret_cast<char*>(&targetid_)) + sizeof(isdodge_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&iscritical_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&targetdir_) -
        reinterpret_cast<char*>(&iscritical_)) + sizeof(targetdir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HurtTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 showHurt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_showhurt(&has_bits);
          showhurt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_inner(&has_bits);
          inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fightV2.BufferInfo bufferList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_bufferlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional int32 specAtt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          HasBitSetters::set_has_specatt(&has_bits);
          specatt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hurtType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          HasBitSetters::set_has_hurttype(&has_bits);
          hurttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 effectType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_effecttype(&has_bits);
          effecttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isDodge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_isdodge(&has_bits);
          isdodge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCritical = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          HasBitSetters::set_has_iscritical(&has_bits);
          iscritical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetDir = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          HasBitSetters::set_has_targetdir(&has_bits);
          targetdir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HurtTarget::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.HurtTarget)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 targetId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 showHurt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_showhurt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &showhurt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inner = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_inner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fightV2.BufferInfo bufferList = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_bufferlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 specAtt = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_specatt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &specatt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hurtType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_hurttype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 effectType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_effecttype(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isDodge = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_isdodge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdodge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isCritical = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_iscritical(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscritical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetDir = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_targetdir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.HurtTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.HurtTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HurtTarget::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.HurtTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }

  // optional int64 showHurt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->showhurt(), output);
  }

  // optional int32 inner = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->inner(), output);
  }

  // repeated .fightV2.BufferInfo bufferList = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bufferlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->bufferlist(static_cast<int>(i)),
      output);
  }

  // optional int32 specAtt = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->specatt(), output);
  }

  // optional int32 hurtType = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->hurttype(), output);
  }

  // optional int32 effectType = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->effecttype(), output);
  }

  // optional bool isDodge = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->isdodge(), output);
  }

  // optional bool isCritical = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->iscritical(), output);
  }

  // optional float x = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->x(), output);
  }

  // optional float y = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->y(), output);
  }

  // optional float z = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->z(), output);
  }

  // optional float targetDir = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->targetdir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.HurtTarget)
}

::PROTOBUF_NAMESPACE_ID::uint8* HurtTarget::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.HurtTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }

  // optional int64 showHurt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->showhurt(), target);
  }

  // optional int32 inner = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->inner(), target);
  }

  // repeated .fightV2.BufferInfo bufferList = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bufferlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->bufferlist(static_cast<int>(i)), target);
  }

  // optional int32 specAtt = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->specatt(), target);
  }

  // optional int32 hurtType = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->hurttype(), target);
  }

  // optional int32 effectType = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->effecttype(), target);
  }

  // optional bool isDodge = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->isdodge(), target);
  }

  // optional bool isCritical = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->iscritical(), target);
  }

  // optional float x = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->x(), target);
  }

  // optional float y = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->y(), target);
  }

  // optional float z = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->z(), target);
  }

  // optional float targetDir = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->targetdir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.HurtTarget)
  return target;
}

size_t HurtTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.HurtTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fightV2.BufferInfo bufferList = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->bufferlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->bufferlist(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 targetId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional int64 hp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 showHurt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->showhurt());
    }

    // optional int32 inner = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->inner());
    }

    // optional int32 specAtt = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->specatt());
    }

    // optional int32 hurtType = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hurttype());
    }

    // optional int32 effectType = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // optional bool isDodge = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool isCritical = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float x = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float y = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float z = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float targetDir = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HurtTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.HurtTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const HurtTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HurtTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.HurtTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.HurtTarget)
    MergeFrom(*source);
  }
}

void HurtTarget::MergeFrom(const HurtTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.HurtTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bufferlist_.MergeFrom(from.bufferlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      showhurt_ = from.showhurt_;
    }
    if (cached_has_bits & 0x00000008u) {
      inner_ = from.inner_;
    }
    if (cached_has_bits & 0x00000010u) {
      specatt_ = from.specatt_;
    }
    if (cached_has_bits & 0x00000020u) {
      hurttype_ = from.hurttype_;
    }
    if (cached_has_bits & 0x00000040u) {
      effecttype_ = from.effecttype_;
    }
    if (cached_has_bits & 0x00000080u) {
      isdodge_ = from.isdodge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      iscritical_ = from.iscritical_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000800u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00001000u) {
      targetdir_ = from.targetdir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HurtTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.HurtTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtTarget::CopyFrom(const HurtTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.HurtTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtTarget::IsInitialized() const {
  return true;
}

void HurtTarget::Swap(HurtTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HurtTarget::InternalSwap(HurtTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&bufferlist_)->InternalSwap(CastToBase(&other->bufferlist_));
  swap(targetid_, other->targetid_);
  swap(hp_, other->hp_);
  swap(showhurt_, other->showhurt_);
  swap(inner_, other->inner_);
  swap(specatt_, other->specatt_);
  swap(hurttype_, other->hurttype_);
  swap(effecttype_, other->effecttype_);
  swap(isdodge_, other->isdodge_);
  swap(iscritical_, other->iscritical_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(targetdir_, other->targetdir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HurtTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FightRequest::InitAsDefaultInstance() {
}
class FightRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<FightRequest>()._has_bits_);
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_movex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_movey(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_movez(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_targetx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_targety(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_targetz(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_targetdir(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_comboid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_hitperformaceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_controllerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRequest::kSkillIdFieldNumber;
const int FightRequest::kTargetIdFieldNumber;
const int FightRequest::kXFieldNumber;
const int FightRequest::kYFieldNumber;
const int FightRequest::kZFieldNumber;
const int FightRequest::kMoveXFieldNumber;
const int FightRequest::kMoveYFieldNumber;
const int FightRequest::kMoveZFieldNumber;
const int FightRequest::kTargetXFieldNumber;
const int FightRequest::kTargetYFieldNumber;
const int FightRequest::kTargetZFieldNumber;
const int FightRequest::kTargetDirFieldNumber;
const int FightRequest::kComboIdFieldNumber;
const int FightRequest::kHitPerformaceIdFieldNumber;
const int FightRequest::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRequest::FightRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.FightRequest)
}
FightRequest::FightRequest(const FightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetid_, &from.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hitperformaceid_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(hitperformaceid_));
  // @@protoc_insertion_point(copy_constructor:fightV2.FightRequest)
}

void FightRequest::SharedCtor() {
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitperformaceid_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(hitperformaceid_));
}

FightRequest::~FightRequest() {
  // @@protoc_insertion_point(destructor:fightV2.FightRequest)
  SharedDtor();
}

void FightRequest::SharedDtor() {
}

void FightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FightRequest& FightRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FightRequest_fight_2eproto.base);
  return *internal_default_instance();
}


void FightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.FightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&targetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&movez_) -
        reinterpret_cast<char*>(&targetid_)) + sizeof(movez_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&targetx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hitperformaceid_) -
        reinterpret_cast<char*>(&targetx_)) + sizeof(hitperformaceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 skillId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 targetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moveX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_movex(&has_bits);
          movex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moveY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_movey(&has_bits);
          movey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moveZ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_movez(&has_bits);
          movez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_targetx(&has_bits);
          targetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_targety(&has_bits);
          targety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetZ = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          HasBitSetters::set_has_targetz(&has_bits);
          targetz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetDir = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          HasBitSetters::set_has_targetdir(&has_bits);
          targetdir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 comboId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_comboid(&has_bits);
          comboid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hitPerformaceId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          HasBitSetters::set_has_hitperformaceid(&has_bits);
          hitperformaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 controllerId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          HasBitSetters::set_has_controllerid(&has_bits);
          controllerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FightRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.FightRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_skillid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 targetId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveX = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_movex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveY = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_movey(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveZ = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_movez(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetX = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_targetx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetY = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_targety(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targety_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetZ = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_targetz(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetDir = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_targetdir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comboId = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_comboid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &comboid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hitPerformaceId = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_hitperformaceid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitperformaceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 controllerId = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_controllerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &controllerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.FightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.FightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FightRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.FightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 skillId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int64 targetId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->targetid(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional float moveX = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->movex(), output);
  }

  // optional float moveY = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->movey(), output);
  }

  // optional float moveZ = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->movez(), output);
  }

  // optional float targetX = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->targetx(), output);
  }

  // optional float targetY = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->targety(), output);
  }

  // optional float targetZ = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->targetz(), output);
  }

  // optional float targetDir = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->targetdir(), output);
  }

  // optional int32 comboId = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->comboid(), output);
  }

  // optional int32 hitPerformaceId = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->hitperformaceid(), output);
  }

  // optional int64 controllerId = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->controllerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.FightRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FightRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.FightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 skillId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int64 targetId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->targetid(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // optional float moveX = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->movex(), target);
  }

  // optional float moveY = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->movey(), target);
  }

  // optional float moveZ = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->movez(), target);
  }

  // optional float targetX = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->targetx(), target);
  }

  // optional float targetY = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->targety(), target);
  }

  // optional float targetZ = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->targetz(), target);
  }

  // optional float targetDir = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->targetdir(), target);
  }

  // optional int32 comboId = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->comboid(), target);
  }

  // optional int32 hitPerformaceId = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->hitperformaceid(), target);
  }

  // optional int64 controllerId = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->controllerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.FightRequest)
  return target;
}

size_t FightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.FightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 skillId = 1;
  if (has_skillid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->skillid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 targetId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->targetid());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float moveX = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float moveY = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float moveZ = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float targetX = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float targetY = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float targetZ = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float targetDir = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 comboId = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->comboid());
    }

    // optional int64 controllerId = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->controllerid());
    }

    // optional int32 hitPerformaceId = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hitperformaceid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.FightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.FightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.FightRequest)
    MergeFrom(*source);
  }
}

void FightRequest::MergeFrom(const FightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.FightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      movex_ = from.movex_;
    }
    if (cached_has_bits & 0x00000040u) {
      movey_ = from.movey_;
    }
    if (cached_has_bits & 0x00000080u) {
      movez_ = from.movez_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      targetx_ = from.targetx_;
    }
    if (cached_has_bits & 0x00000200u) {
      targety_ = from.targety_;
    }
    if (cached_has_bits & 0x00000400u) {
      targetz_ = from.targetz_;
    }
    if (cached_has_bits & 0x00000800u) {
      targetdir_ = from.targetdir_;
    }
    if (cached_has_bits & 0x00001000u) {
      comboid_ = from.comboid_;
    }
    if (cached_has_bits & 0x00002000u) {
      controllerid_ = from.controllerid_;
    }
    if (cached_has_bits & 0x00004000u) {
      hitperformaceid_ = from.hitperformaceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.FightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRequest::CopyFrom(const FightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.FightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void FightRequest::Swap(FightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRequest::InternalSwap(FightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetid_, other->targetid_);
  swap(skillid_, other->skillid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(movex_, other->movex_);
  swap(movey_, other->movey_);
  swap(movez_, other->movez_);
  swap(targetx_, other->targetx_);
  swap(targety_, other->targety_);
  swap(targetz_, other->targetz_);
  swap(targetdir_, other->targetdir_);
  swap(comboid_, other->comboid_);
  swap(controllerid_, other->controllerid_);
  swap(hitperformaceid_, other->hitperformaceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FightTestContrllerNull::InitAsDefaultInstance() {
}
class FightTestContrllerNull::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<FightTestContrllerNull>()._has_bits_);
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightTestContrllerNull::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightTestContrllerNull::FightTestContrllerNull()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.FightTestContrllerNull)
}
FightTestContrllerNull::FightTestContrllerNull(const FightTestContrllerNull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:fightV2.FightTestContrllerNull)
}

void FightTestContrllerNull::SharedCtor() {
  targetid_ = PROTOBUF_LONGLONG(0);
}

FightTestContrllerNull::~FightTestContrllerNull() {
  // @@protoc_insertion_point(destructor:fightV2.FightTestContrllerNull)
  SharedDtor();
}

void FightTestContrllerNull::SharedDtor() {
}

void FightTestContrllerNull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FightTestContrllerNull& FightTestContrllerNull::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FightTestContrllerNull_fight_2eproto.base);
  return *internal_default_instance();
}


void FightTestContrllerNull::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.FightTestContrllerNull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FightTestContrllerNull::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FightTestContrllerNull::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.FightTestContrllerNull)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 targetId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.FightTestContrllerNull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.FightTestContrllerNull)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FightTestContrllerNull::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.FightTestContrllerNull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.FightTestContrllerNull)
}

::PROTOBUF_NAMESPACE_ID::uint8* FightTestContrllerNull::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.FightTestContrllerNull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.FightTestContrllerNull)
  return target;
}

size_t FightTestContrllerNull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.FightTestContrllerNull)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 targetId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->targetid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FightTestContrllerNull::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.FightTestContrllerNull)
  GOOGLE_DCHECK_NE(&from, this);
  const FightTestContrllerNull* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FightTestContrllerNull>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.FightTestContrllerNull)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.FightTestContrllerNull)
    MergeFrom(*source);
  }
}

void FightTestContrllerNull::MergeFrom(const FightTestContrllerNull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.FightTestContrllerNull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetid()) {
    set_targetid(from.targetid());
  }
}

void FightTestContrllerNull::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.FightTestContrllerNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightTestContrllerNull::CopyFrom(const FightTestContrllerNull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.FightTestContrllerNull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightTestContrllerNull::IsInitialized() const {
  return true;
}

void FightTestContrllerNull::Swap(FightTestContrllerNull* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightTestContrllerNull::InternalSwap(FightTestContrllerNull* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FightTestContrllerNull::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResFightResult::InitAsDefaultInstance() {
}
class ResFightResult::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResFightResult>()._has_bits_);
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attackerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_skillexp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_movex(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_movey(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_movez(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_comboid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hitperformaceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_controllerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResFightResult::kSkillIdFieldNumber;
const int ResFightResult::kAttackerIdFieldNumber;
const int ResFightResult::kTargetIdFieldNumber;
const int ResFightResult::kXFieldNumber;
const int ResFightResult::kYFieldNumber;
const int ResFightResult::kZFieldNumber;
const int ResFightResult::kHurtListFieldNumber;
const int ResFightResult::kMpFieldNumber;
const int ResFightResult::kSkillExpFieldNumber;
const int ResFightResult::kMoveXFieldNumber;
const int ResFightResult::kMoveYFieldNumber;
const int ResFightResult::kMoveZFieldNumber;
const int ResFightResult::kComboIdFieldNumber;
const int ResFightResult::kHitPerformaceIdFieldNumber;
const int ResFightResult::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResFightResult::ResFightResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResFightResult)
}
ResFightResult::ResFightResult(const ResFightResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hurtlist_(from.hurtlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attackerid_, &from.attackerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hitperformaceid_) -
    reinterpret_cast<char*>(&attackerid_)) + sizeof(hitperformaceid_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ResFightResult)
}

void ResFightResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResFightResult_fight_2eproto.base);
  ::memset(&attackerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitperformaceid_) -
      reinterpret_cast<char*>(&attackerid_)) + sizeof(hitperformaceid_));
}

ResFightResult::~ResFightResult() {
  // @@protoc_insertion_point(destructor:fightV2.ResFightResult)
  SharedDtor();
}

void ResFightResult::SharedDtor() {
}

void ResFightResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResFightResult& ResFightResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResFightResult_fight_2eproto.base);
  return *internal_default_instance();
}


void ResFightResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResFightResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hurtlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&attackerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillexp_) -
        reinterpret_cast<char*>(&attackerid_)) + sizeof(skillexp_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&movex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hitperformaceid_) -
        reinterpret_cast<char*>(&movex_)) + sizeof(hitperformaceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResFightResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 skillId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 attackerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_attackerid(&has_bits);
          attackerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 targetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .fightV2.HurtTarget hurtList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_hurtlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int32 mp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 skillExp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          HasBitSetters::set_has_skillexp(&has_bits);
          skillexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float moveX = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_movex(&has_bits);
          movex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moveY = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          HasBitSetters::set_has_movey(&has_bits);
          movey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float moveZ = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          HasBitSetters::set_has_movez(&has_bits);
          movez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 comboId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          HasBitSetters::set_has_comboid(&has_bits);
          comboid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hitPerformaceId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          HasBitSetters::set_has_hitperformaceid(&has_bits);
          hitperformaceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 controllerId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          HasBitSetters::set_has_controllerid(&has_bits);
          controllerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResFightResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResFightResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_skillid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 attackerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_attackerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 targetId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fightV2.HurtTarget hurtList = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_hurtlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_mp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skillExp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_skillexp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveX = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_movex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveY = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_movey(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moveZ = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_movez(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 comboId = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_comboid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &comboid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hitPerformaceId = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_hitperformaceid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitperformaceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 controllerId = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_controllerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &controllerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResFightResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResFightResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResFightResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResFightResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 skillId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int64 attackerId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->attackerid(), output);
  }

  // optional int64 targetId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->targetid(), output);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // repeated .fightV2.HurtTarget hurtList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hurtlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->hurtlist(static_cast<int>(i)),
      output);
  }

  // optional int32 mp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->mp(), output);
  }

  // optional int32 skillExp = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->skillexp(), output);
  }

  // optional float moveX = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->movex(), output);
  }

  // optional float moveY = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->movey(), output);
  }

  // optional float moveZ = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->movez(), output);
  }

  // optional int32 comboId = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->comboid(), output);
  }

  // optional int32 hitPerformaceId = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->hitperformaceid(), output);
  }

  // optional int64 controllerId = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->controllerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResFightResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResFightResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResFightResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 skillId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int64 attackerId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->attackerid(), target);
  }

  // optional int64 targetId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->targetid(), target);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // repeated .fightV2.HurtTarget hurtList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hurtlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->hurtlist(static_cast<int>(i)), target);
  }

  // optional int32 mp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->mp(), target);
  }

  // optional int32 skillExp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->skillexp(), target);
  }

  // optional float moveX = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->movex(), target);
  }

  // optional float moveY = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->movey(), target);
  }

  // optional float moveZ = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->movez(), target);
  }

  // optional int32 comboId = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->comboid(), target);
  }

  // optional int32 hitPerformaceId = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->hitperformaceid(), target);
  }

  // optional int64 controllerId = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->controllerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResFightResult)
  return target;
}

size_t ResFightResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResFightResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 skillId = 1;
  if (has_skillid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->skillid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fightV2.HurtTarget hurtList = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->hurtlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->hurtlist(static_cast<int>(i)));
    }
  }

  // optional int64 attackerId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->attackerid());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional float x = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int64 targetId = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional float y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 mp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 skillExp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->skillexp());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float moveX = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float moveY = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float moveZ = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 comboId = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->comboid());
    }

    // optional int64 controllerId = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->controllerid());
    }

    // optional int32 hitPerformaceId = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hitperformaceid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResFightResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResFightResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ResFightResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResFightResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResFightResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResFightResult)
    MergeFrom(*source);
  }
}

void ResFightResult::MergeFrom(const ResFightResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResFightResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hurtlist_.MergeFrom(from.hurtlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      attackerid_ = from.attackerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00000080u) {
      skillexp_ = from.skillexp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      movex_ = from.movex_;
    }
    if (cached_has_bits & 0x00000200u) {
      movey_ = from.movey_;
    }
    if (cached_has_bits & 0x00000400u) {
      movez_ = from.movez_;
    }
    if (cached_has_bits & 0x00000800u) {
      comboid_ = from.comboid_;
    }
    if (cached_has_bits & 0x00001000u) {
      controllerid_ = from.controllerid_;
    }
    if (cached_has_bits & 0x00002000u) {
      hitperformaceid_ = from.hitperformaceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResFightResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResFightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResFightResult::CopyFrom(const ResFightResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResFightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResFightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ResFightResult::Swap(ResFightResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResFightResult::InternalSwap(ResFightResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&hurtlist_)->InternalSwap(CastToBase(&other->hurtlist_));
  swap(attackerid_, other->attackerid_);
  swap(skillid_, other->skillid_);
  swap(x_, other->x_);
  swap(targetid_, other->targetid_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(mp_, other->mp_);
  swap(skillexp_, other->skillexp_);
  swap(movex_, other->movex_);
  swap(movey_, other->movey_);
  swap(movez_, other->movez_);
  swap(comboid_, other->comboid_);
  swap(controllerid_, other->controllerid_);
  swap(hitperformaceid_, other->hitperformaceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResFightResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResHpMpChange::InitAsDefaultInstance() {
}
class ResHpMpChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResHpMpChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResHpMpChange::kLidFieldNumber;
const int ResHpMpChange::kHpFieldNumber;
const int ResHpMpChange::kMpFieldNumber;
const int ResHpMpChange::kMaxHpFieldNumber;
const int ResHpMpChange::kMaxMpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResHpMpChange::ResHpMpChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResHpMpChange)
}
ResHpMpChange::ResHpMpChange(const ResHpMpChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(maxmp_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ResHpMpChange)
}

void ResHpMpChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxmp_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(maxmp_));
}

ResHpMpChange::~ResHpMpChange() {
  // @@protoc_insertion_point(destructor:fightV2.ResHpMpChange)
  SharedDtor();
}

void ResHpMpChange::SharedDtor() {
}

void ResHpMpChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResHpMpChange& ResHpMpChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResHpMpChange_fight_2eproto.base);
  return *internal_default_instance();
}


void ResHpMpChange::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResHpMpChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxmp_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(maxmp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResHpMpChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 maxHp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxMp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          HasBitSetters::set_has_maxmp(&has_bits);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResHpMpChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResHpMpChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_mp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxHp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_maxhp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxMp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_maxmp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResHpMpChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResHpMpChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResHpMpChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResHpMpChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }

  // optional int32 mp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // optional int64 maxHp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->maxhp(), output);
  }

  // optional int32 maxMp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->maxmp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResHpMpChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResHpMpChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResHpMpChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }

  // optional int32 mp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // optional int64 maxHp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->maxhp(), target);
  }

  // optional int32 maxMp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->maxmp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResHpMpChange)
  return target;
}

size_t ResHpMpChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResHpMpChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 lid = 1;
  if (has_lid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int64 hp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 maxHp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional int32 mp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 maxMp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->maxmp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResHpMpChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResHpMpChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResHpMpChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResHpMpChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResHpMpChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResHpMpChange)
    MergeFrom(*source);
  }
}

void ResHpMpChange::MergeFrom(const ResHpMpChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResHpMpChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxmp_ = from.maxmp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResHpMpChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResHpMpChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHpMpChange::CopyFrom(const ResHpMpChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResHpMpChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHpMpChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResHpMpChange::Swap(ResHpMpChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResHpMpChange::InternalSwap(ResHpMpChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(mp_, other->mp_);
  swap(maxmp_, other->maxmp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResHpMpChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResObjectDie::InitAsDefaultInstance() {
}
class ResObjectDie::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResObjectDie>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_killerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResObjectDie::kLidFieldNumber;
const int ResObjectDie::kKillerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResObjectDie::ResObjectDie()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResObjectDie)
}
ResObjectDie::ResObjectDie(const ResObjectDie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&killerid_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(killerid_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ResObjectDie)
}

void ResObjectDie::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killerid_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(killerid_));
}

ResObjectDie::~ResObjectDie() {
  // @@protoc_insertion_point(destructor:fightV2.ResObjectDie)
  SharedDtor();
}

void ResObjectDie::SharedDtor() {
}

void ResObjectDie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResObjectDie& ResObjectDie::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResObjectDie_fight_2eproto.base);
  return *internal_default_instance();
}


void ResObjectDie::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResObjectDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killerid_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(killerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResObjectDie::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 killerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_killerid(&has_bits);
          killerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResObjectDie::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResObjectDie)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 killerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_killerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &killerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResObjectDie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResObjectDie)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResObjectDie::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResObjectDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // required int64 killerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->killerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResObjectDie)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResObjectDie::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResObjectDie)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // required int64 killerId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->killerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResObjectDie)
  return target;
}

size_t ResObjectDie::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fightV2.ResObjectDie)
  size_t total_size = 0;

  if (has_lid()) {
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }

  if (has_killerid()) {
    // required int64 killerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->killerid());
  }

  return total_size;
}
size_t ResObjectDie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResObjectDie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 lid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());

    // required int64 killerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->killerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResObjectDie::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResObjectDie)
  GOOGLE_DCHECK_NE(&from, this);
  const ResObjectDie* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResObjectDie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResObjectDie)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResObjectDie)
    MergeFrom(*source);
  }
}

void ResObjectDie::MergeFrom(const ResObjectDie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResObjectDie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      killerid_ = from.killerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResObjectDie::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResObjectDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResObjectDie::CopyFrom(const ResObjectDie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResObjectDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResObjectDie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResObjectDie::Swap(ResObjectDie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResObjectDie::InternalSwap(ResObjectDie* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(killerid_, other->killerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResObjectDie::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerTotalHpPercnet::InitAsDefaultInstance() {
}
class ResPlayerTotalHpPercnet::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerTotalHpPercnet>()._has_bits_);
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerTotalHpPercnet::kPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerTotalHpPercnet::ResPlayerTotalHpPercnet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResPlayerTotalHpPercnet)
}
ResPlayerTotalHpPercnet::ResPlayerTotalHpPercnet(const ResPlayerTotalHpPercnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_percent()) {
    percent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.percent_);
  }
  // @@protoc_insertion_point(copy_constructor:fightV2.ResPlayerTotalHpPercnet)
}

void ResPlayerTotalHpPercnet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResPlayerTotalHpPercnet_fight_2eproto.base);
  percent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResPlayerTotalHpPercnet::~ResPlayerTotalHpPercnet() {
  // @@protoc_insertion_point(destructor:fightV2.ResPlayerTotalHpPercnet)
  SharedDtor();
}

void ResPlayerTotalHpPercnet::SharedDtor() {
  percent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResPlayerTotalHpPercnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerTotalHpPercnet& ResPlayerTotalHpPercnet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerTotalHpPercnet_fight_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerTotalHpPercnet::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResPlayerTotalHpPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    percent_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerTotalHpPercnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_percent(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerTotalHpPercnet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResPlayerTotalHpPercnet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes percent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResPlayerTotalHpPercnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResPlayerTotalHpPercnet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerTotalHpPercnet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResPlayerTotalHpPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes percent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResPlayerTotalHpPercnet)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerTotalHpPercnet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResPlayerTotalHpPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResPlayerTotalHpPercnet)
  return target;
}

size_t ResPlayerTotalHpPercnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResPlayerTotalHpPercnet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes percent = 1;
  if (has_percent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->percent());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerTotalHpPercnet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResPlayerTotalHpPercnet)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerTotalHpPercnet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerTotalHpPercnet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResPlayerTotalHpPercnet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResPlayerTotalHpPercnet)
    MergeFrom(*source);
  }
}

void ResPlayerTotalHpPercnet::MergeFrom(const ResPlayerTotalHpPercnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResPlayerTotalHpPercnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_percent()) {
    _has_bits_[0] |= 0x00000001u;
    percent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.percent_);
  }
}

void ResPlayerTotalHpPercnet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResPlayerTotalHpPercnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerTotalHpPercnet::CopyFrom(const ResPlayerTotalHpPercnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResPlayerTotalHpPercnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerTotalHpPercnet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResPlayerTotalHpPercnet::Swap(ResPlayerTotalHpPercnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerTotalHpPercnet::InternalSwap(ResPlayerTotalHpPercnet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  percent_.Swap(&other->percent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerTotalHpPercnet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResInnerChange::InitAsDefaultInstance() {
}
class ResInnerChange::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResInnerChange>()._has_bits_);
  static void set_has_lid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResInnerChange::kLidFieldNumber;
const int ResInnerChange::kInnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResInnerChange::ResInnerChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResInnerChange)
}
ResInnerChange::ResInnerChange(const ResInnerChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lid_, &from.lid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inner_) -
    reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ResInnerChange)
}

void ResInnerChange::SharedCtor() {
  ::memset(&lid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_) -
      reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
}

ResInnerChange::~ResInnerChange() {
  // @@protoc_insertion_point(destructor:fightV2.ResInnerChange)
  SharedDtor();
}

void ResInnerChange::SharedDtor() {
}

void ResInnerChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResInnerChange& ResInnerChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResInnerChange_fight_2eproto.base);
  return *internal_default_instance();
}


void ResInnerChange::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResInnerChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inner_) -
        reinterpret_cast<char*>(&lid_)) + sizeof(inner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResInnerChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 lid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lid(&has_bits);
          lid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 inner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_inner(&has_bits);
          inner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResInnerChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResInnerChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 inner = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_inner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &inner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResInnerChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResInnerChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResInnerChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResInnerChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lid(), output);
  }

  // optional int64 inner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->inner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResInnerChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResInnerChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResInnerChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 lid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lid(), target);
  }

  // optional int64 inner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->inner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResInnerChange)
  return target;
}

size_t ResInnerChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResInnerChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 lid = 1;
  if (has_lid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 inner = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->inner());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResInnerChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResInnerChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ResInnerChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResInnerChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResInnerChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResInnerChange)
    MergeFrom(*source);
  }
}

void ResInnerChange::MergeFrom(const ResInnerChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResInnerChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lid_ = from.lid_;
    }
    if (cached_has_bits & 0x00000002u) {
      inner_ = from.inner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResInnerChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResInnerChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResInnerChange::CopyFrom(const ResInnerChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResInnerChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResInnerChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResInnerChange::Swap(ResInnerChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResInnerChange::InternalSwap(ResInnerChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lid_, other->lid_);
  swap(inner_, other->inner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResInnerChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResShouHuAttack::InitAsDefaultInstance() {
}
class ResShouHuAttack::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResShouHuAttack>()._has_bits_);
  static void set_has_shouhuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ownerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buffid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResShouHuAttack::kShouhuIdFieldNumber;
const int ResShouHuAttack::kOwnerIdFieldNumber;
const int ResShouHuAttack::kBuffIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResShouHuAttack::ResShouHuAttack()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResShouHuAttack)
}
ResShouHuAttack::ResShouHuAttack(const ResShouHuAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ownerid_, &from.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffid_) -
    reinterpret_cast<char*>(&ownerid_)) + sizeof(buffid_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ResShouHuAttack)
}

void ResShouHuAttack::SharedCtor() {
  ::memset(&ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffid_) -
      reinterpret_cast<char*>(&ownerid_)) + sizeof(buffid_));
}

ResShouHuAttack::~ResShouHuAttack() {
  // @@protoc_insertion_point(destructor:fightV2.ResShouHuAttack)
  SharedDtor();
}

void ResShouHuAttack::SharedDtor() {
}

void ResShouHuAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResShouHuAttack& ResShouHuAttack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResShouHuAttack_fight_2eproto.base);
  return *internal_default_instance();
}


void ResShouHuAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResShouHuAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ownerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffid_) -
        reinterpret_cast<char*>(&ownerid_)) + sizeof(buffid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResShouHuAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 shouhuId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_shouhuid(&has_bits);
          shouhuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 ownerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_ownerid(&has_bits);
          ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 buffId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_buffid(&has_bits);
          buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResShouHuAttack::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResShouHuAttack)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shouhuId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_shouhuid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &shouhuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 ownerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ownerid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buffId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_buffid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResShouHuAttack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResShouHuAttack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResShouHuAttack::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResShouHuAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 shouhuId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->shouhuid(), output);
  }

  // required int64 ownerId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ownerid(), output);
  }

  // optional int32 buffId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->buffid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResShouHuAttack)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResShouHuAttack::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResShouHuAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 shouhuId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->shouhuid(), target);
  }

  // required int64 ownerId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->ownerid(), target);
  }

  // optional int32 buffId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->buffid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResShouHuAttack)
  return target;
}

size_t ResShouHuAttack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fightV2.ResShouHuAttack)
  size_t total_size = 0;

  if (has_ownerid()) {
    // required int64 ownerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ownerid());
  }

  if (has_shouhuid()) {
    // required int32 shouhuId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->shouhuid());
  }

  return total_size;
}
size_t ResShouHuAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResShouHuAttack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 ownerId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ownerid());

    // required int32 shouhuId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->shouhuid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 buffId = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->buffid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResShouHuAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResShouHuAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const ResShouHuAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResShouHuAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResShouHuAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResShouHuAttack)
    MergeFrom(*source);
  }
}

void ResShouHuAttack::MergeFrom(const ResShouHuAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResShouHuAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ownerid_ = from.ownerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      shouhuid_ = from.shouhuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      buffid_ = from.buffid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResShouHuAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResShouHuAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResShouHuAttack::CopyFrom(const ResShouHuAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResShouHuAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResShouHuAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ResShouHuAttack::Swap(ResShouHuAttack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResShouHuAttack::InternalSwap(ResShouHuAttack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ownerid_, other->ownerid_);
  swap(shouhuid_, other->shouhuid_);
  swap(buffid_, other->buffid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResShouHuAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResPlayerTotalMagicPercnet::InitAsDefaultInstance() {
}
class ResPlayerTotalMagicPercnet::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResPlayerTotalMagicPercnet>()._has_bits_);
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResPlayerTotalMagicPercnet::kPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResPlayerTotalMagicPercnet::ResPlayerTotalMagicPercnet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResPlayerTotalMagicPercnet)
}
ResPlayerTotalMagicPercnet::ResPlayerTotalMagicPercnet(const ResPlayerTotalMagicPercnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  percent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_percent()) {
    percent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.percent_);
  }
  // @@protoc_insertion_point(copy_constructor:fightV2.ResPlayerTotalMagicPercnet)
}

void ResPlayerTotalMagicPercnet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResPlayerTotalMagicPercnet_fight_2eproto.base);
  percent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResPlayerTotalMagicPercnet::~ResPlayerTotalMagicPercnet() {
  // @@protoc_insertion_point(destructor:fightV2.ResPlayerTotalMagicPercnet)
  SharedDtor();
}

void ResPlayerTotalMagicPercnet::SharedDtor() {
  percent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResPlayerTotalMagicPercnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResPlayerTotalMagicPercnet& ResPlayerTotalMagicPercnet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResPlayerTotalMagicPercnet_fight_2eproto.base);
  return *internal_default_instance();
}


void ResPlayerTotalMagicPercnet::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResPlayerTotalMagicPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    percent_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResPlayerTotalMagicPercnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_percent(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResPlayerTotalMagicPercnet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResPlayerTotalMagicPercnet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes percent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResPlayerTotalMagicPercnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResPlayerTotalMagicPercnet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResPlayerTotalMagicPercnet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResPlayerTotalMagicPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes percent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResPlayerTotalMagicPercnet)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResPlayerTotalMagicPercnet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResPlayerTotalMagicPercnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResPlayerTotalMagicPercnet)
  return target;
}

size_t ResPlayerTotalMagicPercnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResPlayerTotalMagicPercnet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes percent = 1;
  if (has_percent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->percent());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResPlayerTotalMagicPercnet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResPlayerTotalMagicPercnet)
  GOOGLE_DCHECK_NE(&from, this);
  const ResPlayerTotalMagicPercnet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResPlayerTotalMagicPercnet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResPlayerTotalMagicPercnet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResPlayerTotalMagicPercnet)
    MergeFrom(*source);
  }
}

void ResPlayerTotalMagicPercnet::MergeFrom(const ResPlayerTotalMagicPercnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResPlayerTotalMagicPercnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_percent()) {
    _has_bits_[0] |= 0x00000001u;
    percent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.percent_);
  }
}

void ResPlayerTotalMagicPercnet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResPlayerTotalMagicPercnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResPlayerTotalMagicPercnet::CopyFrom(const ResPlayerTotalMagicPercnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResPlayerTotalMagicPercnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResPlayerTotalMagicPercnet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResPlayerTotalMagicPercnet::Swap(ResPlayerTotalMagicPercnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResPlayerTotalMagicPercnet::InternalSwap(ResPlayerTotalMagicPercnet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  percent_.Swap(&other->percent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResPlayerTotalMagicPercnet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResBanCure::InitAsDefaultInstance() {
}
class ResBanCure::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResBanCure>()._has_bits_);
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResBanCure::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResBanCure::ResBanCure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ResBanCure)
}
ResBanCure::ResBanCure(const ResBanCure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:fightV2.ResBanCure)
}

void ResBanCure::SharedCtor() {
  targetid_ = PROTOBUF_LONGLONG(0);
}

ResBanCure::~ResBanCure() {
  // @@protoc_insertion_point(destructor:fightV2.ResBanCure)
  SharedDtor();
}

void ResBanCure::SharedDtor() {
}

void ResBanCure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResBanCure& ResBanCure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResBanCure_fight_2eproto.base);
  return *internal_default_instance();
}


void ResBanCure::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ResBanCure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResBanCure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResBanCure::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ResBanCure)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 targetId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ResBanCure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ResBanCure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResBanCure::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ResBanCure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ResBanCure)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResBanCure::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ResBanCure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ResBanCure)
  return target;
}

size_t ResBanCure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ResBanCure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 targetId = 1;
  if (has_targetid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->targetid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResBanCure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ResBanCure)
  GOOGLE_DCHECK_NE(&from, this);
  const ResBanCure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResBanCure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ResBanCure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ResBanCure)
    MergeFrom(*source);
  }
}

void ResBanCure::MergeFrom(const ResBanCure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ResBanCure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetid()) {
    set_targetid(from.targetid());
  }
}

void ResBanCure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ResBanCure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResBanCure::CopyFrom(const ResBanCure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ResBanCure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResBanCure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResBanCure::Swap(ResBanCure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResBanCure::InternalSwap(ResBanCure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResBanCure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkillMoveInfo::InitAsDefaultInstance() {
}
class SkillMoveInfo::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SkillMoveInfo>()._has_bits_);
  static void set_has_attackid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillMoveInfo::kAttackIdFieldNumber;
const int SkillMoveInfo::kTypeFieldNumber;
const int SkillMoveInfo::kMoveInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillMoveInfo::SkillMoveInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.SkillMoveInfo)
}
SkillMoveInfo::SkillMoveInfo(const SkillMoveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      moveinfo_(from.moveinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attackid_, &from.attackid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&attackid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fightV2.SkillMoveInfo)
}

void SkillMoveInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkillMoveInfo_fight_2eproto.base);
  ::memset(&attackid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&attackid_)) + sizeof(type_));
}

SkillMoveInfo::~SkillMoveInfo() {
  // @@protoc_insertion_point(destructor:fightV2.SkillMoveInfo)
  SharedDtor();
}

void SkillMoveInfo::SharedDtor() {
}

void SkillMoveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillMoveInfo& SkillMoveInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillMoveInfo_fight_2eproto.base);
  return *internal_default_instance();
}


void SkillMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.SkillMoveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moveinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&attackid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&attackid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkillMoveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 attackId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_attackid(&has_bits);
          attackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fightV2.SkillMove moveInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_moveinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkillMoveInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.SkillMoveInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 attackId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_attackid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fightV2.SkillMove moveInfo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_moveinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.SkillMoveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.SkillMoveInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkillMoveInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.SkillMoveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 attackId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->attackid(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .fightV2.SkillMove moveInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moveinfo_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->moveinfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.SkillMoveInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillMoveInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.SkillMoveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 attackId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->attackid(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .fightV2.SkillMove moveInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moveinfo_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->moveinfo(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.SkillMoveInfo)
  return target;
}

size_t SkillMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.SkillMoveInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 attackId = 1;
  if (has_attackid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->attackid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fightV2.SkillMove moveInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->moveinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->moveinfo(static_cast<int>(i)));
    }
  }

  // optional int32 type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillMoveInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.SkillMoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillMoveInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillMoveInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.SkillMoveInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.SkillMoveInfo)
    MergeFrom(*source);
  }
}

void SkillMoveInfo::MergeFrom(const SkillMoveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.SkillMoveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  moveinfo_.MergeFrom(from.moveinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attackid_ = from.attackid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SkillMoveInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.SkillMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillMoveInfo::CopyFrom(const SkillMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.SkillMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillMoveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->moveinfo())) return false;
  return true;
}

void SkillMoveInfo::Swap(SkillMoveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillMoveInfo::InternalSwap(SkillMoveInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&moveinfo_)->InternalSwap(CastToBase(&other->moveinfo_));
  swap(attackid_, other->attackid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillMoveInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkillMove::InitAsDefaultInstance() {
}
class SkillMove::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SkillMove>()._has_bits_);
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillMove::kTargetIdFieldNumber;
const int SkillMove::kXFieldNumber;
const int SkillMove::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillMove::SkillMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.SkillMove)
}
SkillMove::SkillMove(const SkillMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetid_, &from.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&targetid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:fightV2.SkillMove)
}

void SkillMove::SharedCtor() {
  ::memset(&targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&targetid_)) + sizeof(y_));
}

SkillMove::~SkillMove() {
  // @@protoc_insertion_point(destructor:fightV2.SkillMove)
  SharedDtor();
}

void SkillMove::SharedDtor() {
}

void SkillMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkillMove& SkillMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkillMove_fight_2eproto.base);
  return *internal_default_instance();
}


void SkillMove::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.SkillMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&targetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&targetid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkillMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 targetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_targetid(&has_bits);
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkillMove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.SkillMove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 targetId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_targetid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.SkillMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.SkillMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkillMove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.SkillMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.SkillMove)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkillMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.SkillMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 targetId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  // required int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.SkillMove)
  return target;
}

size_t SkillMove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fightV2.SkillMove)
  size_t total_size = 0;

  if (has_targetid()) {
    // required int64 targetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->targetid());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t SkillMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.SkillMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 targetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->targetid());

    // required int32 x = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkillMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.SkillMove)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkillMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.SkillMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.SkillMove)
    MergeFrom(*source);
  }
}

void SkillMove::MergeFrom(const SkillMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.SkillMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SkillMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.SkillMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillMove::CopyFrom(const SkillMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.SkillMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SkillMove::Swap(SkillMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillMove::InternalSwap(SkillMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetid_, other->targetid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComboNode::InitAsDefaultInstance() {
}
class ComboNode::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ComboNode>()._has_bits_);
  static void set_has_combonode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rockerx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rockery(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_controlleryaw(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_targetdir(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxrotate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComboNode::kComboNodeFieldNumber;
const int ComboNode::kIdFieldNumber;
const int ComboNode::kDirFieldNumber;
const int ComboNode::kXFieldNumber;
const int ComboNode::kYFieldNumber;
const int ComboNode::kZFieldNumber;
const int ComboNode::kRockerXFieldNumber;
const int ComboNode::kRockerYFieldNumber;
const int ComboNode::kControllerYawFieldNumber;
const int ComboNode::kTargetDirFieldNumber;
const int ComboNode::kMaxRotateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComboNode::ComboNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ComboNode)
}
ComboNode::ComboNode(const ComboNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrotate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxrotate_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ComboNode)
}

void ComboNode::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrotate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxrotate_));
}

ComboNode::~ComboNode() {
  // @@protoc_insertion_point(destructor:fightV2.ComboNode)
  SharedDtor();
}

void ComboNode::SharedDtor() {
}

void ComboNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComboNode& ComboNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComboNode_fight_2eproto.base);
  return *internal_default_instance();
}


void ComboNode::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ComboNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rockery_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rockery_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&controlleryaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxrotate_) -
        reinterpret_cast<char*>(&controlleryaw_)) + sizeof(maxrotate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComboNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 comboNode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_combonode(&has_bits);
          combonode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rockerX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          HasBitSetters::set_has_rockerx(&has_bits);
          rockerx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rockerY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_rockery(&has_bits);
          rockery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float controllerYaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_controlleryaw(&has_bits);
          controlleryaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float targetDir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          HasBitSetters::set_has_targetdir(&has_bits);
          targetdir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxRotate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          HasBitSetters::set_has_maxrotate(&has_bits);
          maxrotate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComboNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ComboNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 comboNode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_combonode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &combonode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rockerX = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_rockerx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rockerx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rockerY = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_rockery(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rockery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float controllerYaw = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_controlleryaw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &controlleryaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float targetDir = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_targetdir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float maxRotate = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_maxrotate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrotate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ComboNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ComboNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComboNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ComboNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 comboNode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->combonode(), output);
  }

  // optional int64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional float dir = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dir(), output);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // optional float rockerX = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->rockerx(), output);
  }

  // optional float rockerY = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->rockery(), output);
  }

  // optional float controllerYaw = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->controlleryaw(), output);
  }

  // optional float targetDir = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->targetdir(), output);
  }

  // optional float maxRotate = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->maxrotate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ComboNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ComboNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 comboNode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->combonode(), target);
  }

  // optional int64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional float dir = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->dir(), target);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // optional float rockerX = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->rockerx(), target);
  }

  // optional float rockerY = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->rockery(), target);
  }

  // optional float controllerYaw = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->controlleryaw(), target);
  }

  // optional float targetDir = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->targetdir(), target);
  }

  // optional float maxRotate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->maxrotate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ComboNode)
  return target;
}

size_t ComboNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ComboNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 comboNode = 1;
  if (has_combonode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->combonode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional float dir = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float rockerX = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float rockerY = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float controllerYaw = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float targetDir = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float maxRotate = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComboNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ComboNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ComboNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComboNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ComboNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ComboNode)
    MergeFrom(*source);
  }
}

void ComboNode::MergeFrom(const ComboNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ComboNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      combonode_ = from.combonode_;
    }
    if (cached_has_bits & 0x00000004u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      rockerx_ = from.rockerx_;
    }
    if (cached_has_bits & 0x00000080u) {
      rockery_ = from.rockery_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      controlleryaw_ = from.controlleryaw_;
    }
    if (cached_has_bits & 0x00000200u) {
      targetdir_ = from.targetdir_;
    }
    if (cached_has_bits & 0x00000400u) {
      maxrotate_ = from.maxrotate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComboNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ComboNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboNode::CopyFrom(const ComboNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ComboNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ComboNode::Swap(ComboNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComboNode::InternalSwap(ComboNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(combonode_, other->combonode_);
  swap(dir_, other->dir_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(rockerx_, other->rockerx_);
  swap(rockery_, other->rockery_);
  swap(controlleryaw_, other->controlleryaw_);
  swap(targetdir_, other->targetdir_);
  swap(maxrotate_, other->maxrotate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComboEnd::InitAsDefaultInstance() {
}
class ComboEnd::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ComboEnd>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComboEnd::kIdFieldNumber;
const int ComboEnd::kXFieldNumber;
const int ComboEnd::kYFieldNumber;
const int ComboEnd::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComboEnd::ComboEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fightV2.ComboEnd)
}
ComboEnd::ComboEnd(const ComboEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:fightV2.ComboEnd)
}

void ComboEnd::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&id_)) + sizeof(z_));
}

ComboEnd::~ComboEnd() {
  // @@protoc_insertion_point(destructor:fightV2.ComboEnd)
  SharedDtor();
}

void ComboEnd::SharedDtor() {
}

void ComboEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComboEnd& ComboEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComboEnd_fight_2eproto.base);
  return *internal_default_instance();
}


void ComboEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:fightV2.ComboEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&id_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComboEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComboEnd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:fightV2.ComboEnd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fightV2.ComboEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fightV2.ComboEnd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComboEnd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fightV2.ComboEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fightV2.ComboEnd)
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboEnd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fightV2.ComboEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fightV2.ComboEnd)
  return target;
}

size_t ComboEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fightV2.ComboEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComboEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fightV2.ComboEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const ComboEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComboEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fightV2.ComboEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fightV2.ComboEnd)
    MergeFrom(*source);
  }
}

void ComboEnd::MergeFrom(const ComboEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fightV2.ComboEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComboEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fightV2.ComboEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboEnd::CopyFrom(const ComboEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fightV2.ComboEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboEnd::IsInitialized() const {
  return true;
}

void ComboEnd::Swap(ComboEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComboEnd::InternalSwap(ComboEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fightV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fightV2::BufferInfo* Arena::CreateMaybeMessage< ::fightV2::BufferInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::BufferInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::HurtTarget* Arena::CreateMaybeMessage< ::fightV2::HurtTarget >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::HurtTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::FightRequest* Arena::CreateMaybeMessage< ::fightV2::FightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::FightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::FightTestContrllerNull* Arena::CreateMaybeMessage< ::fightV2::FightTestContrllerNull >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::FightTestContrllerNull >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResFightResult* Arena::CreateMaybeMessage< ::fightV2::ResFightResult >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResFightResult >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResHpMpChange* Arena::CreateMaybeMessage< ::fightV2::ResHpMpChange >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResHpMpChange >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResObjectDie* Arena::CreateMaybeMessage< ::fightV2::ResObjectDie >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResObjectDie >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResPlayerTotalHpPercnet* Arena::CreateMaybeMessage< ::fightV2::ResPlayerTotalHpPercnet >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResPlayerTotalHpPercnet >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResInnerChange* Arena::CreateMaybeMessage< ::fightV2::ResInnerChange >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResInnerChange >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResShouHuAttack* Arena::CreateMaybeMessage< ::fightV2::ResShouHuAttack >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResShouHuAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResPlayerTotalMagicPercnet* Arena::CreateMaybeMessage< ::fightV2::ResPlayerTotalMagicPercnet >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResPlayerTotalMagicPercnet >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ResBanCure* Arena::CreateMaybeMessage< ::fightV2::ResBanCure >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ResBanCure >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::SkillMoveInfo* Arena::CreateMaybeMessage< ::fightV2::SkillMoveInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::SkillMoveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::SkillMove* Arena::CreateMaybeMessage< ::fightV2::SkillMove >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::SkillMove >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ComboNode* Arena::CreateMaybeMessage< ::fightV2::ComboNode >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ComboNode >(arena);
}
template<> PROTOBUF_NOINLINE ::fightV2::ComboEnd* Arena::CreateMaybeMessage< ::fightV2::ComboEnd >(Arena* arena) {
  return Arena::CreateInternal< ::fightV2::ComboEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
