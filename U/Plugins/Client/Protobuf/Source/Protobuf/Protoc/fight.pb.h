// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fight_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_fight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fight_2eproto;
namespace fightV2 {
class BufferInfo;
class BufferInfoDefaultTypeInternal;
PROTOBUF_API extern BufferInfoDefaultTypeInternal _BufferInfo_default_instance_;
class ComboEnd;
class ComboEndDefaultTypeInternal;
PROTOBUF_API extern ComboEndDefaultTypeInternal _ComboEnd_default_instance_;
class ComboNode;
class ComboNodeDefaultTypeInternal;
PROTOBUF_API extern ComboNodeDefaultTypeInternal _ComboNode_default_instance_;
class FightRequest;
class FightRequestDefaultTypeInternal;
PROTOBUF_API extern FightRequestDefaultTypeInternal _FightRequest_default_instance_;
class FightTestContrllerNull;
class FightTestContrllerNullDefaultTypeInternal;
PROTOBUF_API extern FightTestContrllerNullDefaultTypeInternal _FightTestContrllerNull_default_instance_;
class HurtTarget;
class HurtTargetDefaultTypeInternal;
PROTOBUF_API extern HurtTargetDefaultTypeInternal _HurtTarget_default_instance_;
class ResBanCure;
class ResBanCureDefaultTypeInternal;
PROTOBUF_API extern ResBanCureDefaultTypeInternal _ResBanCure_default_instance_;
class ResFightResult;
class ResFightResultDefaultTypeInternal;
PROTOBUF_API extern ResFightResultDefaultTypeInternal _ResFightResult_default_instance_;
class ResHpMpChange;
class ResHpMpChangeDefaultTypeInternal;
PROTOBUF_API extern ResHpMpChangeDefaultTypeInternal _ResHpMpChange_default_instance_;
class ResInnerChange;
class ResInnerChangeDefaultTypeInternal;
PROTOBUF_API extern ResInnerChangeDefaultTypeInternal _ResInnerChange_default_instance_;
class ResObjectDie;
class ResObjectDieDefaultTypeInternal;
PROTOBUF_API extern ResObjectDieDefaultTypeInternal _ResObjectDie_default_instance_;
class ResPlayerTotalHpPercnet;
class ResPlayerTotalHpPercnetDefaultTypeInternal;
PROTOBUF_API extern ResPlayerTotalHpPercnetDefaultTypeInternal _ResPlayerTotalHpPercnet_default_instance_;
class ResPlayerTotalMagicPercnet;
class ResPlayerTotalMagicPercnetDefaultTypeInternal;
PROTOBUF_API extern ResPlayerTotalMagicPercnetDefaultTypeInternal _ResPlayerTotalMagicPercnet_default_instance_;
class ResShouHuAttack;
class ResShouHuAttackDefaultTypeInternal;
PROTOBUF_API extern ResShouHuAttackDefaultTypeInternal _ResShouHuAttack_default_instance_;
class SkillMove;
class SkillMoveDefaultTypeInternal;
PROTOBUF_API extern SkillMoveDefaultTypeInternal _SkillMove_default_instance_;
class SkillMoveInfo;
class SkillMoveInfoDefaultTypeInternal;
PROTOBUF_API extern SkillMoveInfoDefaultTypeInternal _SkillMoveInfo_default_instance_;
}  // namespace fightV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_API ::fightV2::BufferInfo* Arena::CreateMaybeMessage<::fightV2::BufferInfo>(Arena*);
template<> PROTOBUF_API ::fightV2::ComboEnd* Arena::CreateMaybeMessage<::fightV2::ComboEnd>(Arena*);
template<> PROTOBUF_API ::fightV2::ComboNode* Arena::CreateMaybeMessage<::fightV2::ComboNode>(Arena*);
template<> PROTOBUF_API ::fightV2::FightRequest* Arena::CreateMaybeMessage<::fightV2::FightRequest>(Arena*);
template<> PROTOBUF_API ::fightV2::FightTestContrllerNull* Arena::CreateMaybeMessage<::fightV2::FightTestContrllerNull>(Arena*);
template<> PROTOBUF_API ::fightV2::HurtTarget* Arena::CreateMaybeMessage<::fightV2::HurtTarget>(Arena*);
template<> PROTOBUF_API ::fightV2::ResBanCure* Arena::CreateMaybeMessage<::fightV2::ResBanCure>(Arena*);
template<> PROTOBUF_API ::fightV2::ResFightResult* Arena::CreateMaybeMessage<::fightV2::ResFightResult>(Arena*);
template<> PROTOBUF_API ::fightV2::ResHpMpChange* Arena::CreateMaybeMessage<::fightV2::ResHpMpChange>(Arena*);
template<> PROTOBUF_API ::fightV2::ResInnerChange* Arena::CreateMaybeMessage<::fightV2::ResInnerChange>(Arena*);
template<> PROTOBUF_API ::fightV2::ResObjectDie* Arena::CreateMaybeMessage<::fightV2::ResObjectDie>(Arena*);
template<> PROTOBUF_API ::fightV2::ResPlayerTotalHpPercnet* Arena::CreateMaybeMessage<::fightV2::ResPlayerTotalHpPercnet>(Arena*);
template<> PROTOBUF_API ::fightV2::ResPlayerTotalMagicPercnet* Arena::CreateMaybeMessage<::fightV2::ResPlayerTotalMagicPercnet>(Arena*);
template<> PROTOBUF_API ::fightV2::ResShouHuAttack* Arena::CreateMaybeMessage<::fightV2::ResShouHuAttack>(Arena*);
template<> PROTOBUF_API ::fightV2::SkillMove* Arena::CreateMaybeMessage<::fightV2::SkillMove>(Arena*);
template<> PROTOBUF_API ::fightV2::SkillMoveInfo* Arena::CreateMaybeMessage<::fightV2::SkillMoveInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fightV2 {

enum PropertyType : int {
  maxHp = 1,
  maxMp = 2,
  innerPowerMax = 3,
  phyAttackMin = 4,
  phyAttackMax = 5,
  magicAttackMin = 6,
  magicAttackMax = 7,
  taoAttackMin = 8,
  taoAttackMax = 9,
  phyDefMin = 10,
  phyDefMax = 11,
  magicDefMin = 12,
  magicDefMax = 13,
  critical = 14,
  criticalDamage = 15,
  accurate = 16,
  dodge = 17,
  heathRecover = 18,
  magicRecover = 19,
  innerPowerRecover = 20,
  luck = 21,
  resistanceCrit = 22,
  hurtAdd = 23,
  relief = 24,
  innerRelief = 25,
  holyAttack = 26,
  attackSpeed = 27,
  pkAtt = 28,
  pkDef = 29,
  nbValue = 30
};
PROTOBUF_API bool PropertyType_IsValid(int value);
constexpr PropertyType PropertyType_MIN = maxHp;
constexpr PropertyType PropertyType_MAX = nbValue;
constexpr int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor();
template<typename T>
inline const std::string& PropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropertyType_descriptor(), enum_t_value);
}
inline bool PropertyType_Parse(
    const std::string& name, PropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropertyType>(
    PropertyType_descriptor(), name, value);
}
// ===================================================================

class PROTOBUF_API BufferInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.BufferInfo) */ {
 public:
  BufferInfo();
  virtual ~BufferInfo();

  BufferInfo(const BufferInfo& from);
  BufferInfo(BufferInfo&& from) noexcept
    : BufferInfo() {
    *this = ::std::move(from);
  }

  inline BufferInfo& operator=(const BufferInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BufferInfo& operator=(BufferInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BufferInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BufferInfo* internal_default_instance() {
    return reinterpret_cast<const BufferInfo*>(
               &_BufferInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BufferInfo* other);
  friend void swap(BufferInfo& a, BufferInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BufferInfo* New() const final {
    return CreateMaybeMessage<BufferInfo>(nullptr);
  }

  BufferInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BufferInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BufferInfo& from);
  void MergeFrom(const BufferInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufferInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.BufferInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bufferId = 1;
  bool has_bufferid() const;
  void clear_bufferid();
  static const int kBufferIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferid() const;
  void set_bufferid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 bufferConfigId = 2;
  bool has_bufferconfigid() const;
  void clear_bufferconfigid();
  static const int kBufferConfigIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferconfigid() const;
  void set_bufferconfigid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 addTime = 3;
  bool has_addtime() const;
  void clear_addtime();
  static const int kAddTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 addtime() const;
  void set_addtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 totalTime = 4;
  bool has_totaltime() const;
  void clear_totaltime();
  static const int kTotalTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 totaltime() const;
  void set_totaltime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 roleId = 5;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:fightV2.BufferInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferid_;
  ::PROTOBUF_NAMESPACE_ID::int32 bufferconfigid_;
  ::PROTOBUF_NAMESPACE_ID::int64 addtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 totaltime_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API HurtTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.HurtTarget) */ {
 public:
  HurtTarget();
  virtual ~HurtTarget();

  HurtTarget(const HurtTarget& from);
  HurtTarget(HurtTarget&& from) noexcept
    : HurtTarget() {
    *this = ::std::move(from);
  }

  inline HurtTarget& operator=(const HurtTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline HurtTarget& operator=(HurtTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HurtTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HurtTarget* internal_default_instance() {
    return reinterpret_cast<const HurtTarget*>(
               &_HurtTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HurtTarget* other);
  friend void swap(HurtTarget& a, HurtTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HurtTarget* New() const final {
    return CreateMaybeMessage<HurtTarget>(nullptr);
  }

  HurtTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HurtTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HurtTarget& from);
  void MergeFrom(const HurtTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HurtTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.HurtTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fightV2.BufferInfo bufferList = 5;
  int bufferlist_size() const;
  void clear_bufferlist();
  static const int kBufferListFieldNumber = 5;
  ::fightV2::BufferInfo* mutable_bufferlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::BufferInfo >*
      mutable_bufferlist();
  const ::fightV2::BufferInfo& bufferlist(int index) const;
  ::fightV2::BufferInfo* add_bufferlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::BufferInfo >&
      bufferlist() const;

  // optional int64 targetId = 1;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 hp = 2;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 showHurt = 3;
  bool has_showhurt() const;
  void clear_showhurt();
  static const int kShowHurtFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 showhurt() const;
  void set_showhurt(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 inner = 4;
  bool has_inner() const;
  void clear_inner();
  static const int kInnerFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 inner() const;
  void set_inner(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 specAtt = 6;
  bool has_specatt() const;
  void clear_specatt();
  static const int kSpecAttFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 specatt() const;
  void set_specatt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 hurtType = 7;
  bool has_hurttype() const;
  void clear_hurttype();
  static const int kHurtTypeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 hurttype() const;
  void set_hurttype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 effectType = 8;
  bool has_effecttype() const;
  void clear_effecttype();
  static const int kEffectTypeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 effecttype() const;
  void set_effecttype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool isDodge = 9;
  bool has_isdodge() const;
  void clear_isdodge();
  static const int kIsDodgeFieldNumber = 9;
  bool isdodge() const;
  void set_isdodge(bool value);

  // optional bool isCritical = 10;
  bool has_iscritical() const;
  void clear_iscritical();
  static const int kIsCriticalFieldNumber = 10;
  bool iscritical() const;
  void set_iscritical(bool value);

  // optional float x = 11;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 11;
  float x() const;
  void set_x(float value);

  // optional float y = 12;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 12;
  float y() const;
  void set_y(float value);

  // optional float z = 13;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 13;
  float z() const;
  void set_z(float value);

  // optional float targetDir = 14;
  bool has_targetdir() const;
  void clear_targetdir();
  static const int kTargetDirFieldNumber = 14;
  float targetdir() const;
  void set_targetdir(float value);

  // @@protoc_insertion_point(class_scope:fightV2.HurtTarget)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::BufferInfo > bufferlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int64 showhurt_;
  ::PROTOBUF_NAMESPACE_ID::int32 inner_;
  ::PROTOBUF_NAMESPACE_ID::int32 specatt_;
  ::PROTOBUF_NAMESPACE_ID::int32 hurttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 effecttype_;
  bool isdodge_;
  bool iscritical_;
  float x_;
  float y_;
  float z_;
  float targetdir_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API FightRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.FightRequest) */ {
 public:
  FightRequest();
  virtual ~FightRequest();

  FightRequest(const FightRequest& from);
  FightRequest(FightRequest&& from) noexcept
    : FightRequest() {
    *this = ::std::move(from);
  }

  inline FightRequest& operator=(const FightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FightRequest& operator=(FightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FightRequest* internal_default_instance() {
    return reinterpret_cast<const FightRequest*>(
               &_FightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FightRequest* other);
  friend void swap(FightRequest& a, FightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRequest* New() const final {
    return CreateMaybeMessage<FightRequest>(nullptr);
  }

  FightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FightRequest& from);
  void MergeFrom(const FightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.FightRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 targetId = 2;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 skillId = 1;
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // optional float y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // optional float z = 5;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // optional float moveX = 6;
  bool has_movex() const;
  void clear_movex();
  static const int kMoveXFieldNumber = 6;
  float movex() const;
  void set_movex(float value);

  // optional float moveY = 7;
  bool has_movey() const;
  void clear_movey();
  static const int kMoveYFieldNumber = 7;
  float movey() const;
  void set_movey(float value);

  // optional float moveZ = 8;
  bool has_movez() const;
  void clear_movez();
  static const int kMoveZFieldNumber = 8;
  float movez() const;
  void set_movez(float value);

  // optional float targetX = 9;
  bool has_targetx() const;
  void clear_targetx();
  static const int kTargetXFieldNumber = 9;
  float targetx() const;
  void set_targetx(float value);

  // optional float targetY = 10;
  bool has_targety() const;
  void clear_targety();
  static const int kTargetYFieldNumber = 10;
  float targety() const;
  void set_targety(float value);

  // optional float targetZ = 11;
  bool has_targetz() const;
  void clear_targetz();
  static const int kTargetZFieldNumber = 11;
  float targetz() const;
  void set_targetz(float value);

  // optional float targetDir = 12;
  bool has_targetdir() const;
  void clear_targetdir();
  static const int kTargetDirFieldNumber = 12;
  float targetdir() const;
  void set_targetdir(float value);

  // optional int32 comboId = 13;
  bool has_comboid() const;
  void clear_comboid();
  static const int kComboIdFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 comboid() const;
  void set_comboid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 controllerId = 15;
  bool has_controllerid() const;
  void clear_controllerid();
  static const int kControllerIdFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 controllerid() const;
  void set_controllerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 hitPerformaceId = 14;
  bool has_hitperformaceid() const;
  void clear_hitperformaceid();
  static const int kHitPerformaceIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 hitperformaceid() const;
  void set_hitperformaceid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.FightRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillid_;
  float x_;
  float y_;
  float z_;
  float movex_;
  float movey_;
  float movez_;
  float targetx_;
  float targety_;
  float targetz_;
  float targetdir_;
  ::PROTOBUF_NAMESPACE_ID::int32 comboid_;
  ::PROTOBUF_NAMESPACE_ID::int64 controllerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 hitperformaceid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API FightTestContrllerNull :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.FightTestContrllerNull) */ {
 public:
  FightTestContrllerNull();
  virtual ~FightTestContrllerNull();

  FightTestContrllerNull(const FightTestContrllerNull& from);
  FightTestContrllerNull(FightTestContrllerNull&& from) noexcept
    : FightTestContrllerNull() {
    *this = ::std::move(from);
  }

  inline FightTestContrllerNull& operator=(const FightTestContrllerNull& from) {
    CopyFrom(from);
    return *this;
  }
  inline FightTestContrllerNull& operator=(FightTestContrllerNull&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FightTestContrllerNull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FightTestContrllerNull* internal_default_instance() {
    return reinterpret_cast<const FightTestContrllerNull*>(
               &_FightTestContrllerNull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FightTestContrllerNull* other);
  friend void swap(FightTestContrllerNull& a, FightTestContrllerNull& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightTestContrllerNull* New() const final {
    return CreateMaybeMessage<FightTestContrllerNull>(nullptr);
  }

  FightTestContrllerNull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FightTestContrllerNull>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FightTestContrllerNull& from);
  void MergeFrom(const FightTestContrllerNull& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FightTestContrllerNull* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.FightTestContrllerNull";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 targetId = 1;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:fightV2.FightTestContrllerNull)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResFightResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResFightResult) */ {
 public:
  ResFightResult();
  virtual ~ResFightResult();

  ResFightResult(const ResFightResult& from);
  ResFightResult(ResFightResult&& from) noexcept
    : ResFightResult() {
    *this = ::std::move(from);
  }

  inline ResFightResult& operator=(const ResFightResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResFightResult& operator=(ResFightResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResFightResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResFightResult* internal_default_instance() {
    return reinterpret_cast<const ResFightResult*>(
               &_ResFightResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResFightResult* other);
  friend void swap(ResFightResult& a, ResFightResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResFightResult* New() const final {
    return CreateMaybeMessage<ResFightResult>(nullptr);
  }

  ResFightResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResFightResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResFightResult& from);
  void MergeFrom(const ResFightResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResFightResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResFightResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fightV2.HurtTarget hurtList = 7;
  int hurtlist_size() const;
  void clear_hurtlist();
  static const int kHurtListFieldNumber = 7;
  ::fightV2::HurtTarget* mutable_hurtlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::HurtTarget >*
      mutable_hurtlist();
  const ::fightV2::HurtTarget& hurtlist(int index) const;
  ::fightV2::HurtTarget* add_hurtlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::HurtTarget >&
      hurtlist() const;

  // optional int64 attackerId = 2;
  bool has_attackerid() const;
  void clear_attackerid();
  static const int kAttackerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 attackerid() const;
  void set_attackerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 skillId = 1;
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional int64 targetId = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // optional int32 mp = 8;
  bool has_mp() const;
  void clear_mp();
  static const int kMpFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 skillExp = 9;
  bool has_skillexp() const;
  void clear_skillexp();
  static const int kSkillExpFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 skillexp() const;
  void set_skillexp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float moveX = 10;
  bool has_movex() const;
  void clear_movex();
  static const int kMoveXFieldNumber = 10;
  float movex() const;
  void set_movex(float value);

  // optional float moveY = 11;
  bool has_movey() const;
  void clear_movey();
  static const int kMoveYFieldNumber = 11;
  float movey() const;
  void set_movey(float value);

  // optional float moveZ = 12;
  bool has_movez() const;
  void clear_movez();
  static const int kMoveZFieldNumber = 12;
  float movez() const;
  void set_movez(float value);

  // optional int32 comboId = 13;
  bool has_comboid() const;
  void clear_comboid();
  static const int kComboIdFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 comboid() const;
  void set_comboid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 controllerId = 15;
  bool has_controllerid() const;
  void clear_controllerid();
  static const int kControllerIdFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 controllerid() const;
  void set_controllerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 hitPerformaceId = 14;
  bool has_hitperformaceid() const;
  void clear_hitperformaceid();
  static const int kHitPerformaceIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 hitperformaceid() const;
  void set_hitperformaceid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResFightResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::HurtTarget > hurtlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 attackerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillid_;
  float x_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillexp_;
  float movex_;
  float movey_;
  float movez_;
  ::PROTOBUF_NAMESPACE_ID::int32 comboid_;
  ::PROTOBUF_NAMESPACE_ID::int64 controllerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 hitperformaceid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResHpMpChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResHpMpChange) */ {
 public:
  ResHpMpChange();
  virtual ~ResHpMpChange();

  ResHpMpChange(const ResHpMpChange& from);
  ResHpMpChange(ResHpMpChange&& from) noexcept
    : ResHpMpChange() {
    *this = ::std::move(from);
  }

  inline ResHpMpChange& operator=(const ResHpMpChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResHpMpChange& operator=(ResHpMpChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResHpMpChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResHpMpChange* internal_default_instance() {
    return reinterpret_cast<const ResHpMpChange*>(
               &_ResHpMpChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResHpMpChange* other);
  friend void swap(ResHpMpChange& a, ResHpMpChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResHpMpChange* New() const final {
    return CreateMaybeMessage<ResHpMpChange>(nullptr);
  }

  ResHpMpChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResHpMpChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResHpMpChange& from);
  void MergeFrom(const ResHpMpChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResHpMpChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResHpMpChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 hp = 2;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 maxHp = 4;
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mp = 3;
  bool has_mp() const;
  void clear_mp();
  static const int kMpFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 maxMp = 5;
  bool has_maxmp() const;
  void clear_maxmp();
  static const int kMaxMpFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp() const;
  void set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResHpMpChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResObjectDie :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResObjectDie) */ {
 public:
  ResObjectDie();
  virtual ~ResObjectDie();

  ResObjectDie(const ResObjectDie& from);
  ResObjectDie(ResObjectDie&& from) noexcept
    : ResObjectDie() {
    *this = ::std::move(from);
  }

  inline ResObjectDie& operator=(const ResObjectDie& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResObjectDie& operator=(ResObjectDie&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResObjectDie& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResObjectDie* internal_default_instance() {
    return reinterpret_cast<const ResObjectDie*>(
               &_ResObjectDie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResObjectDie* other);
  friend void swap(ResObjectDie& a, ResObjectDie& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResObjectDie* New() const final {
    return CreateMaybeMessage<ResObjectDie>(nullptr);
  }

  ResObjectDie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResObjectDie>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResObjectDie& from);
  void MergeFrom(const ResObjectDie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResObjectDie* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResObjectDie";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 killerId = 2;
  bool has_killerid() const;
  void clear_killerid();
  static const int kKillerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 killerid() const;
  void set_killerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResObjectDie)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 killerid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerTotalHpPercnet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResPlayerTotalHpPercnet) */ {
 public:
  ResPlayerTotalHpPercnet();
  virtual ~ResPlayerTotalHpPercnet();

  ResPlayerTotalHpPercnet(const ResPlayerTotalHpPercnet& from);
  ResPlayerTotalHpPercnet(ResPlayerTotalHpPercnet&& from) noexcept
    : ResPlayerTotalHpPercnet() {
    *this = ::std::move(from);
  }

  inline ResPlayerTotalHpPercnet& operator=(const ResPlayerTotalHpPercnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerTotalHpPercnet& operator=(ResPlayerTotalHpPercnet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerTotalHpPercnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerTotalHpPercnet* internal_default_instance() {
    return reinterpret_cast<const ResPlayerTotalHpPercnet*>(
               &_ResPlayerTotalHpPercnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResPlayerTotalHpPercnet* other);
  friend void swap(ResPlayerTotalHpPercnet& a, ResPlayerTotalHpPercnet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerTotalHpPercnet* New() const final {
    return CreateMaybeMessage<ResPlayerTotalHpPercnet>(nullptr);
  }

  ResPlayerTotalHpPercnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerTotalHpPercnet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerTotalHpPercnet& from);
  void MergeFrom(const ResPlayerTotalHpPercnet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerTotalHpPercnet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResPlayerTotalHpPercnet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes percent = 1;
  bool has_percent() const;
  void clear_percent();
  static const int kPercentFieldNumber = 1;
  const std::string& percent() const;
  void set_percent(const std::string& value);
  void set_percent(std::string&& value);
  void set_percent(const char* value);
  void set_percent(const void* value, size_t size);
  std::string* mutable_percent();
  std::string* release_percent();
  void set_allocated_percent(std::string* percent);

  // @@protoc_insertion_point(class_scope:fightV2.ResPlayerTotalHpPercnet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percent_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResInnerChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResInnerChange) */ {
 public:
  ResInnerChange();
  virtual ~ResInnerChange();

  ResInnerChange(const ResInnerChange& from);
  ResInnerChange(ResInnerChange&& from) noexcept
    : ResInnerChange() {
    *this = ::std::move(from);
  }

  inline ResInnerChange& operator=(const ResInnerChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResInnerChange& operator=(ResInnerChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResInnerChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResInnerChange* internal_default_instance() {
    return reinterpret_cast<const ResInnerChange*>(
               &_ResInnerChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ResInnerChange* other);
  friend void swap(ResInnerChange& a, ResInnerChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResInnerChange* New() const final {
    return CreateMaybeMessage<ResInnerChange>(nullptr);
  }

  ResInnerChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResInnerChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResInnerChange& from);
  void MergeFrom(const ResInnerChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResInnerChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResInnerChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 inner = 2;
  bool has_inner() const;
  void clear_inner();
  static const int kInnerFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 inner() const;
  void set_inner(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResInnerChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  ::PROTOBUF_NAMESPACE_ID::int64 inner_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResShouHuAttack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResShouHuAttack) */ {
 public:
  ResShouHuAttack();
  virtual ~ResShouHuAttack();

  ResShouHuAttack(const ResShouHuAttack& from);
  ResShouHuAttack(ResShouHuAttack&& from) noexcept
    : ResShouHuAttack() {
    *this = ::std::move(from);
  }

  inline ResShouHuAttack& operator=(const ResShouHuAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResShouHuAttack& operator=(ResShouHuAttack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResShouHuAttack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResShouHuAttack* internal_default_instance() {
    return reinterpret_cast<const ResShouHuAttack*>(
               &_ResShouHuAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ResShouHuAttack* other);
  friend void swap(ResShouHuAttack& a, ResShouHuAttack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResShouHuAttack* New() const final {
    return CreateMaybeMessage<ResShouHuAttack>(nullptr);
  }

  ResShouHuAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResShouHuAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResShouHuAttack& from);
  void MergeFrom(const ResShouHuAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResShouHuAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResShouHuAttack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ownerId = 2;
  bool has_ownerid() const;
  void clear_ownerid();
  static const int kOwnerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid() const;
  void set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 shouhuId = 1;
  bool has_shouhuid() const;
  void clear_shouhuid();
  static const int kShouhuIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 shouhuid() const;
  void set_shouhuid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 buffId = 3;
  bool has_buffid() const;
  void clear_buffid();
  static const int kBuffIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResShouHuAttack)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 ownerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 shouhuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerTotalMagicPercnet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResPlayerTotalMagicPercnet) */ {
 public:
  ResPlayerTotalMagicPercnet();
  virtual ~ResPlayerTotalMagicPercnet();

  ResPlayerTotalMagicPercnet(const ResPlayerTotalMagicPercnet& from);
  ResPlayerTotalMagicPercnet(ResPlayerTotalMagicPercnet&& from) noexcept
    : ResPlayerTotalMagicPercnet() {
    *this = ::std::move(from);
  }

  inline ResPlayerTotalMagicPercnet& operator=(const ResPlayerTotalMagicPercnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerTotalMagicPercnet& operator=(ResPlayerTotalMagicPercnet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerTotalMagicPercnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerTotalMagicPercnet* internal_default_instance() {
    return reinterpret_cast<const ResPlayerTotalMagicPercnet*>(
               &_ResPlayerTotalMagicPercnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ResPlayerTotalMagicPercnet* other);
  friend void swap(ResPlayerTotalMagicPercnet& a, ResPlayerTotalMagicPercnet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerTotalMagicPercnet* New() const final {
    return CreateMaybeMessage<ResPlayerTotalMagicPercnet>(nullptr);
  }

  ResPlayerTotalMagicPercnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerTotalMagicPercnet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerTotalMagicPercnet& from);
  void MergeFrom(const ResPlayerTotalMagicPercnet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerTotalMagicPercnet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResPlayerTotalMagicPercnet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes percent = 1;
  bool has_percent() const;
  void clear_percent();
  static const int kPercentFieldNumber = 1;
  const std::string& percent() const;
  void set_percent(const std::string& value);
  void set_percent(std::string&& value);
  void set_percent(const char* value);
  void set_percent(const void* value, size_t size);
  std::string* mutable_percent();
  std::string* release_percent();
  void set_allocated_percent(std::string* percent);

  // @@protoc_insertion_point(class_scope:fightV2.ResPlayerTotalMagicPercnet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percent_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResBanCure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ResBanCure) */ {
 public:
  ResBanCure();
  virtual ~ResBanCure();

  ResBanCure(const ResBanCure& from);
  ResBanCure(ResBanCure&& from) noexcept
    : ResBanCure() {
    *this = ::std::move(from);
  }

  inline ResBanCure& operator=(const ResBanCure& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResBanCure& operator=(ResBanCure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResBanCure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResBanCure* internal_default_instance() {
    return reinterpret_cast<const ResBanCure*>(
               &_ResBanCure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ResBanCure* other);
  friend void swap(ResBanCure& a, ResBanCure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResBanCure* New() const final {
    return CreateMaybeMessage<ResBanCure>(nullptr);
  }

  ResBanCure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResBanCure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResBanCure& from);
  void MergeFrom(const ResBanCure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResBanCure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ResBanCure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetId = 1;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:fightV2.ResBanCure)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API SkillMoveInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.SkillMoveInfo) */ {
 public:
  SkillMoveInfo();
  virtual ~SkillMoveInfo();

  SkillMoveInfo(const SkillMoveInfo& from);
  SkillMoveInfo(SkillMoveInfo&& from) noexcept
    : SkillMoveInfo() {
    *this = ::std::move(from);
  }

  inline SkillMoveInfo& operator=(const SkillMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillMoveInfo& operator=(SkillMoveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillMoveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillMoveInfo* internal_default_instance() {
    return reinterpret_cast<const SkillMoveInfo*>(
               &_SkillMoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SkillMoveInfo* other);
  friend void swap(SkillMoveInfo& a, SkillMoveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillMoveInfo* New() const final {
    return CreateMaybeMessage<SkillMoveInfo>(nullptr);
  }

  SkillMoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillMoveInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillMoveInfo& from);
  void MergeFrom(const SkillMoveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillMoveInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.SkillMoveInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fightV2.SkillMove moveInfo = 3;
  int moveinfo_size() const;
  void clear_moveinfo();
  static const int kMoveInfoFieldNumber = 3;
  ::fightV2::SkillMove* mutable_moveinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::SkillMove >*
      mutable_moveinfo();
  const ::fightV2::SkillMove& moveinfo(int index) const;
  ::fightV2::SkillMove* add_moveinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::SkillMove >&
      moveinfo() const;

  // required int64 attackId = 1;
  bool has_attackid() const;
  void clear_attackid();
  static const int kAttackIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 attackid() const;
  void set_attackid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.SkillMoveInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::SkillMove > moveinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 attackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API SkillMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.SkillMove) */ {
 public:
  SkillMove();
  virtual ~SkillMove();

  SkillMove(const SkillMove& from);
  SkillMove(SkillMove&& from) noexcept
    : SkillMove() {
    *this = ::std::move(from);
  }

  inline SkillMove& operator=(const SkillMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillMove& operator=(SkillMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SkillMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillMove* internal_default_instance() {
    return reinterpret_cast<const SkillMove*>(
               &_SkillMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SkillMove* other);
  friend void swap(SkillMove& a, SkillMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillMove* New() const final {
    return CreateMaybeMessage<SkillMove>(nullptr);
  }

  SkillMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SkillMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SkillMove& from);
  void MergeFrom(const SkillMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.SkillMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetId = 1;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:fightV2.SkillMove)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ComboNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ComboNode) */ {
 public:
  ComboNode();
  virtual ~ComboNode();

  ComboNode(const ComboNode& from);
  ComboNode(ComboNode&& from) noexcept
    : ComboNode() {
    *this = ::std::move(from);
  }

  inline ComboNode& operator=(const ComboNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboNode& operator=(ComboNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComboNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComboNode* internal_default_instance() {
    return reinterpret_cast<const ComboNode*>(
               &_ComboNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ComboNode* other);
  friend void swap(ComboNode& a, ComboNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComboNode* New() const final {
    return CreateMaybeMessage<ComboNode>(nullptr);
  }

  ComboNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboNode& from);
  void MergeFrom(const ComboNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ComboNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 comboNode = 1;
  bool has_combonode() const;
  void clear_combonode();
  static const int kComboNodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 combonode() const;
  void set_combonode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float dir = 3;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  float dir() const;
  void set_dir(float value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // optional float rockerX = 7;
  bool has_rockerx() const;
  void clear_rockerx();
  static const int kRockerXFieldNumber = 7;
  float rockerx() const;
  void set_rockerx(float value);

  // optional float rockerY = 8;
  bool has_rockery() const;
  void clear_rockery();
  static const int kRockerYFieldNumber = 8;
  float rockery() const;
  void set_rockery(float value);

  // optional float controllerYaw = 9;
  bool has_controlleryaw() const;
  void clear_controlleryaw();
  static const int kControllerYawFieldNumber = 9;
  float controlleryaw() const;
  void set_controlleryaw(float value);

  // optional float targetDir = 10;
  bool has_targetdir() const;
  void clear_targetdir();
  static const int kTargetDirFieldNumber = 10;
  float targetdir() const;
  void set_targetdir(float value);

  // optional float maxRotate = 11;
  bool has_maxrotate() const;
  void clear_maxrotate();
  static const int kMaxRotateFieldNumber = 11;
  float maxrotate() const;
  void set_maxrotate(float value);

  // @@protoc_insertion_point(class_scope:fightV2.ComboNode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 combonode_;
  float dir_;
  float x_;
  float y_;
  float z_;
  float rockerx_;
  float rockery_;
  float controlleryaw_;
  float targetdir_;
  float maxrotate_;
  friend struct ::TableStruct_fight_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ComboEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fightV2.ComboEnd) */ {
 public:
  ComboEnd();
  virtual ~ComboEnd();

  ComboEnd(const ComboEnd& from);
  ComboEnd(ComboEnd&& from) noexcept
    : ComboEnd() {
    *this = ::std::move(from);
  }

  inline ComboEnd& operator=(const ComboEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboEnd& operator=(ComboEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComboEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComboEnd* internal_default_instance() {
    return reinterpret_cast<const ComboEnd*>(
               &_ComboEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ComboEnd* other);
  friend void swap(ComboEnd& a, ComboEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComboEnd* New() const final {
    return CreateMaybeMessage<ComboEnd>(nullptr);
  }

  ComboEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboEnd& from);
  void MergeFrom(const ComboEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fightV2.ComboEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fight_2eproto);
    return ::descriptor_table_fight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:fightV2.ComboEnd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_fight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BufferInfo

// optional int32 bufferId = 1;
inline bool BufferInfo::has_bufferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BufferInfo::clear_bufferid() {
  bufferid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BufferInfo::bufferid() const {
  // @@protoc_insertion_point(field_get:fightV2.BufferInfo.bufferId)
  return bufferid_;
}
inline void BufferInfo::set_bufferid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  bufferid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.BufferInfo.bufferId)
}

// optional int32 bufferConfigId = 2;
inline bool BufferInfo::has_bufferconfigid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BufferInfo::clear_bufferconfigid() {
  bufferconfigid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BufferInfo::bufferconfigid() const {
  // @@protoc_insertion_point(field_get:fightV2.BufferInfo.bufferConfigId)
  return bufferconfigid_;
}
inline void BufferInfo::set_bufferconfigid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bufferconfigid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.BufferInfo.bufferConfigId)
}

// optional int64 addTime = 3;
inline bool BufferInfo::has_addtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BufferInfo::clear_addtime() {
  addtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BufferInfo::addtime() const {
  // @@protoc_insertion_point(field_get:fightV2.BufferInfo.addTime)
  return addtime_;
}
inline void BufferInfo::set_addtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  addtime_ = value;
  // @@protoc_insertion_point(field_set:fightV2.BufferInfo.addTime)
}

// optional int64 totalTime = 4;
inline bool BufferInfo::has_totaltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BufferInfo::clear_totaltime() {
  totaltime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BufferInfo::totaltime() const {
  // @@protoc_insertion_point(field_get:fightV2.BufferInfo.totalTime)
  return totaltime_;
}
inline void BufferInfo::set_totaltime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:fightV2.BufferInfo.totalTime)
}

// optional int64 roleId = 5;
inline bool BufferInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BufferInfo::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BufferInfo::roleid() const {
  // @@protoc_insertion_point(field_get:fightV2.BufferInfo.roleId)
  return roleid_;
}
inline void BufferInfo::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  roleid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.BufferInfo.roleId)
}

// -------------------------------------------------------------------

// HurtTarget

// optional int64 targetId = 1;
inline bool HurtTarget::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HurtTarget::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HurtTarget::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.targetId)
  return targetid_;
}
inline void HurtTarget::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.targetId)
}

// optional int64 hp = 2;
inline bool HurtTarget::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HurtTarget::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HurtTarget::hp() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.hp)
  return hp_;
}
inline void HurtTarget::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.hp)
}

// optional int64 showHurt = 3;
inline bool HurtTarget::has_showhurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HurtTarget::clear_showhurt() {
  showhurt_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HurtTarget::showhurt() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.showHurt)
  return showhurt_;
}
inline void HurtTarget::set_showhurt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  showhurt_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.showHurt)
}

// optional int32 inner = 4;
inline bool HurtTarget::has_inner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HurtTarget::clear_inner() {
  inner_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HurtTarget::inner() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.inner)
  return inner_;
}
inline void HurtTarget::set_inner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  inner_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.inner)
}

// repeated .fightV2.BufferInfo bufferList = 5;
inline int HurtTarget::bufferlist_size() const {
  return bufferlist_.size();
}
inline void HurtTarget::clear_bufferlist() {
  bufferlist_.Clear();
}
inline ::fightV2::BufferInfo* HurtTarget::mutable_bufferlist(int index) {
  // @@protoc_insertion_point(field_mutable:fightV2.HurtTarget.bufferList)
  return bufferlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::BufferInfo >*
HurtTarget::mutable_bufferlist() {
  // @@protoc_insertion_point(field_mutable_list:fightV2.HurtTarget.bufferList)
  return &bufferlist_;
}
inline const ::fightV2::BufferInfo& HurtTarget::bufferlist(int index) const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.bufferList)
  return bufferlist_.Get(index);
}
inline ::fightV2::BufferInfo* HurtTarget::add_bufferlist() {
  // @@protoc_insertion_point(field_add:fightV2.HurtTarget.bufferList)
  return bufferlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::BufferInfo >&
HurtTarget::bufferlist() const {
  // @@protoc_insertion_point(field_list:fightV2.HurtTarget.bufferList)
  return bufferlist_;
}

// optional int32 specAtt = 6;
inline bool HurtTarget::has_specatt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HurtTarget::clear_specatt() {
  specatt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HurtTarget::specatt() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.specAtt)
  return specatt_;
}
inline void HurtTarget::set_specatt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  specatt_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.specAtt)
}

// optional int32 hurtType = 7;
inline bool HurtTarget::has_hurttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HurtTarget::clear_hurttype() {
  hurttype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HurtTarget::hurttype() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.hurtType)
  return hurttype_;
}
inline void HurtTarget::set_hurttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  hurttype_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.hurtType)
}

// optional int32 effectType = 8;
inline bool HurtTarget::has_effecttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HurtTarget::clear_effecttype() {
  effecttype_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HurtTarget::effecttype() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.effectType)
  return effecttype_;
}
inline void HurtTarget::set_effecttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  effecttype_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.effectType)
}

// optional bool isDodge = 9;
inline bool HurtTarget::has_isdodge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HurtTarget::clear_isdodge() {
  isdodge_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HurtTarget::isdodge() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.isDodge)
  return isdodge_;
}
inline void HurtTarget::set_isdodge(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isdodge_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.isDodge)
}

// optional bool isCritical = 10;
inline bool HurtTarget::has_iscritical() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HurtTarget::clear_iscritical() {
  iscritical_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool HurtTarget::iscritical() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.isCritical)
  return iscritical_;
}
inline void HurtTarget::set_iscritical(bool value) {
  _has_bits_[0] |= 0x00000100u;
  iscritical_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.isCritical)
}

// optional float x = 11;
inline bool HurtTarget::has_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HurtTarget::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float HurtTarget::x() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.x)
  return x_;
}
inline void HurtTarget::set_x(float value) {
  _has_bits_[0] |= 0x00000200u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.x)
}

// optional float y = 12;
inline bool HurtTarget::has_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HurtTarget::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float HurtTarget::y() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.y)
  return y_;
}
inline void HurtTarget::set_y(float value) {
  _has_bits_[0] |= 0x00000400u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.y)
}

// optional float z = 13;
inline bool HurtTarget::has_z() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HurtTarget::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float HurtTarget::z() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.z)
  return z_;
}
inline void HurtTarget::set_z(float value) {
  _has_bits_[0] |= 0x00000800u;
  z_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.z)
}

// optional float targetDir = 14;
inline bool HurtTarget::has_targetdir() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HurtTarget::clear_targetdir() {
  targetdir_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float HurtTarget::targetdir() const {
  // @@protoc_insertion_point(field_get:fightV2.HurtTarget.targetDir)
  return targetdir_;
}
inline void HurtTarget::set_targetdir(float value) {
  _has_bits_[0] |= 0x00001000u;
  targetdir_ = value;
  // @@protoc_insertion_point(field_set:fightV2.HurtTarget.targetDir)
}

// -------------------------------------------------------------------

// FightRequest

// required int32 skillId = 1;
inline bool FightRequest::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRequest::clear_skillid() {
  skillid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FightRequest::skillid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.skillId)
  return skillid_;
}
inline void FightRequest::set_skillid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  skillid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.skillId)
}

// optional int64 targetId = 2;
inline bool FightRequest::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRequest::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FightRequest::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.targetId)
  return targetid_;
}
inline void FightRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.targetId)
}

// optional float x = 3;
inline bool FightRequest::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRequest::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FightRequest::x() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.x)
  return x_;
}
inline void FightRequest::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.x)
}

// optional float y = 4;
inline bool FightRequest::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRequest::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FightRequest::y() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.y)
  return y_;
}
inline void FightRequest::set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.y)
}

// optional float z = 5;
inline bool FightRequest::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightRequest::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FightRequest::z() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.z)
  return z_;
}
inline void FightRequest::set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.z)
}

// optional float moveX = 6;
inline bool FightRequest::has_movex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightRequest::clear_movex() {
  movex_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FightRequest::movex() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.moveX)
  return movex_;
}
inline void FightRequest::set_movex(float value) {
  _has_bits_[0] |= 0x00000020u;
  movex_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.moveX)
}

// optional float moveY = 7;
inline bool FightRequest::has_movey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightRequest::clear_movey() {
  movey_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FightRequest::movey() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.moveY)
  return movey_;
}
inline void FightRequest::set_movey(float value) {
  _has_bits_[0] |= 0x00000040u;
  movey_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.moveY)
}

// optional float moveZ = 8;
inline bool FightRequest::has_movez() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightRequest::clear_movez() {
  movez_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FightRequest::movez() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.moveZ)
  return movez_;
}
inline void FightRequest::set_movez(float value) {
  _has_bits_[0] |= 0x00000080u;
  movez_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.moveZ)
}

// optional float targetX = 9;
inline bool FightRequest::has_targetx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightRequest::clear_targetx() {
  targetx_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FightRequest::targetx() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.targetX)
  return targetx_;
}
inline void FightRequest::set_targetx(float value) {
  _has_bits_[0] |= 0x00000100u;
  targetx_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.targetX)
}

// optional float targetY = 10;
inline bool FightRequest::has_targety() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightRequest::clear_targety() {
  targety_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FightRequest::targety() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.targetY)
  return targety_;
}
inline void FightRequest::set_targety(float value) {
  _has_bits_[0] |= 0x00000200u;
  targety_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.targetY)
}

// optional float targetZ = 11;
inline bool FightRequest::has_targetz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightRequest::clear_targetz() {
  targetz_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FightRequest::targetz() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.targetZ)
  return targetz_;
}
inline void FightRequest::set_targetz(float value) {
  _has_bits_[0] |= 0x00000400u;
  targetz_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.targetZ)
}

// optional float targetDir = 12;
inline bool FightRequest::has_targetdir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightRequest::clear_targetdir() {
  targetdir_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FightRequest::targetdir() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.targetDir)
  return targetdir_;
}
inline void FightRequest::set_targetdir(float value) {
  _has_bits_[0] |= 0x00000800u;
  targetdir_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.targetDir)
}

// optional int32 comboId = 13;
inline bool FightRequest::has_comboid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightRequest::clear_comboid() {
  comboid_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FightRequest::comboid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.comboId)
  return comboid_;
}
inline void FightRequest::set_comboid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  comboid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.comboId)
}

// optional int32 hitPerformaceId = 14;
inline bool FightRequest::has_hitperformaceid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightRequest::clear_hitperformaceid() {
  hitperformaceid_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FightRequest::hitperformaceid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.hitPerformaceId)
  return hitperformaceid_;
}
inline void FightRequest::set_hitperformaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  hitperformaceid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.hitPerformaceId)
}

// optional int64 controllerId = 15;
inline bool FightRequest::has_controllerid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightRequest::clear_controllerid() {
  controllerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FightRequest::controllerid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightRequest.controllerId)
  return controllerid_;
}
inline void FightRequest::set_controllerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  controllerid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightRequest.controllerId)
}

// -------------------------------------------------------------------

// FightTestContrllerNull

// optional int64 targetId = 1;
inline bool FightTestContrllerNull::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightTestContrllerNull::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FightTestContrllerNull::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.FightTestContrllerNull.targetId)
  return targetid_;
}
inline void FightTestContrllerNull::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.FightTestContrllerNull.targetId)
}

// -------------------------------------------------------------------

// ResFightResult

// required int32 skillId = 1;
inline bool ResFightResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResFightResult::clear_skillid() {
  skillid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResFightResult::skillid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.skillId)
  return skillid_;
}
inline void ResFightResult::set_skillid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  skillid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.skillId)
}

// optional int64 attackerId = 2;
inline bool ResFightResult::has_attackerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResFightResult::clear_attackerid() {
  attackerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResFightResult::attackerid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.attackerId)
  return attackerid_;
}
inline void ResFightResult::set_attackerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  attackerid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.attackerId)
}

// optional int64 targetId = 3;
inline bool ResFightResult::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResFightResult::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResFightResult::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.targetId)
  return targetid_;
}
inline void ResFightResult::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.targetId)
}

// optional float x = 4;
inline bool ResFightResult::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResFightResult::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResFightResult::x() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.x)
  return x_;
}
inline void ResFightResult::set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.x)
}

// optional float y = 5;
inline bool ResFightResult::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResFightResult::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ResFightResult::y() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.y)
  return y_;
}
inline void ResFightResult::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.y)
}

// optional float z = 6;
inline bool ResFightResult::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResFightResult::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResFightResult::z() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.z)
  return z_;
}
inline void ResFightResult::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.z)
}

// repeated .fightV2.HurtTarget hurtList = 7;
inline int ResFightResult::hurtlist_size() const {
  return hurtlist_.size();
}
inline void ResFightResult::clear_hurtlist() {
  hurtlist_.Clear();
}
inline ::fightV2::HurtTarget* ResFightResult::mutable_hurtlist(int index) {
  // @@protoc_insertion_point(field_mutable:fightV2.ResFightResult.hurtList)
  return hurtlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::HurtTarget >*
ResFightResult::mutable_hurtlist() {
  // @@protoc_insertion_point(field_mutable_list:fightV2.ResFightResult.hurtList)
  return &hurtlist_;
}
inline const ::fightV2::HurtTarget& ResFightResult::hurtlist(int index) const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.hurtList)
  return hurtlist_.Get(index);
}
inline ::fightV2::HurtTarget* ResFightResult::add_hurtlist() {
  // @@protoc_insertion_point(field_add:fightV2.ResFightResult.hurtList)
  return hurtlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::HurtTarget >&
ResFightResult::hurtlist() const {
  // @@protoc_insertion_point(field_list:fightV2.ResFightResult.hurtList)
  return hurtlist_;
}

// optional int32 mp = 8;
inline bool ResFightResult::has_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResFightResult::clear_mp() {
  mp_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResFightResult::mp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.mp)
  return mp_;
}
inline void ResFightResult::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.mp)
}

// optional int32 skillExp = 9;
inline bool ResFightResult::has_skillexp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResFightResult::clear_skillexp() {
  skillexp_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResFightResult::skillexp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.skillExp)
  return skillexp_;
}
inline void ResFightResult::set_skillexp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  skillexp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.skillExp)
}

// optional float moveX = 10;
inline bool ResFightResult::has_movex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResFightResult::clear_movex() {
  movex_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ResFightResult::movex() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.moveX)
  return movex_;
}
inline void ResFightResult::set_movex(float value) {
  _has_bits_[0] |= 0x00000100u;
  movex_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.moveX)
}

// optional float moveY = 11;
inline bool ResFightResult::has_movey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResFightResult::clear_movey() {
  movey_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ResFightResult::movey() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.moveY)
  return movey_;
}
inline void ResFightResult::set_movey(float value) {
  _has_bits_[0] |= 0x00000200u;
  movey_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.moveY)
}

// optional float moveZ = 12;
inline bool ResFightResult::has_movez() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResFightResult::clear_movez() {
  movez_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ResFightResult::movez() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.moveZ)
  return movez_;
}
inline void ResFightResult::set_movez(float value) {
  _has_bits_[0] |= 0x00000400u;
  movez_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.moveZ)
}

// optional int32 comboId = 13;
inline bool ResFightResult::has_comboid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResFightResult::clear_comboid() {
  comboid_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResFightResult::comboid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.comboId)
  return comboid_;
}
inline void ResFightResult::set_comboid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  comboid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.comboId)
}

// optional int32 hitPerformaceId = 14;
inline bool ResFightResult::has_hitperformaceid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ResFightResult::clear_hitperformaceid() {
  hitperformaceid_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResFightResult::hitperformaceid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.hitPerformaceId)
  return hitperformaceid_;
}
inline void ResFightResult::set_hitperformaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  hitperformaceid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.hitPerformaceId)
}

// optional int64 controllerId = 15;
inline bool ResFightResult::has_controllerid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ResFightResult::clear_controllerid() {
  controllerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResFightResult::controllerid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResFightResult.controllerId)
  return controllerid_;
}
inline void ResFightResult::set_controllerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  controllerid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResFightResult.controllerId)
}

// -------------------------------------------------------------------

// ResHpMpChange

// required int64 lid = 1;
inline bool ResHpMpChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResHpMpChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResHpMpChange::lid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResHpMpChange.lid)
  return lid_;
}
inline void ResHpMpChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResHpMpChange.lid)
}

// optional int64 hp = 2;
inline bool ResHpMpChange::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResHpMpChange::clear_hp() {
  hp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResHpMpChange::hp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResHpMpChange.hp)
  return hp_;
}
inline void ResHpMpChange::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResHpMpChange.hp)
}

// optional int32 mp = 3;
inline bool ResHpMpChange::has_mp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResHpMpChange::clear_mp() {
  mp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResHpMpChange::mp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResHpMpChange.mp)
  return mp_;
}
inline void ResHpMpChange::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResHpMpChange.mp)
}

// optional int64 maxHp = 4;
inline bool ResHpMpChange::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResHpMpChange::clear_maxhp() {
  maxhp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResHpMpChange::maxhp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResHpMpChange.maxHp)
  return maxhp_;
}
inline void ResHpMpChange::set_maxhp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResHpMpChange.maxHp)
}

// optional int32 maxMp = 5;
inline bool ResHpMpChange::has_maxmp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResHpMpChange::clear_maxmp() {
  maxmp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResHpMpChange::maxmp() const {
  // @@protoc_insertion_point(field_get:fightV2.ResHpMpChange.maxMp)
  return maxmp_;
}
inline void ResHpMpChange::set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  maxmp_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResHpMpChange.maxMp)
}

// -------------------------------------------------------------------

// ResObjectDie

// required int64 lid = 1;
inline bool ResObjectDie::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResObjectDie::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectDie::lid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResObjectDie.lid)
  return lid_;
}
inline void ResObjectDie::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResObjectDie.lid)
}

// required int64 killerId = 2;
inline bool ResObjectDie::has_killerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResObjectDie::clear_killerid() {
  killerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResObjectDie::killerid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResObjectDie.killerId)
  return killerid_;
}
inline void ResObjectDie::set_killerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  killerid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResObjectDie.killerId)
}

// -------------------------------------------------------------------

// ResPlayerTotalHpPercnet

// required bytes percent = 1;
inline bool ResPlayerTotalHpPercnet::has_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerTotalHpPercnet::clear_percent() {
  percent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResPlayerTotalHpPercnet::percent() const {
  // @@protoc_insertion_point(field_get:fightV2.ResPlayerTotalHpPercnet.percent)
  return percent_.GetNoArena();
}
inline void ResPlayerTotalHpPercnet::set_percent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fightV2.ResPlayerTotalHpPercnet.percent)
}
inline void ResPlayerTotalHpPercnet::set_percent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fightV2.ResPlayerTotalHpPercnet.percent)
}
inline void ResPlayerTotalHpPercnet::set_percent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fightV2.ResPlayerTotalHpPercnet.percent)
}
inline void ResPlayerTotalHpPercnet::set_percent(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fightV2.ResPlayerTotalHpPercnet.percent)
}
inline std::string* ResPlayerTotalHpPercnet::mutable_percent() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:fightV2.ResPlayerTotalHpPercnet.percent)
  return percent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResPlayerTotalHpPercnet::release_percent() {
  // @@protoc_insertion_point(field_release:fightV2.ResPlayerTotalHpPercnet.percent)
  if (!has_percent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return percent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResPlayerTotalHpPercnet::set_allocated_percent(std::string* percent) {
  if (percent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  percent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percent);
  // @@protoc_insertion_point(field_set_allocated:fightV2.ResPlayerTotalHpPercnet.percent)
}

// -------------------------------------------------------------------

// ResInnerChange

// required int64 lid = 1;
inline bool ResInnerChange::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResInnerChange::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResInnerChange::lid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResInnerChange.lid)
  return lid_;
}
inline void ResInnerChange::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResInnerChange.lid)
}

// optional int64 inner = 2;
inline bool ResInnerChange::has_inner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResInnerChange::clear_inner() {
  inner_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResInnerChange::inner() const {
  // @@protoc_insertion_point(field_get:fightV2.ResInnerChange.inner)
  return inner_;
}
inline void ResInnerChange::set_inner(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  inner_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResInnerChange.inner)
}

// -------------------------------------------------------------------

// ResShouHuAttack

// required int32 shouhuId = 1;
inline bool ResShouHuAttack::has_shouhuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResShouHuAttack::clear_shouhuid() {
  shouhuid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResShouHuAttack::shouhuid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResShouHuAttack.shouhuId)
  return shouhuid_;
}
inline void ResShouHuAttack::set_shouhuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  shouhuid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResShouHuAttack.shouhuId)
}

// required int64 ownerId = 2;
inline bool ResShouHuAttack::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResShouHuAttack::clear_ownerid() {
  ownerid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResShouHuAttack::ownerid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResShouHuAttack.ownerId)
  return ownerid_;
}
inline void ResShouHuAttack::set_ownerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResShouHuAttack.ownerId)
}

// optional int32 buffId = 3;
inline bool ResShouHuAttack::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResShouHuAttack::clear_buffid() {
  buffid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResShouHuAttack::buffid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResShouHuAttack.buffId)
  return buffid_;
}
inline void ResShouHuAttack::set_buffid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  buffid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResShouHuAttack.buffId)
}

// -------------------------------------------------------------------

// ResPlayerTotalMagicPercnet

// required bytes percent = 1;
inline bool ResPlayerTotalMagicPercnet::has_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerTotalMagicPercnet::clear_percent() {
  percent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResPlayerTotalMagicPercnet::percent() const {
  // @@protoc_insertion_point(field_get:fightV2.ResPlayerTotalMagicPercnet.percent)
  return percent_.GetNoArena();
}
inline void ResPlayerTotalMagicPercnet::set_percent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fightV2.ResPlayerTotalMagicPercnet.percent)
}
inline void ResPlayerTotalMagicPercnet::set_percent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fightV2.ResPlayerTotalMagicPercnet.percent)
}
inline void ResPlayerTotalMagicPercnet::set_percent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fightV2.ResPlayerTotalMagicPercnet.percent)
}
inline void ResPlayerTotalMagicPercnet::set_percent(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  percent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fightV2.ResPlayerTotalMagicPercnet.percent)
}
inline std::string* ResPlayerTotalMagicPercnet::mutable_percent() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:fightV2.ResPlayerTotalMagicPercnet.percent)
  return percent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResPlayerTotalMagicPercnet::release_percent() {
  // @@protoc_insertion_point(field_release:fightV2.ResPlayerTotalMagicPercnet.percent)
  if (!has_percent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return percent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResPlayerTotalMagicPercnet::set_allocated_percent(std::string* percent) {
  if (percent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  percent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percent);
  // @@protoc_insertion_point(field_set_allocated:fightV2.ResPlayerTotalMagicPercnet.percent)
}

// -------------------------------------------------------------------

// ResBanCure

// required int64 targetId = 1;
inline bool ResBanCure::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResBanCure::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResBanCure::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.ResBanCure.targetId)
  return targetid_;
}
inline void ResBanCure::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ResBanCure.targetId)
}

// -------------------------------------------------------------------

// SkillMoveInfo

// required int64 attackId = 1;
inline bool SkillMoveInfo::has_attackid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillMoveInfo::clear_attackid() {
  attackid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SkillMoveInfo::attackid() const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMoveInfo.attackId)
  return attackid_;
}
inline void SkillMoveInfo::set_attackid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  attackid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.SkillMoveInfo.attackId)
}

// optional int32 type = 2;
inline bool SkillMoveInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillMoveInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillMoveInfo::type() const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMoveInfo.type)
  return type_;
}
inline void SkillMoveInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:fightV2.SkillMoveInfo.type)
}

// repeated .fightV2.SkillMove moveInfo = 3;
inline int SkillMoveInfo::moveinfo_size() const {
  return moveinfo_.size();
}
inline void SkillMoveInfo::clear_moveinfo() {
  moveinfo_.Clear();
}
inline ::fightV2::SkillMove* SkillMoveInfo::mutable_moveinfo(int index) {
  // @@protoc_insertion_point(field_mutable:fightV2.SkillMoveInfo.moveInfo)
  return moveinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::SkillMove >*
SkillMoveInfo::mutable_moveinfo() {
  // @@protoc_insertion_point(field_mutable_list:fightV2.SkillMoveInfo.moveInfo)
  return &moveinfo_;
}
inline const ::fightV2::SkillMove& SkillMoveInfo::moveinfo(int index) const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMoveInfo.moveInfo)
  return moveinfo_.Get(index);
}
inline ::fightV2::SkillMove* SkillMoveInfo::add_moveinfo() {
  // @@protoc_insertion_point(field_add:fightV2.SkillMoveInfo.moveInfo)
  return moveinfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fightV2::SkillMove >&
SkillMoveInfo::moveinfo() const {
  // @@protoc_insertion_point(field_list:fightV2.SkillMoveInfo.moveInfo)
  return moveinfo_;
}

// -------------------------------------------------------------------

// SkillMove

// required int64 targetId = 1;
inline bool SkillMove::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillMove::clear_targetid() {
  targetid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SkillMove::targetid() const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMove.targetId)
  return targetid_;
}
inline void SkillMove::set_targetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  targetid_ = value;
  // @@protoc_insertion_point(field_set:fightV2.SkillMove.targetId)
}

// required int32 x = 2;
inline bool SkillMove::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillMove::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillMove::x() const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMove.x)
  return x_;
}
inline void SkillMove::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.SkillMove.x)
}

// required int32 y = 3;
inline bool SkillMove::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillMove::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SkillMove::y() const {
  // @@protoc_insertion_point(field_get:fightV2.SkillMove.y)
  return y_;
}
inline void SkillMove::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.SkillMove.y)
}

// -------------------------------------------------------------------

// ComboNode

// required int32 comboNode = 1;
inline bool ComboNode::has_combonode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComboNode::clear_combonode() {
  combonode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboNode::combonode() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.comboNode)
  return combonode_;
}
inline void ComboNode::set_combonode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  combonode_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.comboNode)
}

// optional int64 id = 2;
inline bool ComboNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComboNode::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboNode::id() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.id)
  return id_;
}
inline void ComboNode::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.id)
}

// optional float dir = 3;
inline bool ComboNode::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComboNode::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ComboNode::dir() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.dir)
  return dir_;
}
inline void ComboNode::set_dir(float value) {
  _has_bits_[0] |= 0x00000004u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.dir)
}

// optional float x = 4;
inline bool ComboNode::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComboNode::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ComboNode::x() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.x)
  return x_;
}
inline void ComboNode::set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.x)
}

// optional float y = 5;
inline bool ComboNode::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ComboNode::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ComboNode::y() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.y)
  return y_;
}
inline void ComboNode::set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.y)
}

// optional float z = 6;
inline bool ComboNode::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ComboNode::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ComboNode::z() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.z)
  return z_;
}
inline void ComboNode::set_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.z)
}

// optional float rockerX = 7;
inline bool ComboNode::has_rockerx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ComboNode::clear_rockerx() {
  rockerx_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ComboNode::rockerx() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.rockerX)
  return rockerx_;
}
inline void ComboNode::set_rockerx(float value) {
  _has_bits_[0] |= 0x00000040u;
  rockerx_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.rockerX)
}

// optional float rockerY = 8;
inline bool ComboNode::has_rockery() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ComboNode::clear_rockery() {
  rockery_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ComboNode::rockery() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.rockerY)
  return rockery_;
}
inline void ComboNode::set_rockery(float value) {
  _has_bits_[0] |= 0x00000080u;
  rockery_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.rockerY)
}

// optional float controllerYaw = 9;
inline bool ComboNode::has_controlleryaw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ComboNode::clear_controlleryaw() {
  controlleryaw_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ComboNode::controlleryaw() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.controllerYaw)
  return controlleryaw_;
}
inline void ComboNode::set_controlleryaw(float value) {
  _has_bits_[0] |= 0x00000100u;
  controlleryaw_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.controllerYaw)
}

// optional float targetDir = 10;
inline bool ComboNode::has_targetdir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ComboNode::clear_targetdir() {
  targetdir_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ComboNode::targetdir() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.targetDir)
  return targetdir_;
}
inline void ComboNode::set_targetdir(float value) {
  _has_bits_[0] |= 0x00000200u;
  targetdir_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.targetDir)
}

// optional float maxRotate = 11;
inline bool ComboNode::has_maxrotate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ComboNode::clear_maxrotate() {
  maxrotate_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ComboNode::maxrotate() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboNode.maxRotate)
  return maxrotate_;
}
inline void ComboNode::set_maxrotate(float value) {
  _has_bits_[0] |= 0x00000400u;
  maxrotate_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboNode.maxRotate)
}

// -------------------------------------------------------------------

// ComboEnd

// optional int64 id = 1;
inline bool ComboEnd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComboEnd::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboEnd::id() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboEnd.id)
  return id_;
}
inline void ComboEnd::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboEnd.id)
}

// optional float x = 2;
inline bool ComboEnd::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComboEnd::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ComboEnd::x() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboEnd.x)
  return x_;
}
inline void ComboEnd::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboEnd.x)
}

// optional float y = 3;
inline bool ComboEnd::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComboEnd::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ComboEnd::y() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboEnd.y)
  return y_;
}
inline void ComboEnd::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboEnd.y)
}

// optional float z = 4;
inline bool ComboEnd::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComboEnd::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ComboEnd::z() const {
  // @@protoc_insertion_point(field_get:fightV2.ComboEnd.z)
  return z_;
}
inline void ComboEnd::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:fightV2.ComboEnd.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fightV2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fightV2::PropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fightV2::PropertyType>() {
  return ::fightV2::PropertyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fight_2eproto
