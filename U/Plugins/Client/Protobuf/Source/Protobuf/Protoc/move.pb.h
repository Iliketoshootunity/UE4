// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: move.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_move_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_move_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_move_2eproto PROTOBUF_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_API TableStruct_move_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern PROTOBUF_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_move_2eproto;
namespace moveV2 {
class ReqChangeDir;
class ReqChangeDirDefaultTypeInternal;
PROTOBUF_API extern ReqChangeDirDefaultTypeInternal _ReqChangeDir_default_instance_;
class ReqMove;
class ReqMoveDefaultTypeInternal;
PROTOBUF_API extern ReqMoveDefaultTypeInternal _ReqMove_default_instance_;
class ReqPlayerMoveRequest;
class ReqPlayerMoveRequestDefaultTypeInternal;
PROTOBUF_API extern ReqPlayerMoveRequestDefaultTypeInternal _ReqPlayerMoveRequest_default_instance_;
class ReqPlayerWalk;
class ReqPlayerWalkDefaultTypeInternal;
PROTOBUF_API extern ReqPlayerWalkDefaultTypeInternal _ReqPlayerWalk_default_instance_;
class ReqSynPosition;
class ReqSynPositionDefaultTypeInternal;
PROTOBUF_API extern ReqSynPositionDefaultTypeInternal _ReqSynPosition_default_instance_;
class ResChangeDir;
class ResChangeDirDefaultTypeInternal;
PROTOBUF_API extern ResChangeDirDefaultTypeInternal _ResChangeDir_default_instance_;
class ResMove;
class ResMoveDefaultTypeInternal;
PROTOBUF_API extern ResMoveDefaultTypeInternal _ResMove_default_instance_;
class ResPlayerWalk;
class ResPlayerWalkDefaultTypeInternal;
PROTOBUF_API extern ResPlayerWalkDefaultTypeInternal _ResPlayerWalk_default_instance_;
}  // namespace moveV2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_API ::moveV2::ReqChangeDir* Arena::CreateMaybeMessage<::moveV2::ReqChangeDir>(Arena*);
template<> PROTOBUF_API ::moveV2::ReqMove* Arena::CreateMaybeMessage<::moveV2::ReqMove>(Arena*);
template<> PROTOBUF_API ::moveV2::ReqPlayerMoveRequest* Arena::CreateMaybeMessage<::moveV2::ReqPlayerMoveRequest>(Arena*);
template<> PROTOBUF_API ::moveV2::ReqPlayerWalk* Arena::CreateMaybeMessage<::moveV2::ReqPlayerWalk>(Arena*);
template<> PROTOBUF_API ::moveV2::ReqSynPosition* Arena::CreateMaybeMessage<::moveV2::ReqSynPosition>(Arena*);
template<> PROTOBUF_API ::moveV2::ResChangeDir* Arena::CreateMaybeMessage<::moveV2::ResChangeDir>(Arena*);
template<> PROTOBUF_API ::moveV2::ResMove* Arena::CreateMaybeMessage<::moveV2::ResMove>(Arena*);
template<> PROTOBUF_API ::moveV2::ResPlayerWalk* Arena::CreateMaybeMessage<::moveV2::ResPlayerWalk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace moveV2 {

// ===================================================================

class PROTOBUF_API ReqMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ReqMove) */ {
 public:
  ReqMove();
  virtual ~ReqMove();

  ReqMove(const ReqMove& from);
  ReqMove(ReqMove&& from) noexcept
    : ReqMove() {
    *this = ::std::move(from);
  }

  inline ReqMove& operator=(const ReqMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqMove& operator=(ReqMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqMove* internal_default_instance() {
    return reinterpret_cast<const ReqMove*>(
               &_ReqMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqMove* other);
  friend void swap(ReqMove& a, ReqMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqMove* New() const final {
    return CreateMaybeMessage<ReqMove>(nullptr);
  }

  ReqMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqMove& from);
  void MergeFrom(const ReqMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ReqMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float oX = 4;
  bool has_ox() const;
  void clear_ox();
  static const int kOXFieldNumber = 4;
  float ox() const;
  void set_ox(float value);

  // optional float oY = 5;
  bool has_oy() const;
  void clear_oy();
  static const int kOYFieldNumber = 5;
  float oy() const;
  void set_oy(float value);

  // optional float oZ = 6;
  bool has_oz() const;
  void clear_oz();
  static const int kOZFieldNumber = 6;
  float oz() const;
  void set_oz(float value);

  // optional int32 action = 7;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float dir = 8;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 8;
  float dir() const;
  void set_dir(float value);

  // optional float speed = 9;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 9;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:moveV2.ReqMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float ox_;
  float oy_;
  float oz_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  float dir_;
  float speed_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ResMove) */ {
 public:
  ResMove();
  virtual ~ResMove();

  ResMove(const ResMove& from);
  ResMove(ResMove&& from) noexcept
    : ResMove() {
    *this = ::std::move(from);
  }

  inline ResMove& operator=(const ResMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResMove& operator=(ResMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResMove* internal_default_instance() {
    return reinterpret_cast<const ResMove*>(
               &_ResMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ResMove* other);
  friend void swap(ResMove& a, ResMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResMove* New() const final {
    return CreateMaybeMessage<ResMove>(nullptr);
  }

  ResMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResMove& from);
  void MergeFrom(const ResMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ResMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // optional int32 action = 5;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float dir = 6;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 6;
  float dir() const;
  void set_dir(float value);

  // optional bool isIdle = 7;
  bool has_isidle() const;
  void clear_isidle();
  static const int kIsIdleFieldNumber = 7;
  bool isidle() const;
  void set_isidle(bool value);

  // optional float speed = 8;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 8;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:moveV2.ResMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  float dir_;
  bool isidle_;
  float speed_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqSynPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ReqSynPosition) */ {
 public:
  ReqSynPosition();
  virtual ~ReqSynPosition();

  ReqSynPosition(const ReqSynPosition& from);
  ReqSynPosition(ReqSynPosition&& from) noexcept
    : ReqSynPosition() {
    *this = ::std::move(from);
  }

  inline ReqSynPosition& operator=(const ReqSynPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSynPosition& operator=(ReqSynPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqSynPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSynPosition* internal_default_instance() {
    return reinterpret_cast<const ReqSynPosition*>(
               &_ReqSynPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqSynPosition* other);
  friend void swap(ReqSynPosition& a, ReqSynPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSynPosition* New() const final {
    return CreateMaybeMessage<ReqSynPosition>(nullptr);
  }

  ReqSynPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSynPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSynPosition& from);
  void MergeFrom(const ReqSynPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSynPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ReqSynPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float z = 4;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // optional float dir = 5;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 5;
  float dir() const;
  void set_dir(float value);

  // @@protoc_insertion_point(class_scope:moveV2.ReqSynPosition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  float x_;
  float y_;
  float z_;
  float dir_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqPlayerMoveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ReqPlayerMoveRequest) */ {
 public:
  ReqPlayerMoveRequest();
  virtual ~ReqPlayerMoveRequest();

  ReqPlayerMoveRequest(const ReqPlayerMoveRequest& from);
  ReqPlayerMoveRequest(ReqPlayerMoveRequest&& from) noexcept
    : ReqPlayerMoveRequest() {
    *this = ::std::move(from);
  }

  inline ReqPlayerMoveRequest& operator=(const ReqPlayerMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPlayerMoveRequest& operator=(ReqPlayerMoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqPlayerMoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPlayerMoveRequest* internal_default_instance() {
    return reinterpret_cast<const ReqPlayerMoveRequest*>(
               &_ReqPlayerMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReqPlayerMoveRequest* other);
  friend void swap(ReqPlayerMoveRequest& a, ReqPlayerMoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPlayerMoveRequest* New() const final {
    return CreateMaybeMessage<ReqPlayerMoveRequest>(nullptr);
  }

  ReqPlayerMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqPlayerMoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqPlayerMoveRequest& from);
  void MergeFrom(const ReqPlayerMoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPlayerMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ReqPlayerMoveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional int64 startTime = 4;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional int32 action = 5;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 currentX = 6;
  bool has_currentx() const;
  void clear_currentx();
  static const int kCurrentXFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 currentx() const;
  void set_currentx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 currentY = 7;
  bool has_currenty() const;
  void clear_currenty();
  static const int kCurrentYFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 currenty() const;
  void set_currenty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:moveV2.ReqPlayerMoveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentx_;
  ::PROTOBUF_NAMESPACE_ID::int32 currenty_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqChangeDir :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ReqChangeDir) */ {
 public:
  ReqChangeDir();
  virtual ~ReqChangeDir();

  ReqChangeDir(const ReqChangeDir& from);
  ReqChangeDir(ReqChangeDir&& from) noexcept
    : ReqChangeDir() {
    *this = ::std::move(from);
  }

  inline ReqChangeDir& operator=(const ReqChangeDir& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqChangeDir& operator=(ReqChangeDir&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqChangeDir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqChangeDir* internal_default_instance() {
    return reinterpret_cast<const ReqChangeDir*>(
               &_ReqChangeDir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqChangeDir* other);
  friend void swap(ReqChangeDir& a, ReqChangeDir& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqChangeDir* New() const final {
    return CreateMaybeMessage<ReqChangeDir>(nullptr);
  }

  ReqChangeDir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqChangeDir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqChangeDir& from);
  void MergeFrom(const ReqChangeDir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqChangeDir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ReqChangeDir";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dir = 1;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 1;
  const std::string& dir() const;
  void set_dir(const std::string& value);
  void set_dir(std::string&& value);
  void set_dir(const char* value);
  void set_dir(const void* value, size_t size);
  std::string* mutable_dir();
  std::string* release_dir();
  void set_allocated_dir(std::string* dir);

  // @@protoc_insertion_point(class_scope:moveV2.ReqChangeDir)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResChangeDir :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ResChangeDir) */ {
 public:
  ResChangeDir();
  virtual ~ResChangeDir();

  ResChangeDir(const ResChangeDir& from);
  ResChangeDir(ResChangeDir&& from) noexcept
    : ResChangeDir() {
    *this = ::std::move(from);
  }

  inline ResChangeDir& operator=(const ResChangeDir& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResChangeDir& operator=(ResChangeDir&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResChangeDir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResChangeDir* internal_default_instance() {
    return reinterpret_cast<const ResChangeDir*>(
               &_ResChangeDir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResChangeDir* other);
  friend void swap(ResChangeDir& a, ResChangeDir& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResChangeDir* New() const final {
    return CreateMaybeMessage<ResChangeDir>(nullptr);
  }

  ResChangeDir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResChangeDir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResChangeDir& from);
  void MergeFrom(const ResChangeDir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResChangeDir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ResChangeDir";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes dir = 2;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 2;
  const std::string& dir() const;
  void set_dir(const std::string& value);
  void set_dir(std::string&& value);
  void set_dir(const char* value);
  void set_dir(const void* value, size_t size);
  std::string* mutable_dir();
  std::string* release_dir();
  void set_allocated_dir(std::string* dir);

  // optional int64 lid = 1;
  bool has_lid() const;
  void clear_lid();
  static const int kLidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 lid() const;
  void set_lid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:moveV2.ResChangeDir)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::int64 lid_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ReqPlayerWalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ReqPlayerWalk) */ {
 public:
  ReqPlayerWalk();
  virtual ~ReqPlayerWalk();

  ReqPlayerWalk(const ReqPlayerWalk& from);
  ReqPlayerWalk(ReqPlayerWalk&& from) noexcept
    : ReqPlayerWalk() {
    *this = ::std::move(from);
  }

  inline ReqPlayerWalk& operator=(const ReqPlayerWalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPlayerWalk& operator=(ReqPlayerWalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqPlayerWalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPlayerWalk* internal_default_instance() {
    return reinterpret_cast<const ReqPlayerWalk*>(
               &_ReqPlayerWalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReqPlayerWalk* other);
  friend void swap(ReqPlayerWalk& a, ReqPlayerWalk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPlayerWalk* New() const final {
    return CreateMaybeMessage<ReqPlayerWalk>(nullptr);
  }

  ReqPlayerWalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqPlayerWalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqPlayerWalk& from);
  void MergeFrom(const ReqPlayerWalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPlayerWalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ReqPlayerWalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float dirX = 4;
  bool has_dirx() const;
  void clear_dirx();
  static const int kDirXFieldNumber = 4;
  float dirx() const;
  void set_dirx(float value);

  // optional float dirY = 5;
  bool has_diry() const;
  void clear_diry();
  static const int kDirYFieldNumber = 5;
  float diry() const;
  void set_diry(float value);

  // optional float dirZ = 6;
  bool has_dirz() const;
  void clear_dirz();
  static const int kDirZFieldNumber = 6;
  float dirz() const;
  void set_dirz(float value);

  // @@protoc_insertion_point(class_scope:moveV2.ReqPlayerWalk)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float dirx_;
  float diry_;
  float dirz_;
  friend struct ::TableStruct_move_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_API ResPlayerWalk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:moveV2.ResPlayerWalk) */ {
 public:
  ResPlayerWalk();
  virtual ~ResPlayerWalk();

  ResPlayerWalk(const ResPlayerWalk& from);
  ResPlayerWalk(ResPlayerWalk&& from) noexcept
    : ResPlayerWalk() {
    *this = ::std::move(from);
  }

  inline ResPlayerWalk& operator=(const ResPlayerWalk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResPlayerWalk& operator=(ResPlayerWalk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResPlayerWalk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResPlayerWalk* internal_default_instance() {
    return reinterpret_cast<const ResPlayerWalk*>(
               &_ResPlayerWalk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResPlayerWalk* other);
  friend void swap(ResPlayerWalk& a, ResPlayerWalk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResPlayerWalk* New() const final {
    return CreateMaybeMessage<ResPlayerWalk>(nullptr);
  }

  ResPlayerWalk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResPlayerWalk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResPlayerWalk& from);
  void MergeFrom(const ResPlayerWalk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResPlayerWalk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "moveV2.ResPlayerWalk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_move_2eproto);
    return ::descriptor_table_move_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float dirX = 4;
  bool has_dirx() const;
  void clear_dirx();
  static const int kDirXFieldNumber = 4;
  float dirx() const;
  void set_dirx(float value);

  // optional float dirY = 5;
  bool has_diry() const;
  void clear_diry();
  static const int kDirYFieldNumber = 5;
  float diry() const;
  void set_diry(float value);

  // optional float dirZ = 6;
  bool has_dirz() const;
  void clear_dirz();
  static const int kDirZFieldNumber = 6;
  float dirz() const;
  void set_dirz(float value);

  // optional int64 id = 7;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:moveV2.ResPlayerWalk)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float dirx_;
  float diry_;
  float dirz_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_move_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqMove

// optional float x = 1;
inline bool ReqMove::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMove::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ReqMove::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.x)
  return x_;
}
inline void ReqMove::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.x)
}

// optional float y = 2;
inline bool ReqMove::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMove::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ReqMove::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.y)
  return y_;
}
inline void ReqMove::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.y)
}

// optional float z = 3;
inline bool ReqMove::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMove::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ReqMove::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.z)
  return z_;
}
inline void ReqMove::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.z)
}

// optional float oX = 4;
inline bool ReqMove::has_ox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqMove::clear_ox() {
  ox_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ReqMove::ox() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.oX)
  return ox_;
}
inline void ReqMove::set_ox(float value) {
  _has_bits_[0] |= 0x00000008u;
  ox_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.oX)
}

// optional float oY = 5;
inline bool ReqMove::has_oy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqMove::clear_oy() {
  oy_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ReqMove::oy() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.oY)
  return oy_;
}
inline void ReqMove::set_oy(float value) {
  _has_bits_[0] |= 0x00000010u;
  oy_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.oY)
}

// optional float oZ = 6;
inline bool ReqMove::has_oz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqMove::clear_oz() {
  oz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ReqMove::oz() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.oZ)
  return oz_;
}
inline void ReqMove::set_oz(float value) {
  _has_bits_[0] |= 0x00000020u;
  oz_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.oZ)
}

// optional int32 action = 7;
inline bool ReqMove::has_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqMove::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqMove::action() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.action)
  return action_;
}
inline void ReqMove::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  action_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.action)
}

// optional float dir = 8;
inline bool ReqMove::has_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqMove::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ReqMove::dir() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.dir)
  return dir_;
}
inline void ReqMove::set_dir(float value) {
  _has_bits_[0] |= 0x00000080u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.dir)
}

// optional float speed = 9;
inline bool ReqMove::has_speed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqMove::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ReqMove::speed() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqMove.speed)
  return speed_;
}
inline void ReqMove::set_speed(float value) {
  _has_bits_[0] |= 0x00000100u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqMove.speed)
}

// -------------------------------------------------------------------

// ResMove

// optional int64 lid = 1;
inline bool ResMove::has_lid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResMove::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResMove::lid() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.lid)
  return lid_;
}
inline void ResMove::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.lid)
}

// optional float x = 2;
inline bool ResMove::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResMove::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ResMove::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.x)
  return x_;
}
inline void ResMove::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.x)
}

// optional float y = 3;
inline bool ResMove::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResMove::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResMove::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.y)
  return y_;
}
inline void ResMove::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.y)
}

// optional float z = 4;
inline bool ResMove::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResMove::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResMove::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.z)
  return z_;
}
inline void ResMove::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.z)
}

// optional int32 action = 5;
inline bool ResMove::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResMove::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResMove::action() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.action)
  return action_;
}
inline void ResMove::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  action_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.action)
}

// optional float dir = 6;
inline bool ResMove::has_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResMove::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResMove::dir() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.dir)
  return dir_;
}
inline void ResMove::set_dir(float value) {
  _has_bits_[0] |= 0x00000020u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.dir)
}

// optional bool isIdle = 7;
inline bool ResMove::has_isidle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResMove::clear_isidle() {
  isidle_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ResMove::isidle() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.isIdle)
  return isidle_;
}
inline void ResMove::set_isidle(bool value) {
  _has_bits_[0] |= 0x00000040u;
  isidle_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.isIdle)
}

// optional float speed = 8;
inline bool ResMove::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResMove::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ResMove::speed() const {
  // @@protoc_insertion_point(field_get:moveV2.ResMove.speed)
  return speed_;
}
inline void ResMove::set_speed(float value) {
  _has_bits_[0] |= 0x00000080u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResMove.speed)
}

// -------------------------------------------------------------------

// ReqSynPosition

// optional int64 id = 1;
inline bool ReqSynPosition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSynPosition::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqSynPosition::id() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqSynPosition.id)
  return id_;
}
inline void ReqSynPosition::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqSynPosition.id)
}

// optional float x = 2;
inline bool ReqSynPosition::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSynPosition::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ReqSynPosition::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqSynPosition.x)
  return x_;
}
inline void ReqSynPosition::set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqSynPosition.x)
}

// optional float y = 3;
inline bool ReqSynPosition::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSynPosition::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ReqSynPosition::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqSynPosition.y)
  return y_;
}
inline void ReqSynPosition::set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqSynPosition.y)
}

// optional float z = 4;
inline bool ReqSynPosition::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqSynPosition::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ReqSynPosition::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqSynPosition.z)
  return z_;
}
inline void ReqSynPosition::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqSynPosition.z)
}

// optional float dir = 5;
inline bool ReqSynPosition::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqSynPosition::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ReqSynPosition::dir() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqSynPosition.dir)
  return dir_;
}
inline void ReqSynPosition::set_dir(float value) {
  _has_bits_[0] |= 0x00000010u;
  dir_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqSynPosition.dir)
}

// -------------------------------------------------------------------

// ReqPlayerMoveRequest

// optional float x = 1;
inline bool ReqPlayerMoveRequest::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayerMoveRequest::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ReqPlayerMoveRequest::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.x)
  return x_;
}
inline void ReqPlayerMoveRequest::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.x)
}

// optional float y = 2;
inline bool ReqPlayerMoveRequest::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayerMoveRequest::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ReqPlayerMoveRequest::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.y)
  return y_;
}
inline void ReqPlayerMoveRequest::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.y)
}

// optional float z = 3;
inline bool ReqPlayerMoveRequest::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqPlayerMoveRequest::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ReqPlayerMoveRequest::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.z)
  return z_;
}
inline void ReqPlayerMoveRequest::set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.z)
}

// optional int64 startTime = 4;
inline bool ReqPlayerMoveRequest::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPlayerMoveRequest::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqPlayerMoveRequest::starttime() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.startTime)
  return starttime_;
}
inline void ReqPlayerMoveRequest::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  starttime_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.startTime)
}

// optional int32 action = 5;
inline bool ReqPlayerMoveRequest::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqPlayerMoveRequest::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPlayerMoveRequest::action() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.action)
  return action_;
}
inline void ReqPlayerMoveRequest::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  action_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.action)
}

// optional int32 currentX = 6;
inline bool ReqPlayerMoveRequest::has_currentx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqPlayerMoveRequest::clear_currentx() {
  currentx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPlayerMoveRequest::currentx() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.currentX)
  return currentx_;
}
inline void ReqPlayerMoveRequest::set_currentx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  currentx_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.currentX)
}

// optional int32 currentY = 7;
inline bool ReqPlayerMoveRequest::has_currenty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqPlayerMoveRequest::clear_currenty() {
  currenty_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPlayerMoveRequest::currenty() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerMoveRequest.currentY)
  return currenty_;
}
inline void ReqPlayerMoveRequest::set_currenty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  currenty_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerMoveRequest.currentY)
}

// -------------------------------------------------------------------

// ReqChangeDir

// optional bytes dir = 1;
inline bool ReqChangeDir::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangeDir::clear_dir() {
  dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqChangeDir::dir() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqChangeDir.dir)
  return dir_.GetNoArena();
}
inline void ReqChangeDir::set_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moveV2.ReqChangeDir.dir)
}
inline void ReqChangeDir::set_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moveV2.ReqChangeDir.dir)
}
inline void ReqChangeDir::set_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moveV2.ReqChangeDir.dir)
}
inline void ReqChangeDir::set_dir(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moveV2.ReqChangeDir.dir)
}
inline std::string* ReqChangeDir::mutable_dir() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:moveV2.ReqChangeDir.dir)
  return dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqChangeDir::release_dir() {
  // @@protoc_insertion_point(field_release:moveV2.ReqChangeDir.dir)
  if (!has_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqChangeDir::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:moveV2.ReqChangeDir.dir)
}

// -------------------------------------------------------------------

// ResChangeDir

// optional int64 lid = 1;
inline bool ResChangeDir::has_lid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResChangeDir::clear_lid() {
  lid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResChangeDir::lid() const {
  // @@protoc_insertion_point(field_get:moveV2.ResChangeDir.lid)
  return lid_;
}
inline void ResChangeDir::set_lid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lid_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResChangeDir.lid)
}

// optional bytes dir = 2;
inline bool ResChangeDir::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResChangeDir::clear_dir() {
  dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResChangeDir::dir() const {
  // @@protoc_insertion_point(field_get:moveV2.ResChangeDir.dir)
  return dir_.GetNoArena();
}
inline void ResChangeDir::set_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:moveV2.ResChangeDir.dir)
}
inline void ResChangeDir::set_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:moveV2.ResChangeDir.dir)
}
inline void ResChangeDir::set_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:moveV2.ResChangeDir.dir)
}
inline void ResChangeDir::set_dir(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:moveV2.ResChangeDir.dir)
}
inline std::string* ResChangeDir::mutable_dir() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:moveV2.ResChangeDir.dir)
  return dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResChangeDir::release_dir() {
  // @@protoc_insertion_point(field_release:moveV2.ResChangeDir.dir)
  if (!has_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResChangeDir::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:moveV2.ResChangeDir.dir)
}

// -------------------------------------------------------------------

// ReqPlayerWalk

// optional float x = 1;
inline bool ReqPlayerWalk::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayerWalk::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ReqPlayerWalk::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.x)
  return x_;
}
inline void ReqPlayerWalk::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.x)
}

// optional float y = 2;
inline bool ReqPlayerWalk::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayerWalk::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ReqPlayerWalk::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.y)
  return y_;
}
inline void ReqPlayerWalk::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.y)
}

// optional float z = 3;
inline bool ReqPlayerWalk::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPlayerWalk::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ReqPlayerWalk::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.z)
  return z_;
}
inline void ReqPlayerWalk::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.z)
}

// optional float dirX = 4;
inline bool ReqPlayerWalk::has_dirx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqPlayerWalk::clear_dirx() {
  dirx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ReqPlayerWalk::dirx() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.dirX)
  return dirx_;
}
inline void ReqPlayerWalk::set_dirx(float value) {
  _has_bits_[0] |= 0x00000008u;
  dirx_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.dirX)
}

// optional float dirY = 5;
inline bool ReqPlayerWalk::has_diry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqPlayerWalk::clear_diry() {
  diry_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ReqPlayerWalk::diry() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.dirY)
  return diry_;
}
inline void ReqPlayerWalk::set_diry(float value) {
  _has_bits_[0] |= 0x00000010u;
  diry_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.dirY)
}

// optional float dirZ = 6;
inline bool ReqPlayerWalk::has_dirz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqPlayerWalk::clear_dirz() {
  dirz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ReqPlayerWalk::dirz() const {
  // @@protoc_insertion_point(field_get:moveV2.ReqPlayerWalk.dirZ)
  return dirz_;
}
inline void ReqPlayerWalk::set_dirz(float value) {
  _has_bits_[0] |= 0x00000020u;
  dirz_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ReqPlayerWalk.dirZ)
}

// -------------------------------------------------------------------

// ResPlayerWalk

// optional float x = 1;
inline bool ResPlayerWalk::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResPlayerWalk::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ResPlayerWalk::x() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.x)
  return x_;
}
inline void ResPlayerWalk::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.x)
}

// optional float y = 2;
inline bool ResPlayerWalk::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResPlayerWalk::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ResPlayerWalk::y() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.y)
  return y_;
}
inline void ResPlayerWalk::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.y)
}

// optional float z = 3;
inline bool ResPlayerWalk::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResPlayerWalk::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ResPlayerWalk::z() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.z)
  return z_;
}
inline void ResPlayerWalk::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.z)
}

// optional float dirX = 4;
inline bool ResPlayerWalk::has_dirx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResPlayerWalk::clear_dirx() {
  dirx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ResPlayerWalk::dirx() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.dirX)
  return dirx_;
}
inline void ResPlayerWalk::set_dirx(float value) {
  _has_bits_[0] |= 0x00000008u;
  dirx_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.dirX)
}

// optional float dirY = 5;
inline bool ResPlayerWalk::has_diry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResPlayerWalk::clear_diry() {
  diry_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ResPlayerWalk::diry() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.dirY)
  return diry_;
}
inline void ResPlayerWalk::set_diry(float value) {
  _has_bits_[0] |= 0x00000010u;
  diry_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.dirY)
}

// optional float dirZ = 6;
inline bool ResPlayerWalk::has_dirz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResPlayerWalk::clear_dirz() {
  dirz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ResPlayerWalk::dirz() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.dirZ)
  return dirz_;
}
inline void ResPlayerWalk::set_dirz(float value) {
  _has_bits_[0] |= 0x00000020u;
  dirz_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.dirZ)
}

// optional int64 id = 7;
inline bool ResPlayerWalk::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResPlayerWalk::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResPlayerWalk::id() const {
  // @@protoc_insertion_point(field_get:moveV2.ResPlayerWalk.id)
  return id_;
}
inline void ResPlayerWalk::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
  // @@protoc_insertion_point(field_set:moveV2.ResPlayerWalk.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace moveV2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_move_2eproto
